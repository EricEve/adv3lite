<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Schemes and Devices &mdash; Recapitulation</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="schemes.htm">Schemes and Devices</a> &gt; 
Recapitulation
<br><span class="navnp"><a class="nav" href="scene.htm"><i>Prev:</i> Making a Scene</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="cockpit.htm"><i>Next:</i> Cockpit Controls</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">
<h1>Recapitulation</h1>
<p>Once again, we've covered a lot of new ground in this chapter, much of it moving into more advanced territory. Before we go on to the next new topic, let's pause for breath and review what we've just done.</p>

<p>The first and most important point thing is not to worry if you don't feel you've taken it in, or it all seems a bit of a jumble, or you're not quite sure why we did things <em>this</em> way rather than <em>that</em>. There often is more than one way to tackle a problem in writing IF, and often one solution is just as good as another, and it all comes down to the taste and inclinations of the game author. In any case the particular solutions covered in this chapter aren't all that important. They're certainly not things you need to memorize. Quite apart from anything else, they may not be at all relevant to <em>your</em> game. I can't promise to give you solutions that <em>are</em> directlty relevant to the game or games you're planning, since I have no way of knowing what I have in mind. In any case, if you're planning something in any way original and innovative, there's no way this tutorial <em>could</em> possibly show you how to tackle the specific problems you will encounter in your particular project.</p>

<p>So if the point of this chapter wasn't primarily to show you ready-made solutions you could use in your own project, what was it? Well, the main point was to illustrate further aspects of the adv3Lite library which you may find useful, along with some of the techniques for employing them to implement parts of a game. It's the general principles you need to learn, not the specific solutions. That said, you will find it easier to learn and apply the general principles if you become familiar with the basic tools the adv3Lite library supplies. That doesn't necessarily mean learning every last detail and wrinkle of each and every part of the library, but it does mean acquiring a general feel for what's in the library together with a command of the most commonly used parts and a knowledge of where to find more information about the rest.</p>

<p>So, what are the main adv3Lite features we've encountered in this chapter?</p>


<h2>Action Handling</h2>

<p>First and foremost we've gone quite a bit deeper into action handling, that it customizing what particular actions do on particular objects. We've by no means covered the whole of it yet, and we'll return to the topic in Chapter 10, but we have gone further than before. In particular we've seen how you can use a <strong>check()</strong> method to stop an action proceeding, as well as an <strong>action()</strong> method to define what happens if the action does go ahead. All a <span class="code">check()</span> method needs to do in order to prevent an action is to display some text, usually text that explains why the action can't or won't go ahead. To define a check method or an action method you create a block with <span class="code">dobjFor(<em>ActionName</em>)</span> or <span class="code">iobjFor(<em>ActionName</em>)</span> followed by opening and closing braces (usually several lines apart) and then place your check() and action() code between the braces, like so: </p>

<p><div class="code"><pre>
dobjFor(Turn)
{
    check()
    {
       if(hasBeenTurned)
          "You've already turned the valve. ";
    }
    
    action()
    {
        "Straining with all your might you manage to turn the valve all
         the way until the hissing stream of steam and water issuing 
         from the pipe finally stops. ";
         
         hasBeenTurned = true;
    }
}
</pre></div></p>

<p>Although the adv3Lite library does its best to provide standard handling for as many actions as possible, this can only take you so far, as most games involve at least some unusual actions on at least some unusual objects, like the rather complicated computer we implemented in the Security Centre. Confidence in writing action handlers is therefore a skill you will need to acquire sooner or later if you're going to make any real progress in writing Interactive Fiction (in whatever authoring system you use).</p>

<p>In adv3Lite <span class="code">check()</span> and <span class="code">action</span>() are only two of the six sections that can be defined in an action handler, the others being <span class="code">preCond</span>, <span class="code">remap</span>, <span class="code">verify()</span> and <span class="code">report()</span>. You may want to ignore <span class="code">remap()</span>, since it doesn't do anything that arguably couldn't be done better with a Doer, but at some point you will need to come to terms with the others. If you want the full story right away you can find it in the <a href="../manual/actres.htm">Action Results</a> section of the <em>adv3Lite Library Manual</em>, or if you want the absolute complete full story you can read the entire <a href="../manual/action.htm">Part IV: Actions</a> part of the manual. Alternatively you may prefer to wait until you've been exposed to a bit more of the mechanics of action handling in Chapter Ten of this tutorial.</p>

<h2>Nested Objects</h2>

<p>Another new feature we encountered (actually a feature of the TADS 3 language rather than that of the adv3Lite library) is <strong>anonymous nested objects</strong>. This is a form of syntax that allows us to define one object (the nested anonymous object) directly on the property of another object, like so:</p>

<p><div class="code"><pre>
enclosingObject: Thing 'whatsit'
   "This is just a demonstration object. "
   
   bulk = 10
   
   someProperty: Thing 'nested thing'
   {
       desc = "I am nested in &lt;&lt;lexicalParent.theName&gt;&gt;, which
       has a bulk of &lt;&lt;lexicalParent.bulk&gt;&gt;. My own bulk is
       &lt;&lt;bulk&gt;&gt;. "
       
       subProperty = 'foo'
       
       bulk = 4
       
   }
;
</pre></div></p>

<p>In this example, the object defined on the <span class="code">someProperty</span> property of <span class="code">enclosingObject</span> is <em>anonymous</em> because it has no name of its own and <em>nested</em> because it is defined within the definition of another object, here <span class="code">enclosingObject</span>. We can get a <em>reference</em> to this object with the expression <span class="code">enclosingObject.someProperty</span>, but this is not the name of the object. Indeed, we could assign some other value to <span class="code">enclosingObject.someProperty</span> during the course of the game, and then the reference to the anonymous object would be lost.</p>

<p>If we need to refer to the enclosing object or a property of the enclosing object from within the nested object, we should use the pseudo-variable <span class="code">lexicalParent</span> to refer to it. Look carefully at the desc property of the nested object above. What do you think it will display? If you think it should display "I am nestedin the whatsit, which has a bulk of 10. My own bulk is 4." you've got it right. Pay close attention to the difference between referrring to <span class="code">bulk</span> and <span class="code">lexicalParent.bulk</span> in this context. In writing your own code forgetting to use <span class="code">lexicalParent</span> to refer to a property of an enclosing object when that's what you mean to do is a very easy mistake to make.</p>

<p>If you're still at all uncertain about the workings of anonymous nested objects, take a look at the section on "Object Definitions" in Part III of the <em>TADS 3 System Manual</em>. It's worth getting to grips with them because they can be very useful in your own code. They are particularly useful:</p>

<ol>
<li>For defining abstract TravelConnectors (see below) directly on the direction properties of rooms.</li>
<li>For setting up Multiple/Complex Containment by defining SubComponent objects directly on the remapXXX properties of Things.</li>
</ol>

<h2>Multiple Containment</h2>

<p>Strictly speaking an adv3Lite object can only implement one type of containment (In, On, Under or Behind) at a time, but we can get round that limitation by making it appear to the player that a particular object has things in, on, under and behind it (or some subset of those four containment positions). We do so by defining anonymous nested objects of the <strong>SubComponent</strong> class directly on the <strong>remapIn</strong>, <strong>remapOn</strong>, <strong>remapUnder</strong> and <strong>remapBehind</strong> properties of the Thing in question, for example: </p>

<p><div class="code"><pre>
chest: Heavy 'large chest'
   remapIn: SubComponent
   {
      isOpenable = true
      bulkCapacity = 30
   }
   
   remapOn: SubComponent {}
   remapUnder: SubComponent {}
   remapBehind: SubComponent {}
;
</pre></div></p>

<p>Note that if we want the chest to be openable or lockable we need to define these properties on the remapIn object, not directly on the chest itself. We don't need to define the contType of a SubComponent since the library can work this out from the property to which it is attached. We also don't ever need to define the vocab, name or desc properties of a SubComponent, since the player never refers to such objects directly and when the game needs a name for them it automatically uses the name of the enclosing object. Also, of course, we don't need to define all four remapXXX properties on any given object; we simply define the ones we want.</p>

<p>The effect of a definition like the one above is that commands like LOOK IN CHEST, PUT SOMETHING IN CHEST, OPEN CHEST, CLOSE CHEST, LOCK CHEST, UNLOCK CHEST, LOCK CHEST WITH SOMETHING and UNLOCK CHEST WITH SOMETHING are all automatically redirected to the SubComponent defined on the remapIn property. PUT SOMETHING ON CHEST is redirected to the remapOn SubComponent, LOOK UNDER CHEST and PUT SOMETHING UNDER CHEST are redirected to the remapUnder SubComponent, and LOOK BEHIND CHEST and PUT SOMETHING UNDER CHEST are redirected to the remapBehind SubComponent.</p>

<p>To define the starting location of an object as being with a SubComponent (rather than in the master object) we can use the + notation as usual, but we then also have to use the <span class="code">subLocation</span> property to provide a pointer to the remapXXX property for the SubComponent we wish to use. For example, if we wanted the chest to start off with a a book inside it, a plate on top of it, a coin underneath it, and pen behind it we'd define these four objects thus:</p>

<p><div class="code"><pre>
+ book: Thing 'book'
  subLocation = &amp;remapIn
;
  
+ plate: Surface 'plate'
  subLocation = &amp;remapOn
;

+ coin: Thing 'coin'
  subLocation = &amp;remapUnder
;

+ pen: Thing 'pen'
  subLocation = &amp;remapBehind
;  
</pre></div></p>

<p>If we omitted to define these <span class="code">subLocation</span> properties then we'd effectively have made the book, plate, coin and pen parts or components of the desk.</p>

<p>Sometimes we want the associating containing object to be explicitly distinct from the main object, such as a desk with a drawer. In which case we can point the appropriate remapXXX property to the separate container, for example:</p>

<p><div class="code"><pre>
desk: Fixture 'desk'
  "It has a single drawer. "
  
  remapIn = drawer
  remapOn: SubComponent { }
;

+ drawer: OpenableContainer, Fixture 'drawer'
   bulkCapacity = 8
;
</pre></div></p>

<p>With this set-up, LOOK IN DESK, OPEN DESK, CLOSE DESK, PUT SOMETHING IN DESK, LOCK DESK etc, will behave exaclty like LOOK IN DRAWER, OPEN DRAWER, CLOSE DRAWER, PUT SOMETHING IN DRAWER, LOCK DRAWER, etc.</p>

<p>Finally, you need to use multiple containment whenever you have an openable container that also has an external component, such as a lock or handle, otherwise what was meant to be an external component will end up shut up inside the container when it's closed. You must be careful NOT to do this:</p>

<p><div class="code"><pre>
suitcase: OpenableContainer 'suitcase;;case' <FONT COLOR=RED><strong>//DON'T DO THIS!</strong></FONT>
  "It has a combination lock. "
  lockability = indirectLockable
  isLocked = true
;

+ comboLock: Fixture 'combination lock'
 ...
;
</pre></div></p>

<p>Instead, you need to do this:</p>

<p><div class="code"><pre>
suitcase: Thing 'suitcase;;case' 
  "It has a combination lock. "
  
  remapIn: SubComponent
  {
     isOpenable = true
     lockability = indirectLockable
     isLocked = true
  }
;

+ comboLock: Fixture 'combination lock'
 ...
;
</pre></div></p>

<p>You can read more about <a href="../manual/thing.htm#remapxxx">remapXXX properties and Multiple Containment</a> in the <em>adv3Lite Library Manual</em>.</p>


<h2><a name="hiding">Hiding Things</a></h2>

<p>Often the only reason for giving something a remapUnder or remapBehind property is because we want the player character to discover something under or behind the object when s/he looks there. To deal with this common case more simply, and to ensure that the supposedly hidden objects remain hidden under the player explicitly looks for them under or behind something else, instead of creating SubComponents on the remapUnder and remapBehind properties, you can simply list the items you want to start out hidden on the <strong>hiddenUnder</strong> and <strong>hiddenBehind</strong> properties. For example, if what we really wanted was for the coin and the pen to be hidden under and behind the chest until the player explicitly looks under and behind it, we should probably have written:</p>

<p><div class="code"><pre>
chest: Heavy 'large chest'
   remapIn: SubComponent
   {
      isOpenable = true
      bulkCapacity = 30
   }
   
   remapOn: SubComponent {}
   hiddenUnder = [coin]
   hiddenBehind = [pen]
;

+ book: Thing 'book'
  subLocation = &amp;remapIn
;
  
+ plate: Surface 'plate'
  subLocation = &amp;remapOn
;

coin: Thing 'coin'
;

pen: Thing 'pen'
;  
</pre></div></p>

<p>Note that in this case the coin and the pen start out with no location at all (i.e. a location of nil), since they're off stage until the player discovers them. An object that's discovered under or behind another one in this way is automatically taken by the player character if it's discovered under or behind something non-portable (like the chest), or otherwise moved into the location of the object being looked under or behind if the latter is portable (like a rug or blanket, say).</p>

<p>You can also use <strong>hiddenIn</strong> in exactly the same way, for example to hide a magic glove in a pile of clothes, or perhaps to conceal an object in a large container that doesn't reveal all its contents until it has been searched (a small coin in a large vase for example). There is no hiddenOn property, however, since it is hard to imagine how one object on top of another could ever be concealed by it.</p>

<p>You can override <span class="code">canPutInMe</span>, <span class="code">canPutUnderMe</span> and <span class="code">canPutBehindMe</span> to true to allow items to be put in, under or behind objects that lack the appropriate remapXXX SubComponent, in which case the objects put in, under, or behind will be moved off stage and added to the hiddenIn, hiddenUnder or hiddenBehind list. You can control how much is hidden in, under or behind an object by these means by use of the properties <span class="code">maxBulkHiddenIn</span>, <span class="code">maxBulkHiddenUnder</span> and <span class="code">maxBulkHiddenBehind</span>. However, if you find yourself making much use of all these properties you should ask yourself whether you really ought to have implemented the corresponding remapXXX SubComponents instead, since the main purpose of <span class="code">hiddenIn</span>, <span class="code">hiddenUnder</span> and <span class="code">hiddenBehind</span> is to provide a quick and easy means of hiding objects for subsequent discovery, not to provide an alternative mechanism for multiple containment in general, unless you really do need the player character to be able to <em>hide</em> objects in, under or behind other objects.</p>

<p>You can read more about <a href="../manual/thing.htm#hidden">Hiding Things</a> using the hiddenXXX properties in the <em>adv3Lite Libary Manual</em>.</p>

<h2>Bulk</h2>

<p>It generally isn't an objective of Interactive Fiction to provide a totally realistic simulation of the real world, but it is usually desirable to avoid stretching player credulity too far, and players' credulity is likely to be unduly stretched if it proves possible to put large objects inside small ones, or a seemingly infinite number of objects in a finite container. To help game authors avoid such obvious nonsenses, the adv3Lite library provides every object with a <strong>bulk</strong> property and a <strong>bulkCapacity</strong> property. Their use is conceptually very straightforward: one object can not be placed in/on/under/behind another if doing so would exceed the second object's bulkCapacity, i.e. if moving the first object into the second would cause the total bulk contained within the second object to become larger than its bulkCapacity.</p>

<p>There is also <strong>maxSingleBulk</strong> property which by default is the same as the <span class="code">bulkCapacity</span>. This could be set smaller than the bulkCapacity to simulate an object with a restricted opening, such as a bottle with a narrow neck, or any other such limitation that requires individual objects being placed inside another to be smaller than the total bulkCapacity of that other.</p>

<p>The adv3Lite capacity supplies no bulk scale by default. It is up to game authors to decide what gradations of bulk they need. Bear in mind that the smallest bulk an object can have (other than zero, meaning no bulk at all) is 1, so you need to decide whether the largest container in your game is more like ten, a hundred or a thousand times the bulk of the smallest object. Absolute precision is not required, but if you're in any doubt it's probably better to go for a larger scale than to find halfway through your game that you haven't allowed for enough gradations so that you're forced to go back and change all the bulks and bulkCapacities you've defined so far.</p>

<p>Note that the value of an object's <span class="code">bulk</span> property is usually only relevant if the object is portable (and so can be placed in, on, under or behind other objects with a finite bulkCapacity). You don't normally have to worry about the bulk of tables, houses and mountains, and other such large objects that will never be moved around. Indeed, the default bulk of all objects in zero. This is convenient when you come to define Fixture-like objects that are components of other objects, since you don't normally want such components to contribute separately to their master object's bulk or to use up part of its bulkCapacity.</p>

<p>Actors, including the player character, also have a bulkCapacity which limits how much bulk they can carry at any one time. We saw an example of this in <em>The Adventures of Heidi</em> in which the player character was given a bulkCapacity of one so that she could only carry one thing at a time. Normally, though, it is better to give the player character an absurdly generous (i.e. very large) bulkCapacity, since players will be much more forgiving of the resulting lack of realism than they will be of being obliged to perform complex and probably tedious inventory management tasks resulting from a limited carrying capacity. Unless you can make inventory management tasks an interesting ingredient of your game, or they are truly vital to your plot or puzzle structure, they are best avoided.</p>

<p>You may wish to read more about <a href="../manual/thing.htm#bulk">Bulk and BulkCapacity</a> in the <em>adv3Lite Library Manual</em>.</p>

<h2>Topics and TopicEntries</h2>
<p>We encountered Topics and TopicEntries in connection with the computer in the Security Area, which we implemented as a <strong>Consultable</strong>, so that the player character could look things up on it. To implement the topics that could be looked up on the computer we used a number of <strong>ConsultTopic</strong> objects. A ConsultTopic is a particular kind of <strong>TopicEntry</strong>; although Consultable objects may not be all that common in Interactive Fiction, there are other kinds of TopicEntry, notably those that are used to implement conversations with Non-Player Characters (other actors in the story), as we shall see in Chapter 11.</p>

<p>The player character can certainly look up, talk about or think about objects that are defined elsewhere in the game, but s/he may also want to refer to things that aren't implemented in the game world, or more abstract ideas such as love, life, the rate of inflation or population statistics. For this kind of topic &mdash something that may be talked about, thought about, or looked up, but not manipulated as a physical object within the game &mdash; we can define Topic objects, for example:</p>

<p><div class="code"><pre>
tLove: Topic 'love';
tLife: Topic 'life';
tInflationRate: Topic 'rate[n] of inflation';
tPopulationStats: Topic 'population statistics';
</pre></div></p>

<p>Note that starting the object names of these Topics with t is simply a convention; you don't have to adopt it if you don't want to, but it's quite useful to adopt something of the sort to distinguish Topic objects from Things when they appear elsewhere in game code.</p>

<p>Note too that the property we're defining on the Topic template in the above examples is the <span class="code">vocab</span> property, which works in precisely the same way as it does on a Thing. This means, among other things, that the above definitions gives each of the Topic objects a name property as well as the vocabulary words which can be used to refer to it. This may not seem all that useful here, but it does have a potential use when Topics are used in conversation, as we shall see in Chapter Eleven.</p>

<p>Earlier in this chapter we also encountered a <em>literal</em>, which is superficially a little like a Topic, in that a command that expects a literal and a command that expects a Topic will both accept whatever the player types in the appropriate slot (within reason): you can both LOOK UP FOOBAR ON COMPUTER and TYPE FOOBAR ON COMPUTER, and the game will happily accept either command, although in the first case FOOBAR is treated as a literal and in the second it's treated as a Topic. </p>

<p>The difference, which at first may seem quite a subtle one, is that a literal is simply an arbitrary piece of text, which we can access via the pseudo-global variable <strong>gLiteral</strong>, while a Topic is an object. Topics are generally used in contexts where although the player could type anything, we've actually defined responses for a finite set of expected responses, some of which could also be for Things implemented in the game, whereas literals are used in contexts where the player character is envisaged as free to write or type anything (and where we may be looking for one particular string of text, such as a password). So, in WRITE FOO ON SOMETHING, TYPE FOO ON SOMETHING and ENTER FOO ON SOMETHING, FOO is a literal, whereas in LOOK UP FOO ON SOMETHING, THINK ABOUT TOO or TALK ABOUT FOO, FOO is a Topic.</p>

<p>To use a Topic (or Thing) in conjunction with a TopicEntry (such as a Consultable) we assign it to the TopicEntry's <span class="code">matchObj</span> property and the corresponding response to its <span class="code">topicResponse</span> property, which we can do via a conveniently defined template:</p>

<p><div class="code"><pre>
+ ConsultTopic @tLife
   "According to Dodgypedia life is hard to define, but is generally regarded
    as being preferable to the alternative. "
;
</pre></div></p>    

<p>The matchObj property can also be defined as a list of Topics (and/or Things), in which case the TopicEntry will be matched if any of the items in the matchObj list are requested:</p>

<p><div class="code"><pre>
+ ConsultTopic [tLife, tLove]
   "According to the dictionary of hard-nosed economics, such imponderables
    are not worth factoring into one's calculations. "
;
</pre></div></p>

<p>The full story on <a href="../manual/topic.htm">Topics</a> and <a href="../manual/topicentry.htm">TopicEntries</a> can be found in the <em>adv3Lite Library Manual</em>, which you might want to consult at this point, so the same information need not be reproduced in all its detail here.</p>


<h2>Abstract TravelConnectors</h2>

<p>In previous chapters we encountered several examples of concrete <strong>TravelConnector</strong> objects, such as the StairwayUp used to implement the climbable tree in <em>The Adventures of Heidi</em>, but the current chapter was the first to make use of abstract ones. The purpose of an abstract TravelConnector is to add some condition and/or side-effect to travel from one place to another. In particular you can use the <strong>canTravelerPass(traveler)</strong> method to define when the traveler is or is not allowed to pass, the <strong>explainTravelBarrier(traveler)</strong> method to explain why the traveler is not allowed to pass (if he or she isn't), and the <strong>travelDesc</strong>  </p> method to display a message or carry out any other side-effects of traveling. You also need to define the <strong>destination</strong> property to define where the TravelConnector leads to. For the full story, including all the other methods and properties of TravelConnector, see the section on <a href="../manual/travel.htm">Travel Connectors and Barriers</a> in the <em>adv3Lite Library Manual</em>.

<p>There's usually no need to define an abstract TravelConnector as a distinct defined object. The most normal way to define one is as an anonymous nested object on the direction property of a room, e.g.:</p>

<p><div class="code"><pre>
meadow: Room 'Meadow'
  "An extremely muddy path leads off to the south. "
  
  south: TravelConnector
  {
      destination = muddyPath
      
      canTravelerPass(traveler) { return boots.wornBy == traveler; }
      explainTravelBarrier(traveler)
      {
          "There's no way you're going to set off through that thick, squelchy
          mud without a pair of sturdy waterproof boots. ";
      }

      travelDesc = "The mud squelches noisily underfoot, threatening to steal your
        boots, as you set off down the path. "
   }
;   
</pre></div></p>   

<h2>Scenes</h2>

<p>The last main feature introduced in this chapter was the <strong>Scene</strong>. While it's almost certainly the case that Scenes don't allow you to do anything you could manage without them by some other means, they do provide a convenient mechanism for structuring the story and controlling turning points in the plot. A Scene is basically an object that becomes active when its <strong>startsWhen</strong> property becomes true, and remains active until its <strong>endsWhen</strong> property becomes true. When it starts its <strong>whenStarting</strong> method is called, and when it ends its <strong>whenEnding</strong> method is called, thus allowing you to make whatever changes to the state of the game are appropriate to the starting and ending of the Scene. Moreover, while a Scene is active its <strong>isHappening</strong> property will be true, allowing you to make other parts of the game code dependent on a particular Scene being in progress or not. You can also test whether a Scene has ever been started (whether it's ended or not) by seeing whether its <strong>startedAt</strong> property is non-nil.</p>

<p>There are a number of other Scene properties and methods, and for the full story you should read the Section on <a href="../manual/scene.htm">Scenes</a> in the <em>adv3Lite Library Manual</em>. But we shall in any case be making further use of Scenes in the next couple of chapters, so you'll have plenty more opportunity to see how they can be used in practice.</p>

<h2>Travel Notifications</h2>

<p>Just before travel is about to take place, the <strong>beforeTravel(traveler, connector)</strong> method is called on every object in scope, where <em>traveler</em> is the object that's about to travel and <em>connector</em> is the connector via which the traveler is about to travel (often this will simply be the room to which the traveler is trying to go). Conversely, just after traveler has taken place the <strong>afterTravel(traveler, connector)</strong> method is called on every object that's now in scope (which will generally be a different set of objects in the new location). The <strong>beforeTravel(traveler, connector)</strong> method therefore provides another means of preventing travel under certain conditions (as an alternative to using a TravelConnector), and of course a Doer would provide yet another matter. Which you use on any particular occasion is largely a matter of taste and convenience. In the example in the 'Making a Scene' section it was logical and convenient to use a <span class="code">beforeTravel()</span> method on the criminalPassengers object because (a) it's the presence of the these passengers that inhibits the player character from travelling past them to the rear of the plane and (b) this inhibition is automatically put in place when the criminal passengers are moved into the front of the plane.</p>

<p>You can read more about <a href="../manual/react.htm#travel">Reacting to Travel</a> in the <em>adv3Lite Library Manual</em>.</p>

<h2>Conclusion</h2>

<p>This chapter has introduced a number of new tools and features which, while being a bit more advanced than those covered earlier, are well worth getting to know so that you can employ them in your own games, although their particular application in your work is likely to be different from the examples illustrated in this chapter. If you're still feeling a little uncertain about any of them, now might be a good idea for following up the reading suggestions given just above before moving on to the new material to be introduced in the next chapter.</p>

</div>
<hr class="navb"><div class="navb">
<i>adv3Lite Library Tutorial</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="schemes.htm">Schemes and Devices</a> &gt; 
Recapitulation
<br><span class="navnp"><a class="nav" href="scene.htm"><i>Prev:</i> Making a Scene</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="cockpit.htm"><i>Next:</i> Cockpit Controls</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>