<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Goldskull &mdash; Everything in its place</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="goldskull.htm">Goldskull</a> &gt; 
Everything in its place
<br><span class="navnp"><a class="nav" href="weightier.htm"><i>Prev:</i> Weightier Matters</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="retro.htm"><i>Next:</i> Retrospective</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">
<h1>Everything in its place</h1>

<h2>Starting Out Right</h2>

<p>In the original version of the Goldskull game, which we began by reproducing, the rock starts out inside the cave, conveniently waiting to be placed on a pedestal. In a real game you probably wouldn't want to make the solution to the problem quite so obvious. In this two-room game the only other place to put the rock (unless we want to hide it somewhere, which we won't attempt here) is in the starting location. While we're at it we may as well move the pebble there too. We'll also introduce a new property, the <span class="code">initSpecialDesc</span>. This determines the way an item is first described in a room listing, until the item is moved. Try moving the rock and the pebble into startroom and adding an initSpecialDesc to the rock like this:</p>

 <p><div class="code"><pre>
+ smallRock: Thing 'small rock; round solid'
     "It's roughly round and looks pretty solid. "
    
    <strong>initSpecialDesc = "A small rock lies on the ground near the mouth of the
        cave, evidence, perhaps, of long-term erosion. "</strong>
    
    weight = 10
;
</pre></div>

<p>Once you've made these changes, try recompiling and running the game. You should now see the following as the description of the starting location on the first turn:</p>

<p><div class="cmdline"><pre>
<strong>Outside Cave</strong>
You’re standing in the bright sunlight just outside of a large, dark, foreboding cave, which lies to the north.
The path back to your camp winds roughly southeast through the dense foliage. 

A small rock lies on the ground near the mouth of the cave, evidence, perhaps, of long-term erosion. 

You can see a tiny pebble here.
</pre></div>

<p>This is arguably both better and worse than just displaying "You see a small rock and a tiny pebble here." It's better insofar as the longer sentence about the small rock is more atmospheric, but worse in that it then makes the sentence about the tiny pebble look just a little incongruous. What would we be even better would be if we could combine the mention of both objects into a single sentence. Here's one way we can do it:</p>

 <p><div class="code"><pre>
+ smallRock: Thing 'small rock; round solid'
     "It's roughly round and looks pretty solid. "
    
    initSpecialDesc = "A small rock &lt;&lt;if pebble.moved&gt;&gt;lies &lt;&lt;else&gt;&gt; and
        &lt;&lt;mention a pebble&gt;&gt; lie &lt;&lt;end&gt;&gt; on the ground near the mouth of the
        cave, evidence, perhaps, of long-term erosion. "
    
    weight = 10
;
</pre></div>

<p>Let's look at how this works. The smallRock will use its initSpecialDesc until it has been moved. When a Thing is moved (via a call to <span class="code">actionMoveInto()</span>, which is generally used in the handling of any player command that causes an object to be moved) its <span class="code">moved</span> property is set to true. We can thus use <span class="code">pebble.moved</span> to test whether the pebble has been moved or whether it's still resting by the mouth of the cave next to the rock. If the pebble has been moved, then <span class="code">smallRock.initSpecialDesc</span> just describes the rock as lying there, but if the pebble hasn't been moved yet it mentions the pebble as well.</p>

<p>The subtle touch is using the embedded expression <span class="code">&lt;&lt;mention a pebble&gt;&gt;</span> to display the text 'a pebble' in the course of this description. What this does is not only to tell the game to provide the name of the pebble with the indefinite article ('a pebble') but also to note that the pebble has already been mentioned in the room description so it doesn't need to be mentioned again, thus suppressing the additional line "You see a small pebble here." Once either the pebble or the rock is moved, this changes, as the following transcript illustrates:</p>


<p><div class="cmdline"><pre>
<strong>Outside Cave</strong>
You’re standing in the bright sunlight just outside of a large, dark, foreboding cave, which lies to the north. 
The path back to your camp winds roughly southeast through the dense foliage. 

A small rock and a tiny pebble lie on the ground near the mouth of the cave, evidence, perhaps, of long-term erosion. 

<strong>&gt;take pebble</strong>
Taken. 

<strong>&gt;l</strong>
<strong>Outside Cave</strong>
You’re standing in the bright sunlight just outside of a large, dark, foreboding cave, which lies to the north. 
The path back to your camp winds roughly southeast through the dense foliage. 

A small rock lies on the ground near the mouth of the cave, evidence, perhaps, of long-term erosion. 

<strong>&gt;take rock</strong>
Taken. 

<strong>&gt;l</strong>
<strong>Outside Cave</strong>
You’re standing in the bright sunlight just outside of a large, dark, foreboding cave, which lies to the north. 
The path back to your camp winds roughly southeast through the dense foliage. 

<strong>&gt;drop all</strong>
(first taking off the knapsack)
You drop the tiny pebble, the small rock and the knapsack. 

<strong>&gt;l</strong>
<strong>Outside Cave</strong>
You’re standing in the bright sunlight just outside of a large, dark, foreboding cave, which lies to the north. 
The path back to your camp winds roughly southeast through the dense foliage. 

You can see a small rock, a knapsack, and a tiny pebble here.
</pre></div>

<p>You may find this combination of techniques useful for getting your room descriptions starting out just the way you want.</p>

<p><span class="code">initSpecialDesc</span> has a close relative called <span class="code">specialDesc</span>, the difference being that specialDesc displays all the time (whether the object it has been defined on has been moved or not &mdash; actually that's not strictly true since you can control when both <span class="code">specialDesc</span> and <span class="code">initSpecialDesc</span> are used, but that's a complication we'll leave aside for now). Both initSpecialDesc and specialDesc are used regardless of the value of <span class="code">isFixed</span> or <span class="code">isListed</span> on the item in question, so a common use of <span class="code">specialDesc</span> is to provide a separate description of a fixed object not otherwise mentioned in the main room description (particularly when we want to call attention to the object rather than letting it merge into the overall description of the room).</p>

<p>Consider the description of the cave room. As it now appears (with the rock and pebble moved outside), the player will see:</p>

<p><div class="cmdline"><pre>
<strong>Cave</strong>
You’re inside a dark and musty cave. Sunlight pours in from a passage to the south. 

On the stone pedestal you see a gold skull.
</pre></div>

<p>This is actually a little odd, since the stone pedestal is only mentioned as the supporter of the gold skull, yet it's referred to as 'the stone pedestal' as if the player already knows about it. Morever, if nothing were resting on the stone skull, the pedestal wouldn't be mentioned at all (admittedly that situation can't come about in this game without killing the player, but it still doesn't seem quite right in principle). Of course we could simply add a mention of the object to the main room description, but this seems quite a good opportunity to illustrate the use of <span class="code">specialDesc</span>:
</p>

 <p><div class="code"><pre>
+ pedestal: Fixture, Surface 'stone pedestal; smooth <strong>solitary</strong>'
    "The smooth stone pedestal is artfully positioned to catch the sunlight at
    just this time of day. "
        
    <strong>specialDesc = "A solitary stone pedestal stands at the centre of the cave. "</strong>
    
    notifyRemove(obj)
    {
        gMessageParams(obj);
        
        if(getWeightWithin() - obj.weight &lt; goldSkull.weight)
        {
            "As {the subj obj} {leaves} the pedestal, a volley of poisonous
            arrows is shot from the walls! You try to dodge the arrows, but
            they take you by surprise!";  
            
            finishGameMsg(ftDeath, [finishOptionUndo]);  
        }
    }
;
</pre></div>

<p>The room description then becomes:</p>

<p><div class="cmdline"><pre>
<strong>Cave</strong>
You’re inside a dark and musty cave. Sunlight pours in from a passage to the south. 

A solitary stone pedestal stands at the centre of the cave. 

On the stone pedestal you see a gold skull.
</pre></div>

<p>This is probably an improvement. At least the text makes sense, and at least the stone pedestal will get a mention even if there's nothing on it, but it would be neater if the paragraph about the skull could be combined with the paragraph about the pedestal. We could try to do with some combination of <span class="code">&lt;&lt;if goldSkull.location==pedestal&gt;&gt;</span> and <span class="code">&lt;&lt;mention a goldSkull&gt;&gt;</span>, but since in principle all sorts of objects could end up on top of the pedestal, this approach would pretty soon become quite unwieldy. What we need is some means of listing all the objects currently on the pedestal, whatever they happen to be. The following should do the trick:</p>

 <p><div class="code"><pre>
+ pedestal: Fixture, Surface 'stone pedestal; smooth solitary'
    "The smooth stone pedestal is artfully positioned to catch the sunlight at
    just this time of day. "
        
    <strong>specialDesc = "A solitary stone pedestal stands at the centre of the
        cave&lt;&lt;if listableContents.length &gt; 0 &gt;&gt;, with &lt;&lt;list of
          listableContents&gt;&gt; resting on top of it&lt;&lt;end&gt;&gt;. &quot;</strong>
    
    notifyRemove(obj)
    {
        gMessageParams(obj);
        
        if(getWeightWithin() - obj.weight &lt; goldSkull.weight)
        {
            "As {the subj obj} {leaves} the pedestal, a volley of poisonous
            arrows is shot from the walls! You try to dodge the arrows, but
            they take you by surprise!";  
            
            finishGameMsg(ftDeath, [finishOptionUndo]);  
        }
    }
;
</pre></div>

<p>We use <span class="code">listableContents</span> rather than just <span class="code">contents</span> to exclude any fixtures or components that are attached to the pedestal rather than just resting on top of it (see next subsection). If there are any items in the <span class="code">listableContents</span> list (which we can test by seeing whether its length is greater than 0) then we append a list of what they are, in a suitably-worded clause. The embedded expression <span class="code">&lt;&lt;list of listableContents&gt;&gt;</span> both produces a properly formatted list of whatever's in <span class="code">listableContents</span>, it also marks everything in the list as having been mentioned so it won't appear in the room contents listing again. With this definition the room description becomes:</p>

<p><div class="cmdline"><pre>
<strong>Cave</strong>
You’re inside a dark and musty cave. Sunlight pours in from a passage to the south. 

A solitary stone pedestal stands at the centre of the cave, with a gold skull resting on top of it. 
</pre></div>

<p>There are several other ways we can tweak how items are displayed in a room description listing. For the full story see the section on <a href="../manual/roomdesc.htm">Room Descriptions</a> in the <em>adv3Lite Manual</em>.</p>

<h2>Giving Due Warning</h2>

<p>As the game stands, it gives very little warning to the player that taking the gold skull might spring a trap. To be sure both the setting and the nature of the skull might suggest that a hidden danger is lurking somewhere, and the wary player might well suspect that just walking in and taking the skull seems a bit too easy; moreover, if the player character gets himself killed the player can always UNDO and try something else, but most modern players of Interactive Fiction tend to regard such "learning by dying" as rather bad form, and if you want your game to be respected, it's better to put some kind of clue or warning of impending danger that goes beyond relying on your players' intuition.</p>

<p>There are all sorts of ways we could do that here. If this were part of a larger game, the player could have been warned of the trap in a previous episode. Or we could furnish the gave with the grisly remains of the last adventurer who tried to steal the gold skull. Or we could call attention to rows of suspicious-looking holes in the walls of the cave. But what we'll actually do here is provide the pedestal with a warning inscription:</p>


 <p><div class="code"><pre>
+ pedestal: Fixture, Surface 'stone pedestal; smooth solitary'
    "The smooth stone pedestal is artfully positioned to catch the sunlight at
    just this time of day<strong>, picking out the inscription carved into its front.</strong> "
        
    ... 
;

<strong>++ Fixture 'inscription; faded ancient sumerian; lettering script cuneiform'
    "The lettering is quite faded, and the script is in ancient Sumerian
    Cuneiform, but fortunately that's a language you took the trouble to learn,
    and you can just about make it out. "
    
    readDesc = "The inscription reads &lt;q&gt;Whoever dares remove this sacred object
        from its place shall become as that which he desires.&lt;/q&gt; "
    
    weight = 0
    
    cannotTakeMsg = 'You can hardly take the inscription; it\'s part of the
        pedestal. '</strong>
    
; </pre></div> 

<p>For the sake of brevity we've omitted repeating the rest of the definition of the pedestal. Note that we don't need to give the inscription object a programmatic name, since no code ever needs to refer to it; it's only one step up from a decoration. We do define a custom <span class="code">cannotTakeMsg</span>, however, since it seems better to say that the inscription is part of the pedestal than to say merely that it's fixed in place (customizing message properties like this is a good way to give your game some character and to show that you've taken trouble with it; if all players see is lots of default messages they probably won't think much of your efforts). We define <span class="code">weight = 0</span> because we don't want the inscription to contribute to the weight of objects resting on the pedestal, as it otherwise would. Note that since we took the trouble to use <span class="code">listableContents</span> rather than <span class="code">contents</span> above to list what's on the pedestal, we've averted the danger of the inscription showing up as one of the things resting on the pedestal (as it otherwise would). It might have been easier to make the inscription a completely separate object, not contained in the pedestal at all, and since neither the pedestal nor its inscription are ever going to move in this game, that would have worked just fine. In other situations though, it's possible that something like the pedestal might be moved, so it's best to maintain the containment relationship if possible, to make sure its components (such as the inscription) will always move with it. It also serves to make the relationship between the inscription and the pedestal that much clearer in your code. Note, however, that if we wanted to attach a component to a Container we might need to take a different approach, because if the Container were ever to become closed (or started out closed), the component would be hidden away out of sight inside the Container. We'll return to this issue in a later chapter.</p>

 <p>&lt;q&gt; and &lt;/q&gt; just give a pair of matching typographical quotes (&ldquo; and &rdquo;). Of more note is the <span class="code">readDesc</span> property, which we haven't met before. If defined on an object, this gives a response to the command READ WHATEVER (in this case READ INSCRIPTION), which in general is different from the response to EXAMINE WHATEVER. If you did want the two to be the same you could just define <span class="code">readDesc = (desc)</span>. </p>


<h2>Pointing the Way</h2>

<p>We'll just perform one more task before finally leaving the Goldskull game. You may remember above we said that the way we'd set up the PathPassage notionally leading back to the camp was something of a horrible hack. Now we'll see how it should be done:</p>

 <p><div class="code"><pre>
startroom: Room 'Outside Cave'
    desc = "You're standing in the bright sunlight just outside of a large,
        dark, foreboding cave, which lies to the north. The path back to your
        camp winds roughly southeast through the dense foliage. " 
    
    north = cave 
    in asExit(north)
   
    <strong>southeast = pathBack</strong>
    
;

+ pathBack: PathPassage 'overgrown path'
    "The heavily overgrown path runs roughly southeast through the trees. "
    
<strong>    canTravelerPass(traveler)
    {
        return goldSkull.isIn(traveler);
    }
    
    explainTravelBarrier(traveler)
    {
        "You've no intention of leaving till you've got what you came for. ";
    }
    
    travelDesc()
    {
        "Your mission complete, you head triumphantly back to your camp. ";
        finishGameMsg(ftVictory, [finishOptionUndo]);
    }</strong>    
;

</pre></div>

<p>If you think there's something vaguely familiar about this, then you're right. For one thing, much of the code on the <span class="code">pathBack</span> object was previously what was defined on the southeast() method of <span class="code">startroom</span>. For another, pointing a direction property to an object and then defining the <span class="code">travelDesc</span> property/method on that object is something we've done before, when we made the tree object in the Heidi game a StairwayUp. PathPassage and StairwayUp both inherit from the TravelConnector class (along with the Thing class), and that's why we're seeing a similarity. You can read all about TravelConnectors in the section on <a href="../manual/travel.htm">Travel Connectors and Barriers</a> in the adv3Lite manual, if you like, but you can glean most of what you need to know about them from these two examples (the tree and the path). The <span class="code">canTravelerPass(traveler)</span> method determines whether <em>traveler</em> is allowed to pass through this TravelConnector; in this we allow it if the traveler (which in this game can only be the player character) is directly or indirectly carrying the gols skull (he'd be carrying it indirectly if he put the skull in the knapsack and then carried the knapsack, but using <span class="code">isIn(traveler)</span> allows for this possibility too). If we disallow travel, the <span class="code">explainTravelBarrier(travel)</span> method is used to explain why. Finally, the <span class="code">travelDesc()</span> method can be used to define the side-effects of travel, in this case displaying a message and then ending the game in victory.</p>

<p>Can you notice anything that seems to be missing from this new version of the <span class="code">pathBack</span> object? You may remember that on the tree object in the Heidi game we defined <span class="code">destination = topOfTree</span> to control where the player character went when the tree was climbed. Ordinarily we'd do the same here, but since the game is ended before the player character can actually end up anywhere else, there's no point, so we can leave the destination of pathBack as nil. If we actually wanted to continue the game instead of ending it when the player retrieves the gold skull we'd have defined something like <span class="code">destination = camp</span> on the pathBack object.</p>

<p>It so happens that whereas the earlier scheme of defining a method on <span class="code">startroom.southeast</span> resembles the TADS 2 way of doing things, this second scheme of pointing the southeast property to a PathPassage object and then defining various methods of the PathPassage closely resembles the adv3 way. The first way is often more convenient, ánd that's why adv3Lite allows it, but the second way is more robust when you need something like a PathPassage or a StairwayUp to represent a physical connection between locations. The more abstract TravelConnector class, when not used to represent a physical object, can also be useful in controlling conditional travel (through its <span class="code">canTravelerPass()</span> and <span class="code">explainTravelBarrier()</span> methods) or carrying out the side-effects of travel (through its <span class="code">traveLDesc</span> method). We shall meet more examples of this in due course.</p>

</div>
<hr class="navb"><div class="navb">
<i>adv3Lite Library Tutorial</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="goldskull.htm">Goldskull</a> &gt; 
Everything in its place
<br><span class="navnp"><a class="nav" href="weightier.htm"><i>Prev:</i> Weightier Matters</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="retro.htm"><i>Next:</i> Retrospective</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>