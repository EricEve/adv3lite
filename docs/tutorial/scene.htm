<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Schemes and Devices &mdash; Making a Scene</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="schemes.htm">Schemes and Devices</a> &gt; 
Making a Scene
<br><span class="navnp"><a class="nav" href="security.htm"><i>Prev:</i> The Security Area</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="recap.htm"><i>Next:</i> Recapitulation</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">
<h1>Making a Scene</h1>

<p>We have now implemented most of the physical mechanics of the game, apart from the cockpit controls, which we'll leave until Chapter 10, but very little is happening to drive the story forward; so far it largely depends on the player's inquisitiveness, and though there are now several puzzles to be solved, nothing much is advancing the plot or providing the player with a great deal of motivation.</p>

<p>One way to structure the plot progression of a piece of IF in adv3Lite is through the use of Scenes. A <strong>Scene</strong> is simply an object that starts and stops under author-controlled conditions, and which cause particular things to occur when it starts or stops or while it is happening. For the full details of Scenes you can read the section on <a href="../manual/scene.htm">Scenes</a> in the adv3Lite Library Manual, but the basics are fairly simple. A Scene begins when its <strong>startsWhen</strong> property evaluates to true, and ends when its <strong>endsWhen</strong> property becomes true. When the Scene starts its <strong>whenStarting</strong> method is invoked, and when it ends its <strong>whenEnding</strong> method is invoked. While a Scene is current its <strong>eachTurn</strong> method is invoked every turn, and its <strong>isRecurrent</strong> property determines whether it can take place more than once.<p>

<p>You can test whether a Scene is currently in progress by querying its <strong>isHappening</strong> property, or whether a Scene has occurred in the past (and is now over) from its <strong>hasHappened</strong> property. The <strong>startedAt</strong> and <strong>endedAt</strong> properties give the turn number on which the Scene started and ended, while for a recurrent Scene, the <strong>timesHappened</strong> property indicates how many times the Scene has happened. You can also use the <strong>during</strong> property of a Doer to specify that it only takes effect during the Scene or Scenes in question.</p>

<p>To create a Scene we simply define an object of the Scene class, e.g.;</p>

<p><div class="code"><pre>
myScene: Scene
   startsWhen = (me.isIn(throneRoom))
   whenStarting()
   {
      king.moveInto(throneRoom);
      "The door opens and a man stomps into the room behind you.
      You suddenly find yourself in the presence of the king!";
   }
   ...
;
</pre></div></p>

<p>You may recall that earlier on we said that at some point the drug cartels would take over the aeroplane standing at Gate 3 for their own use. This could be a dramatic turning-point in our little airport game, that motivates the events that follow. A good point to make the takeover scene start might be when the player character visits the toilet aboard the plane, which he's very likely to do in the course of exploration. Up until that point he will have been motivated to board the plane in the hope of flying out of the country, but won't have any particular motivation to leave the plane again to search for the pilot's uniform. Having the passengers thrown off to make way for El Diablo's men might provide the necessary motivation.</p>

<p>As a start, we might then define a Scene that's triggered by the player reaching the plane's toilet, and starts with an announcement over the plane's intercom:</p>

<p><div class="code"><pre>
takeover: Scene
    startsWhen = (bathroom.visited)
    
    whenStarting()
    {
        "An annoucement comes over the intercom: &lt;q&gt;Due to scheduling problems,
        passengers are kindly requested to disembark from the aircraft and
        return to the airport lounge. Please remember to take all your personal
        belongings with you.&lt;/q&gt;\b
        The announcement is immediately greeted by a chorus of groans from the
        cabin. ";
    }
;
</pre></div></p>

<p>A good place to put this might be right at the end of the plane.t file.</p>

<p>That's a good start, but obviously rather more than this needs to happen when the drug cartels take over the plane for their own use. For one thing, it's obviously not much use if the player character leaves the toilet again to find that absolutely nothing in the cabin has changed. One thing that will definitely have changed is that the passengers will no longer be in their seats but in the aisle, trying to collect their belongings and make their way forward. We therefore want to change the description of the passengers and add a specialDesc. One way to tackle that is to change the description of the passenger object so it's conditional on whether the takeover scene is happening or not, and add a specialDesc that's only used when the takeover scene is happening:</p>

<p><div class="code"><pre>
airlinePassengers: MultiLoc, Decoration 'passengers;;men women; them'
    <strong>"&lt;&lt;if takeover.isHappening&gt;&gt;They seem confused and annoyed in equal
    measure&lt;&lt;else&gt;&gt;You sense an air of impatience about them, as if they're all
    wondering when the aircraft is finally going to leave&lt;&lt;end&gt;&gt;. "</strong>
    
    notImportantMsg = 'Better leave them alone; you don\'t want to draw
        attention to yourself. ' 
    
    locationList = [planeFront, planeRear]
    
    <strong>specialDesc = "The aisle is full of passengers trying to leave their seats,
        retrieve their luggage, and make their way to the front of the plane. "
    
    useSpecialDesc = (takeover.isHappening)</strong>  
    
;
</pre></div></p>

<p>The notImportantMsg of the seats Decoration object referred to them all being occupied. This too needs to change to reflect that the passengers are now milling about in the aisle:</p>

<p><div class="code"><pre>
MultiLoc, Decoration 'seats; red; seating seat airline; them'
    "Like all airline seats, these ones look like they were designed for the
    average-sized person of a century and a half ago. "
    
    <strong>notImportantMsg = '&lt;&lt;if takeover.isHappening&gt;&gt;You can\'t get at seats for
        the press of passengers in the aisle&lt;&lt;else&gt;&gt;All the seats round here
        seem to be taken, so you\'d best leave them alone&lt;&lt;end&gt;&gt;. '</strong>
    
    locationList = [planeFront, planeRear]
;
</pre></div></p>

<p>The commotion has been caused because El Diablo has instructed his ruthless lieutenant Pablo Cortez to order the passengers off the plane so that his party can take it instead. This puts the player character is some peril, since Cortez might recognize him, and is now standing by the exit of the plane with some other hoodlums, trying to get the passengers to leave as quickly as possible. The player character's best chance of getting off the plane unnoticed is to try to pass as a cleaner, which he'll only risk if he's carrying <em>all</em> the items left in the toilet. This incidentally should mean that he can't put the game into an unwinnable state by leaving the maintenance room key behind when he leaves the plane, because once he gets off we're not going to let him back on until he's wearing the pilot's uniform.</p>

<p>We can achieve this by putting a <strong>TravelConnector</strong> on the exit leading foreward from the rear of the plane, and setting up its <span class="code">canTravelerPass()</span> and <span class="code">explainTravelBarrier()</span> to prevent travel during the takeover scene unless all four items from the toilet are being carried. In this case, though, we don't need to create a separate TravelConnector object, since in this case we're not implementing it as a physical object but as an abstract means of enforcing various conditions. We can therefore define it on the <span class="code">fore</span> property of the planeRear room:</p>

<p><div class="code"><pre>
planeRear: Room 'Rear of Plane' 'rear[n] of the plane;;airplane aeroplane'
    "The main aisle continue forward to the front of the plane and aft to the
    bathroom between rows of red coloured seats. "
    
    <strong>fore: TravelConnector
    {
        destination = planeFront
        canTravelerPass(traveler)
        {
            return !takeover.isHappening || cleanerItemCount(traveler) > 3;
        }
        
        explainTravelBarrier(traveler)
        {       
            "You take a step forward towards the front of the plane, but ";
            
            switch(cleanerItemCount(traveler))
            {                
            case 0:
            case 1:
                "as you do so, you catch sight of Pablo Cortez, one of El
                Diablo's most ruthless henchmen, standing near the exit, so you
                take a hasty step back into the throng of passengers before he
                can recognize you, wondering how you might disguise yourself. ";   
                break;
            case 2:
                "you spot Pablo Cortez, El Diablo's evil lieutenant, standing
                by the exit looking increasingly impatient at the passengers'
                disorganized departure. You step back hastily, not at all
                sure that he'll mistake you for a cleaner. ";
                break;
            case 3:
                "at that moment Pablo Cortez, El Diablo's particularly nasty
                right-hand man, glances aft from the front of the plane, as if
                he's trying to place you. Maybe you aren't carrying quite enough
                to be mistaken as a cleaner, so you take a hasty step back. ";
                break;
                
            }
        }
        
        travelDesc = "Clutching the bucket and the garbage bag in such a way to
            hide as much as yourself as possible, you push your way through the
            passengers milling in the aisle, hoping to avoid Pablo Cortez's
            eye. If he catches you, you'll be dead before you can say &lt;q&gt;funeral
            expenses&lt;/q&gt;! " 
        
        cleanerItemCount(traveler)
        {
            return traveler.allContents.countWhich(
                { o: o is in (bucket, sponge, garbageBag, brassKey) } );
                
        }
    }</strong>
    
    north asExit(fore)
    aft = bathroomDoor
    south asExit(aft)
    
    regions = [planeRegion]    
;
</pre></div></p>

<p>We've introduced a new TADS 3 language construct here, namely the <strong>switch</strong> statement. This compares the value of the expression in parentheses immediately following the keyword <span class="code">switch</span> with the constant values after each <span class="code">case</span> statement until it finds one that matches, and then executes the code it finds from there either until the end of the switch statement block (the closing brace matching the open brace immediately following <span class="code">switch(<em>expr</em>)</span>, or until it encounters a <strong>break</strong> statement. For that reason we normally need to place a <span class="code">break</span> statement at the end of each <span class="code">case</span> block to prevent fall-through to the next case block (unless we want to allow fall-through, as in the example above where we want <span class="code">case 0</span> and <span class="code">case 1</span> to do the same thing). If no matching <span class="code">case</span> is found the code following <strong>default</strong> is executed if <span class="code">default</span> is present. In the above example it is not, because we don't need it; this code can only be executed if the player character is holding 0, 1, 2 or 3 items from the toilet, so we have every possible case covered.</p>

<p>In the <span class="code">explainTravelBarrier()</span> method above the <span class="code">switch</span> statement simply varies the message according to the number of items from the toilet being carried, at the same time trying to give the player a gentle hint what needs to be done to sneak past Pablo Cortez unobserved. <span class="code">cleanerItemCount(traveler)</span> is a service method we define to return the number of items from the toilet the player character is currently carrying; it simply looks through all the player character's contents (direct or indirect) and counts the number of them that are one of the four items. The expression <span class="code">o is in (bucket, sponge, garbageBag, brassKey)</span> is true if o is either the bucket, the sponge, the garbageBag or the brassKey (note this use of <span class="code">is in ( )</span>; it can be a very useful tool).</p>

<p>The <span class="code">canTravelerPass()</span> method returns true (and so allows the player to proceed) either if the takeover scene is not happening (in which case no further checks are needed) or if the player is carrying more than three items from the toilet. Finally, the <span class="code">travelDesc</span> property displays a message describing what happens when the player does go foreward to the front of the plane. Strictly speaking we should check whether the takeover scene is happening before we display this message, but in practice we don't actually need to here since the player character will only ever travel through this TravelConnector during this scene.</p>

<p>To make sure the player can't get the game into an unwinnable state by dropping the key in the front of the cabin before leaving the plane we'll use a Doer to prevent this from happening:</p>

<p><div class="code"><pre>
Doer 'drop Thing'
    execAction(c)
    {
        "You'd better not start dropping things here; it might make Cortez
        notice you. ";
        exit;
    }
    
    where = planeFront
    during = takeover
;
</pre></div></p>

<p>Notice the use of the <span class="code">where</span> and <span class="code">during</span> properties to restrict when this Doer is applicable: it only takes effect at the front of the plane when the takeover scene is happening.</p>

<p>Next, we want to stop the player character going back aboard the plane until he's wearing the pilot's uniform. We can do that by defining another TravelConnector, this time on the east property of the jetway. While we're at it we should also change the description of the jetway to reflect the change in situation:</p>

<p><div class="code"><pre>
jetway: Room 'Jetway' 'jetway;short enclosed; walkway'
    "This is little more than a short enclosed walkway leading west-east from
    the gate to the plane.<strong> &lt;&lt;if takeover.isHappening&gt;&gt; Right now it's thronging
    with a stream of disgruntled passengers who have just been forced to
    disembark from their flight. &lt;&lt;else unless takeover.hasHappened&gt;&gt;You seem to
    be the only person here, as if everyone else has already boarded.&lt;&lt;end&gt;&gt;</strong> "
    
    west = gate3
    <strong>east: TravelConnector
    {
        destination = planeFront
        
        canTravelerPass(traveler) { return !takeover.isHappening; }
        explainTravelBarrier(traveler)
        {
            "You dare not go back aboard the plane until you've found a rather
            more effective disguise than a handful of cleaning items. ";
        }
    }</strong>
    
;
</pre></div></p>

<p>This description mentions a throng of disgruntled passengers, which we should implement and move into the jetway when the scene starts. We should also remove the dark-suited men from the snack bar, since they're now notionally about to board the plane. The start of the scene might also be a good time to cut off the announcements calling for passengers to board at Gate 3, since this clearly isn't relevant any more:</p>

<p><div class="code"><pre>
takeover: Scene
    startsWhen = (bathroom.visited)
    
    whenStarting()
    {
        "An annoucement comes over the intercom: <q>Due to scheduling problems,
        passengers are kindly requested to disembark from the aircraft and
        return to the airport lounge. Please remember to take all your personal
        belongings with you.</q>\b
        The announcement is immediately greeted by a chorus of groans from the
        cabin. ";   
        
        <strong>announcementObj.stop();
        disembarkingPassengers.moveInto(jetway);
        darkSuits.moveInto(nil);</strong>        
      
    }
;

<strong>disembarkingPassengers: Decoration 
    'disgruntled passengers; disembarking grumbling of[prep]; men women people 
    stream throng; them'
    
    "Some of the passengers forced to disembark from the plane are standing
    around grumbling, and some are making their way back into the terminal,
    while others continue to emerge from the plane. "
    
    notImportantMsg = 'You don\'t have time for these people right now. '</strong> 
;
</pre></div></p>

<p>This might be a good point at which to ensure the player character doesn't start the announcements up again the next time he passes through the metal detector. We can check whether the takeover Scene has ever started by checking whether or not its startAt property is nil:</p>

<p><div class="code"><pre>
+ metalDetector: Passage 'metal detector; crude; frame'
    "The metal detector is little more than a crude metal frame, just large
    enough to step through, with a power cable trailing across the floor. "
    destination = concourse
    
    ...
    
    travelDesc()
    {
        "You pass through the metal detector without incident. ";
        
        <strong>if(takeover.startedAt == nil)</strong>
            announcementObj.start();
    }
;
</pre></div></p>

<p>We've defined what happens when the takeover scene starts; we also need to define it's ending. We'll end it when the player character puts on the pilot's uniform, since this is what will allow the player character to board the plane once more. One thing we'll want to do at that point is to remove the disgruntled passengers from the jetway, since they should all have left by then; we should also remove the original set of passengers from the plane and replace them with a new set:</p>

<p><div class="code"><pre>
takeover: Scene
    startsWhen = (bathroom.visited)
    
    whenStarting()
    {
        "An annoucement comes over the intercom: &lt;q&gt;Due to scheduling problems,
        passengers are kindly requested to disembark from the aircraft and
        return to the airport lounge. Please remember to take all your personal
        belongings with you.&lt;/q&gt;\b
        The announcement is immediately greeted by a chorus of groans from the
        cabin. ";   
        
        announcementObj.stop();
        disembarkingPassengers.moveInto(jetway);
        darkSuits.moveInto(nil);
    }
    
    <strong>endsWhen = (uniform.wornBy == me)
    
    whenEnding()
    {
        disembarkingPassengers.moveInto(nil);
        airlinePassengers.moveInto(nil);
        criminalPassengers.moveInto(planeFront);
    }</strong>
;

criminalPassengers: Decoration 'passengers; smart dark of[prep]; men gangsters
    suits lieutenants bunch people; them'
    "They may all be dressed in smart dark suits but you're well aware they're
    little more than a bunch of gangsters, the senior lieutenants of men like El
    Diablo who'd slit their own grandmothers' throats for a couple of pesos. "
    
    notImportantMsg = 'You really don\'t want to do anything that might make any
        of those people take any notice of you. '
        
    beforeTravel(traveler, connector)
    {
        if(traveler == me && connector == planeRear)
        {
            "You really don't want to call attention to yourself by walking past
            those passengers to the rear of the plane, since even the most
            simple-minded gansgter will think it odd it the pilot goes anywhere
            but the cockpit. ";
            
            exit;
        }
    }
;
</pre></div></p>

<p>Although the <span class="code">airlinePassengers</span> object is a MultiLoc, we can quite happily move it off stage with <span class="code">moveInto(nil)</span>. There's no need to make the <span class="code">criminalPassengers</span> object a MultiLoc since we shan't be letting the player character return to the rear of the plane. This is ensured by the <span class="code">beforeTravel()</span> method defined on the <span class="code">criminalPassengers</span> object. The <span class="code">beforeTravel()</span> method is called on all objects in scope just before travel is about to be carried out, and can be use to allow any object to react to the travel or, as here, veto it (via the use of <span class="code">exit</span>). There's also an <span class="code">afterTravel(travelerConnector)</span> method that's called on every object in scope just after travel has been completed.</p>

<p>One last thing: the player could defeat our scheme by donning the uniform and then taking it off again before boarding the plane. To prevent this we'll insert a check() stage into the <span class="code">dobjFor(Doff)</span> handling of the uniform (Doff is the action corresponding to taking clothes off) to prevent the player character from taking off the uniform once he's put it on:</p>

<p><div class="code"><pre>
++ uniform: Wearable 'pilot\'s uniform; timo large'  
    "It's a uniform for a Timo Airlines pilot. It's a little large for you, but
   <strong> &lt;&lt;if wornBy == me&gt;&gt; it's not too bad a f&lt;&lt;else&gt;&gt;you could probably wear
    &lt;&lt;end&gt;&gt;it.</strong> "
    
    bulk = 6
    subLocation = &amp;remapIn
    
    <strong>dobjFor(Doff)
    {
        check()
        {
            "After going to all that trouble to get this uniform you're in no
            hurry to take it off. ";
        }
    }</strong>
;
</pre></div></p>

<p>Note that we've also tweaked the description of the uniform so that it changes when the player character is wearing it. We've rather sneakily defined it so that the 'it' at the end can also do duty as the last two letters of 'fit', but maybe in the interests of readability that's not the kind of trick we should use too often.</p>

<p>There's a little more work for our takeover scene to do: in particular, some of our non-player characters will need to move around when it starts and ends, but we shan't start defining them until the next chapter. In the meantime, this introduction to the use of scenes should hopefully have shown how useful they can be in controlling conditions at turning points in your story.</p>

</div>
<hr class="navb"><div class="navb">
<i>adv3Lite Library Tutorial</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="schemes.htm">Schemes and Devices</a> &gt; 
Making a Scene
<br><span class="navnp"><a class="nav" href="security.htm"><i>Prev:</i> The Security Area</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="recap.htm"><i>Next:</i> Recapitulation</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>