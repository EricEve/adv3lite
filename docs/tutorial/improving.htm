<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Goldskull &mdash; Improving the Game</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="goldskull.htm">Goldskull</a> &gt; 
Improving the Game
<br><span class="navnp"><a class="nav" href="making.htm"><i>Prev:</i> Making things happen</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="weightier.htm"><i>Next:</i> Weightier Matters</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">
<h1>Improving the Game</h1>

<h2>Synonymous Exits</h2>

<p>The player character starts outside a cave that's described as being to the north. Although that clearly suggests that the player should type NORTH to enter the cave it would seem just as natural to type IN. Likewise, once the player character is inside the cave it would seem just as natural to type OUT as SOUTH to leave the cave. We could obviously allow for that by adding <span class="code">in = cave</span> to <span class="code">startroom</span> and <span class="code">out = startroom</span> to <span class="code">cave</span>, but then <strong>in</strong> and <strong>north</strong> would appear as separate exits in the exit lister (for the startroom) just as <strong>out</strong> and <strong>south</strong> would appear as separate exits in the cave, even though in reality they're just synonyms for the same exit. This is arguably a bit misleading. The solution is to use <span class="code">asExit()</span>, as shown below:</p>

 <p><div class="code"><pre>
startroom: Room 'Outside Cave'
    desc = "You're standing in the bright sunlight just outside of a large,
        dark, foreboding cave, which lies to the north. The path back to your
        camp winds roughly southeast through the dense foliage. " 
    
    north = cave 
    <strong>in asExit(north)</strong>
    
    southeast()
    {
        if(goldSkull.isIn(me))
        {
            "Your mission complete, you head triumphantly back to your camp. ";
            finishGameMsg(ftVictory, [finishOptionUndo]);
        }
        else
            "You've no intention of leaving till you've got what you came for.
            ";
    }
;

cave: Room 'Cave'    
    desc = "You're inside a dark and musty cave. Sunlight 
    pours in from a passage to the south. " 

    south = startroom 
    <strong>out asExit(south)</strong>
;
</pre></div>

<p>The construct <span class="code">asExit(<em>dir</em>)</span> means "make this exit go where the <em>dir</em> exit leads but don't show it as a separate exit in exit listings." If you recompile and run the game again now you should find that you can now go in and out of the cave using IN and OUT but that these are not explicitly listed as exits.</p>

<h2>Missing Objects of Various Kinds</h2>

<p>Another obvious way for the player to attempt to enter the cave is by using the command ENTER CAVE, but that won't work because there's nothing in the startroom to represent the cave. For that matter EXAMINE CAVE won't work either, even though the "large, dark, foreboding cave" is explicitly and prominently mentioned in the room description. We can fix this by adding an object to represent the cave exterior easily enough, but then the question is, what kind of object do we need? Of course we could just make it a Thing, define a couple of properties on it such as <span class="code">isFixed = true</span>, and then add handling for the ENTER command. But an easier solution is to use a library class that does all this for us, just as we did in using a StairwayUp to implement the tree in the Heidi game. In this case the class to use is called <span class="code">Enterable</span>, and we can use it like this:</p>

 <p><div class="code"><pre>
+ caveMouth: Enterable 'cave; dark large foreboding uninviting of[prep];
    mouth entrance'
    "The mouth of the cave is easily large enough to allow entrance, but looks
    dark and uninviting. "
    
    destination = cave
;
</pre></div>

<p>The main point to note here is the use of the <span class="code">destination</span> property to determine where the player character ends up when he enters the cave. A smaller point to note is the way we've defined the vocab property (the first element in the template, i.e. the single-quoted string immediately following <span class="code">Enterable</span>). In particular, note the 'of[prep]' that appears in the adjective section (between the first and second semicolons). The word 'of' is not actually an adjective, so we mark it immediately afterwards with '[prep]' to signal that it's actually a preposition. We need the word 'of' in there somewhere in case the player tries to refer to MOUTH OF CAVE or some such phrase, but by marking it as a preposition we ensure that the vocabulary of the caveMouth object won't match just 'of'. Note too that we don't need to define <span class="code">isFixed = true</span>, since this is the default for an Enterable (since Enterables aren't generally the kind of thing you can pick up and carry around with you). By the way, the caveMouth object obviously needs to be placed in your code somewhere between startroom and cave.</p>

<p>The room description also mentions a path winding through thick foliage. Let's deal with the foliage first. It's not actually essential to the game, it's really only a piece of atmospheric scenery in the room description. The player might try to examine it, and should get a sensible response (certainly the player shouldn't be told "You see no foliage here"). At a first attempt we might define a foliage object thus:</p>

<p><div class="code"><pre>
+  foliage: Thing 'foliage; thick dense; jungle trees leaves'
    "The foliage is so thick round here that it blocks every route but the one
    you came by and the entrance to the cave. "
    
    isFixed = true    
;   
</pre></div>

<p>This will do the job, but if players try to do anything with the foliage but examine it, they'll just get the various default responses for all the various actions. It might take them a little while, however, 
to realize that the foliage is nothing more than a piece of stage scenery, a decoration with virtually no function rather than something that might be actually be useful in solving a puzzle or advancing the plot. 
The conventional way to signal this to players is to have such a decoration object respond with "The foliage is not important" to every command except EXAMINE, which at once tells players that this is something 
they don't need to bother with. We can do that by setting <span class="code">isDecoration = true</span> on the foliage object. In fact, since it is only a decoration object that won't figure in any other code, we 
don't even need to give it a name, we can define it as an <em>anonymous object</em>, which can save a lot of time and effort thinking up names for decoration objects that have no real function beyond acting as a kind of backdrop:</p>

 <p><div class="code"><pre>
+  Thing 'foliage; thick dense; jungle trees leaves'
    "The foliage is so thick round here that it blocks every route but the one
    you came by and the entrance to the cave. "
    
    isDecoration = true   
; 
</pre></div>

<p>This type of situation is so common that the library defines another custom class, Decoration, to deal with it. This allows us to make the definition even briefer:</p>

<p><div class="code"><pre>
+  Decoration 'foliage; thick dense; jungle trees leaves'
    "The foliage is so thick round here that it blocks every route but the one
    you came by and the entrance to the cave. "    
; 
</pre></div>

<p>Now, whether you prefer that to the previous version is to some extent a matter of taste. The adv3Lite library is designed in such a way as to allow you to define as many things as possible with just the Thing class, and then go on to customize their behaviour by overriding various properties. In some cases, like the Enterable example just above and the StairwayUp example in the Heidi game, using one of the other library classes can clearly save you quite a bit of work, since you'd otherwise have to write quite a bit of your own code to provide equivalent functionality. In the case of the Decoration class, however, all you're being saved is a single property definition and a little bit of typing. Whether it's easier to remember the class name or the property name you need to produce the same effect is debatable, and different people could quite reasonably take different views. The adv3Lite library therefore allows you to do it either way to suit your own preference. In this tutorial, however, it's probably better if we choose one way or the other and then stick to it. I propose we go with using the classes rather than the properties.</p>

<p>On balance, I do actually think this is the better choice. The first reason is that, other things being equal, using a class name in the object header makes your code that much easier to read, since it's that much more obvious from looking at the first line of an object definition what sort of object it is, whereas, particularly in an object definition spanning many lines, it might be quite hard to pick out a property definition like <span class="code">isDecoration = true</span> or <span class="code">contType = On</span> that actually defines the fundamental nature of the object. Also, in several cases the predefined library classes come with useful defaults and other additional behaviour. Perhaps just as important, but rather less obvious at this stage, is that using the pre-defined library classes rather than just Thing can help take advantage of the object-oriented and class-inheritance features of the TADS 3 language.</p>

<p>The sunlight is another candidate for a Decoration object, so we could define it like this:</p>

 <p><div class="code"><pre>
+  Decoration 'sunlight; bright dazzling; sun light'
    "It's so bright it's almost dazzling. "
;
</pre></div>

<p>This works just fine, but you may feel that the response "The sunlight is not important" to attempts to take it, smell it, push it (and do anything else but examine it) feels just a bit too much like a not-quite appropriate canned message. If so you can replace it with your own alternative by overriding the <span class="code">notImportantMsg</span> property:</p>

<p><div class="code"><pre>
+  Decoration 'sunlight; bright dazzling; sun light'
    "It's so bright it's almost dazzling. "
    
    notImportantMsg = 'It\'s pointless even attempting that with something as
        insubstantial as sunlight. '
;
</pre></div>

<p>That still leaves us with the path. This can't quite be a Decoration, since there are actions the player could reasonably attempt with the path that are equivalent to trying to go south, and so shouldn't be met with a response like "The path is not important." A better alternative is to use the PathPassage class, which incidentally recognizes that commands like FOLLOW PATH and TAKE PATH (but not GET PATH) mean something like "go along the path" (a form of command not recognized by the libary). As a first attempt we might try this:</p>

 <p><div class="code"><pre>
+ pathBack: PathPassage 'overgrown path'
    "The heavily overgrown path runs roughly southeast through the trees. "
    
    destination = (location.southeast)    
;
</pre></div>

<p>This makes the path lead wherever the southeast exit of its immediate location (i.e. startroom) leads, and it works after a fashion. But, quite frankly, it's a bit of an ugly hack, since it's not really the way PathPassage is meant to be used, but we'll leave it that way for now and come back to it later.</p>

<p>Implementing the sunlight in the cave, and the path that's said to lead out of the cave can be left as exercises for the interested reader. But one thing we will change inside the cave is the definition of the pedestal object so that it makes use of classes rather than properties:</p>

 <p><div class="code"><pre>
+ pedestal: Fixture, Surface 'stone pedestal; smooth'
    "The smooth stone pedestal is artfully positioned to catch the sunlight at
    just this time of day. "
        
    notifyRemove(obj)
    {
        if(contents.length &lt; 2)
        {
            "As &lt;&lt;obj.theName&gt;&gt; leaves the pedestal, a volley of poisonous
            arrows is shot from the walls! You try to dodge  the arrows, but
            they take you by surprise!";  
            
            finishGameMsg(ftDeath, [finishOptionUndo]);  
        }
    }
;
</pre></div>

<p>This may not save us a lot of typing, but it perhaps makes it easier to see at a glance what kind of thing the pedestal is. We'll make some more substantial changes to the pedestal in the next section.</p>



</div>
<hr class="navb"><div class="navb">
<i>adv3Lite Library Tutorial</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="goldskull.htm">Goldskull</a> &gt; 
Improving the Game
<br><span class="navnp"><a class="nav" href="making.htm"><i>Prev:</i> Making things happen</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="weightier.htm"><i>Next:</i> Weightier Matters</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>