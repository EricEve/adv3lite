<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Reviewing the Basics &mdash; Object Containment</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="reviewing.htm">Reviewing the Basics</a> &gt; 
Object Containment
<br><span class="navnp"><a class="nav" href="object.htm"><i>Prev:</i> Object Definitions</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="methods.htm"><i>Next:</i> Methods, Functions and Statements</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">
<h1>Object Containment</h1>

<h2>Two Senses of Containment</h2>

<p>Talking about object containment in adv3Lite (or indeed in TADS 3 in general or in many other IF languages) can seem just a bit confusing at first, since there aren't quite enough different English words for the 
different concepts involved (much as in the previous section we had to use 'object' to mean both a physical object simulated in the game and a programming construct used to simulate it). Our immediate problem is 
that as soon as we start talking about the containment model in adv3Lite (and many other IF systems), we're in danger of using terms like 'contain', 'containment', 'container', and 'in' in two closely related but 
conceptually distinct (and importantly distinct) ways, which for convenience we might term <em>spatial containment</em> and <em>programmatic containment</em>.</p>

<p>By <em>spatial containment</em> I mean the physical, spatial relationships that we're trying to model in our game world. One object can be <em>inside</em> another, or directly <em>on top of</em> another, or <em>behind</em> another, or <em>underneath</em> another. We might refer to these kinds of spatial relationships in a kind of shorthand by simply using the prepositions <em>in</em>, <em>on</em>, <em>behind</em> and <em>under</em>. In the physical, spatial sense, only the first of these is strictly containment, one object inside another that is its container, but in the programmatic sense all four spatial relations are modelled as containment relations.</p>
 
<p>Incidentally, apart from containment relations involving people (and other animate actors), these tend to be the only kinds of spatial relationships modelled in Interactive Fiction. They have in common that they are all treated as hierarchical (in the programming sense, one object is the container and the other the contained, a clearly asymmetric relationship), so it is not uncommon to talk of a <em>containment hierarchy</em>. Relations at the same level in the hierarchy (with the exception of the spatial interconnections between rooms) are scarcely ever modelled. A room <em>description</em> may state that the sofa is on one side of the room, the plush armchair on the other, and the TV set is in the corner, but these spatial relationships are not typically represented anywhere in the underlying world model implemented in game code or library code. Objects in the same location are generally regarded as being within reach of the player (and of one another), and there's no further attempt to model 'three feet away from' or 'two metres to the right of' or anything like that. We will eventually meet a partial exception in which under certain special circumstances objects may be divided into those that are close at hand and those that are remote, but that's a complication we'll ignore for now. As a general rule, then, the spatial relations that IF models are hierarchical ones rather than peer-to-peer ones (other than the peer-to-peer relationship of having the same location).</p> 
 
<p>Given the hierarchical nature of the containment model, it will be convenient to use the terms 'parent', 'child' and 'sibling' in their obvious senses to refer to relative positions within the containment tree. For example, when Heidi first enters the clearing, Heidi, the tree and the nest are all (direct) children of the clearing, and the clearing is the parent of all three. If Heidi comes carrying the bird, then the bird is a child of Heidi, and Heidi is the parent of the bird. When Heidi puts the bird in the nest, the nest becomes the parent of the bird. If Heidi then picks up the nest, the nest becomes the child of Heidi while the bird remains the child of the nest (the containment hierarchy is thus in general highly mutable, though some objects may of course be fixed in place).</p> 

<p>We may represent these hierarchical relationships diagrammatically (if a little crudely) thus:

<pre>

                    Clearing                                  Clearing                                 Clearing                                                                
                       |                                          |                                       |
                       |                                          |                                       |
        ------------------------------     ===&gt;     -------------------------------   ===&gt;  ---------------------------------
        |              |             |              |             |               |         |                               | 
      Tree           Nest          Heidi          Tree           Nest           Heidi      Tree                            Heidi
                                     |                            |                                                         |                                     
                                   Bird                          Bird                                                      Nest 
                                                                                                                            | 
                                                                                                                           Bird
</pre>
 
 
<p>Note that in the above example, while the bird literally ends up in (i.e. inside) the nest, it does not literally start out in (i.e. inside) Heidi, neither does the nest end up literally in (i.e. inside) Heidi, yet from the point of view of the underlying containment model, the nest ends us at the child of Heidi in almost exactly the same way as the bird is the child of the nest or Heidi is a child of the clearing.</p>
 
<h2>The Containment Model</h2> 

<p>Using the language of 'parent' and 'child' one can describe the main features of the adv3Lite containnment model thus:</p>

<ol>
<li>A parent can have any number of children, but a child can have at most one parent (it's also possible for a child to be an orphan and have no parent at all).</li>
<li>Rooms are at the top of the containment hierarchy; rooms never have a parent.</li>
<li>Everything (apart from rooms) that exists within the game world must be directly or indirectly in a room (that is it must be the child, grandchild or more distant descendent of some room).</li>
<li>An object can be moved into limbo (or nil, to use the TADS 3 way of saying it) when it's no longer in the game world (this might be used to represent the destruction of the object, or it's being moved to some totally inaccessible location). Conversely a game object might start out without a parent and subsequently be moved to a room or other parent object when it becomes available.</li>
</ol>

<p>It's probably helpful to spell out some of the implementation details at this point. Programmatically, containment is modelled through two properties of each Thing. The <span class="code">location</span> property contains the identity of an object's parent. The <span class="code">contents</span> property contains a list of the object's children. Thus, in the example above, the contents property of the clearing starts out as <span class="code">[tree, nest, heidi]</span> and ends up as <span class="code">[tree, heidi]</span>, while Heidi's contents start out as <span class="code">[bird]</span> and end up as <span class="code">[nest]</span>. Meanwhile the bird's <span class="code">location</span> property starts out as <span class="code">heidi</span> and ends up as <span class="code">nest</span>, while the nest's <span class="code">location</span> property starts out as <span class="code">clearing</span> and ends up as <span class="code">heidi</span>.</p>

<p>It's clearly important that the location and contents properties of every object in the game remain mutually consistent. That is if objectA has objectB as its location, objectB must list objectA among its contents, and conversely, if objectA appears in the contents list of objectB, then objectB's location property must point to objectA. To ensure that this consistency is maintained, you should <strong>never</strong> change the location property of an object directly in your code (although it's perfectly okay to specify the <em>initial</em> location of an object). Nor should you manipulate the contents property of an object directly in your code (although of course it's perfectly okay for your code to test or use what it contains). Instead you should always use the <span class="code">moveInto(obj)</span> or <span class="code">actionMoveInto(obj)</span> methods to move objects around your game world. For example, if you wanted to move Heidi to the top of the tree in response to a CLIMB TREE command you would use:</p>

 <p><div class="code"><pre>
  heidi.actionMoveInto(topOfTree);
</pre></div>
  
<p>The difference between <span class="code">moveInto()</span> and <span class="code">actionMoveInto()</span> needn't detain us long here. In brief, <span class="code">moveInto()</span> simply carries out the basic housekeeping of ensuring that location and contents properties remain consistent, while <span class="code">actionMoveInto()</span> also triggers also certain notifications. You would typically use <span class="code">actionMoveInto()</span> to implement the direct response to a player command (such as climbing a tree) and <span class="code">moveInto()</span> to move stuff around by authorial fiat.</p>  

<p>To move something into limbo, i.e. off the game map altogether, you can use <span class="code">obj.moveInto(nil)</span>. This sets the location property of <span class="code">obj</span> to nil (a special value in TADS 3 that means 'nothing at all') and removes <span class="code">obj</span> from the contents list of its previous parent (it's not added to the contents list of nil, since nil is nothing at all, not an object that can have properties). </p>

<h2>Types of Spatial Containment &mdash; the contType Property</h2>

<p>We have seen that, on the face of it, the underlying containment model simply keeps track of parent-child relationships, and apparently takes no account of whether a child is in, on, under or behind its parent. In a sense that's true, and yet the adv3Lite world model clearly does keep track of whether something is in, on, under or behind something else, and if you've been following this tutorial reasonably closely up till now, you'll probably have surmised that it does so by means of the parent's <span class="code">contType</span> property. Whether something is described as being in, on, under or behind its parent depends entirely on whether its parent's <span class="code">contType</span> is <span class="code">In</span>, <span class="code">On</span>, <span class="code">Under</span> or <span class="code">Behind</span>. An object's <span class="code">contType</span> property also determines whether the player character can put something in, on, under or behind that object.</p>

<p>Since an object's contType property can only hold a single value, it follows that any given game object can only model one kind of spatial containment. If a given parent can have things in it, it can't also have things on it or under it or behind it. It's possible to make it appear to the player than a particular object in the game allows things in, on, under and behind it, but this requires a piece of trickery involving multiple programming objects each of which supports only one type of containment. The adv3Lite library makes this reasonably easy to set up, as we shall see in a later chapter, but this is only an apparent exception, not a real exception, to the rule that an adv3Lite Thing can only support one kind of containment.</p>

<p>A partial exception, again arguably more apparent than real, to the rule that an parent object can only implement one time of containment at a time is when that parent object is a person (or an animate actor functionally equivalent to a person, such as an intelligent alien, animal or robot). The containment children of a person can be either (a) something carried by that person or (b) something worn by that person or (c) part of that person, such as a limb. The way adv3Lite decides which is which is to assume that anything fixed (with <span class="code">isFixed = true</span>) must be a part of the person (c), anything with <span class="code">wornBy</span> not nil (but rather pointing to the parent person) is something worn by the person, and any other portable (i.e. non-fixed) contained child must be something carried by the person. An object representing a person has the special <span class="code">contType</span> <span class="code">Carrier</span> (which is meant to indicate this special case). The Actor class (which we'll meet in a later chapter) defines <span class="code">contType = Carrier</span> by default; if you use an ordinary Thing to represent a person (such as the player character object, me) then you should define <span class="code">contType = Carrier</span> on it yourself, as we've already seen.</p>


</div>
<hr class="navb"><div class="navb">
<i>adv3Lite Library Tutorial</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="reviewing.htm">Reviewing the Basics</a> &gt; 
Object Containment
<br><span class="navnp"><a class="nav" href="object.htm"><i>Prev:</i> Object Definitions</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="methods.htm"><i>Next:</i> Methods, Functions and Statementst</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>