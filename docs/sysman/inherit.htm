<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>The Object Inheritance Model</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="langsec.htm">The Language</a> &gt; 
The Object Inheritance Model
<br><span class="navnp"><a class="nav" href="startup.htm"><i>Prev:</i> The Main Program Entrypoint</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="objdef.htm"><i>Next:</i> Object Definitions</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">

<h1>The Object Inheritance Model</h1>

<p>TADS 3 is at its core an object-oriented programming language.
One of the pillars of object-oriented programming is the concept
of inheritance.

<p>Inheritance comes into play whenever you create a subclass of
another class.  The point of subclassing is that you can take an
abstract, general-purpose class - Furniture, say - and create another
class that represents a narrow, specialized slice of the broader class
- Chair, say.  The specialized class is a subclass of the general
class in that it represents a subset of the things that the general
class can represent: all chairs are furniture, but furniture includes
lots of things that aren't chairs, like tables and cabinets and lamps.
You can repeat this process to make finer and finer subdivisions at
each level: Chairs come in Armchair and Sofa and Rocking varieties,
Sofas come in Sleeper and Loveseat subclasses, and so on.

<p>Once we've started sorting objects into classes and subclasses this
way, the basic idea of inheritance becomes fairly intuitive.  Since
all chairs are furniture, we'd expect that a chair would exhibit all
of the basic behaviors and attributes of furniture in general.  That,
in a nutshell, is what we mean by inheritance: a chair inherits its
basic framework of behaviors and attributes from the more general
furniture category.

<p>Inheritance is such a powerful concept because it not only fits so
well with our intuition, but also brings concrete benefits to our
programming model.  OOP lets us declare <i>in the programming
language</i> that Chair is a subclass of Furniture, and with this
information, the compiler automatically knows that everything we've
defined for the Furniture class automatically applies to the Chair
class as well.  This is the concrete meaning of inheritance in OOP,
the huge benefit to the programmer is that we're saved the trouble of
re-typing all of the Furniture code on our new Chair class.  We simply
tell the compiler that Chair is a subclass of Furniture, and the
compiler takes care of the rest.

<p>Now, if that were all there were to it, there wouldn't be much
point in defining a more specialized category like "chair."  The whole
point of defining specializations - subclasses - is that a subclass is
<i>mostly</i> like its general class, <i>but not entirely</i> A chair
is <i>mostly</i> like any other furniture, but has some particular
features that make it noticeably different.  That's what we mean when
we say that all chairs are furniture but not all furniture is chairs.

<p>This is where the concept of "overriding" comes from.  By default,
Chair inherits everything defined for Furniture.  It can add things as
well, things that just aren't relevant to furniture in general: maybe
we'd add cushion thickness and back-rest height.  But just as
importantly, we might decide that there are certain attributes or
behaviors that we've defined on the Furniture class that need to be
<i>changed</i> for Chair.  Maybe we've said that sitting on a piece of
furniture isn't allowed in general; we'd obviously want to change this
for a chair.  In other words, Chair would override the "sitting is
allowed" behavior that it would otherwise inherit from the base class.

<h2>Multiple Inheritance</h2>

<p>It's fairly easy to see how inheritance works when we're talking
about simple subsets like Chair inheriting from Furniture.  There's
another situation that's a bit more complicated, though.

<p>The good thing about OOP and subclassing and inheritance is that
it's a pretty good match to the way our brains naturally work.  We're
all OO programmers practically from birth because we naturally see the
world in categories and subcategories.  The only snag is that all of
this wonderful inbred OOP ability is merely an artifact of human
cognition: it's the way we see the world, not the way the world really
is.  The real world doesn't break up so neatly into simple,
non-overlapping sets of classes and subclasses and sub-sub-classes.
In the real world, a chair is a piece of furniture, but it also might
be a Thing Made of Wood, and a Thing You Can Stand On, and Something
You Can Disassemble, a Thing You Can Throw, a Doorstop, and endless
others.  When it comes right down to it, an object's "class" isn't
some kind of eternal, abstract, permanent feature of the object; it's
just a feature of the way we happen to be looking at it at the moment.

<p>OOP languages don't try to address this "real world" problem.
After all, OOP isn't a theory of the world, it's just a way of
organizing data structures and programming code to make complexity
more manageable; looked at that way, OOP has proven its worth.

<p>Even so, "single-inheritance" models are often too restrictive for
real applications.  Interactive Fiction is particularly difficult to
fit into a single-inheritance model because it revolves so much around
simulating real-world scenarios.  To help ease the limitations of
the single-inheritance model, some OOP languages - including TADS 3 -
include the concept of Multiple Inheritance.

<p>Multiple inheritance is, as you might guess from the name, the
ability to say that a class derives from more than base class.  For
example, in our Chair example, we might define Chair as inheriting
from Furniture and from another class called Platform that represents
things a person can sit or stand or lie upon.  (Note that we're making
these up for the purposes of this chapter only - in particular, these
classes don't have anything to do with the adv3 library's class tree.)

<p>In the most basic case, multiple inheritance is relatively
straightforward.  We define a subclass that's based on two superclasses;
the new subclass simply inherits the <i>combination</i> of the
behaviors and attributes from the two base classes.  Here's a diagram
showing a new subclass, C, based on two superclasses, A and B:

<p><center><img src='class1.gif'></center>

<p>(We could also base a subclass on three or more base classes, not
just two.  The principles and rules for three or more superclasses are
all the same as for two, though, so we'll stick to two superclasses in
our examples for clarity.)

<p>In the simple case, C simply inherits everything that A defines
plus everything that B defines.  Things start to get complicated,
though, when there are inheritance "conflicts" between the two base
classes.  What happens when our two base classes both define the same
property <i>p</i>?  In other words, in the diagram above, if
A.<i>p</i><span class="code">=</span>1, and B.<i>p</i><span class="code">=</span>2, what value of <i>p</i> does C
inherit?  Here's a picture of what we mean:

<p><center><img src='class1a.gif'></center>

<p>Our new notation in the diagram shows property definitions - that
little <i>p=1</i> next to A means that A defines property <i>p</i>
with the value 1.  So now we have A.<i>p</i><span class="code">=</span>1 and B.<i>p</i><span class="code">=</span>2.
So, the question is, what value of <i>p</i> does C inherit?

<p>There are a few different theoretical approaches to resolving
inheritance conflicts of this kind.  One approach is to consider such
conflicts to be errors.  In this view, such a conflict is a sign of a
basic design flaw in the class hierarchy.  Some OOP languages take
this approach, and simply count such a conflict as a compilation
error.  To fix the error, the programmer must delete <i>p</i> from
either A or B, or restructure C's superclass list so that it doesn't
include both A and B.  Some languages that take this "strict" approach
also let you resolve the conflict by explicitly overriding <i>p</i> in
C - that eliminates the conflict by letting the programmer state
exactly what she intended.

<p>TADS 3 takes a more permissive view: it considers these conflicts
perfectly legal, and to resolve them, it defines a "priority" rule to
determine which of the conflicting properties "wins" in a dispute.

<p>The basic TADS rule for multiple inheritance priority is that the
<i>leftmost</i> superclass takes precedence over other superclasses.
By leftmost, we mean the one defined earliest in the superclass list.
The TADS syntax for defining the object C in the diagram above would
be like this:

<p><div class="code"><pre>
class C: A, B
  // C's own overrides go here...
;
</pre></div>

<p>In this definition, A is the leftmost superclass of C, since it
appears earliest in the list of superclasses in the <span class="code">class</span>
statement that defines C.  So, in case of a conflict between A
and B, A wins: C inherits <i>p</i> from A.

<p>Of course, none of this is an issue if C <i>also</i> defines
<i>p</i>, because in that case we'd have a simple case of overriding.
C.<i>p</i> would override <i>both</i> A.<i>p</i> and B.<i>p</i>,
since a subclass definition always overrides <i>all</i> superclass
definitions for the same property.

<p>Unfortunately, there's one more complication that we have to
take into account, which is this: what if A and B themselves
share a common base class?  Consider this diagram:

<p><center><img src="class2.gif"></center>

<p>We now have A as a subclass of Z, B as a sublass of Z, and C as a
subclass of A and B.  In terms of TADS definitions, this would look
like so:

<p><div class="code"><pre>
class Z: object;
class A: Z;
class B: Z;
class C: A, B;
</pre></div>

<p>If we still have A and B defining <i>p</i>, this doesn't change
anything - C still inherits <i>p</i> from A because of the "leftmost
superclass" rule.  But now consider this bizarre situation:

<p><center><img src="class3.gif"></center>

<p>Remember our notation: that little <i>p=1</i> next to Z means that
Z defines property <i>p</i> with the value 1.  So we now have
Z.<i>p</i><span class="code">=</span>1 and B.<i>p</i><span class="code">=</span>2.  The question once again is:
what value of <i>p</i> does C inherit?

<p>Using our "leftmost superclass" rule, we'd say that the value C
inherits must be 1.  If we forget about C for a moment, we can see
that A clearly inherits <i>p</i> from Z - this much is obvious.  So,
given the "leftmost" rule, C must inherit A.<i>p</i>, which is 1.

<p>But this is <b>not</b> what actually happens.  In actuality,
C inherits <i>p</i> from B, so if we evaluate C.<i>p</i>, we'll
get 2 as the result.  The reason is that there's another rule
that supersedes the "leftmost superclass" rule.

<p>The superseding rule is the "explicit override" rule.  This rule
states that a class that <i>explicitly</i> overrides a given property
in a base class <i>also</i> overrides that same base class property in
a multiple inheritance situation.  In our example, B.<i>p</i>
explicitly overrides Z.<i>p</i>; this means that B.<i>p</i> must take
precedence over Z.<i>p</i> in this multiple inheritance situation, so
C must inherit <i>p</i> from B before it can inherit the same property
from Z.  Thus, B.<i>p</i> takes precedence.

<h3>Rationale for the "explicit override" rule</h3> 

<p>This isn't just an arbitrary technical rule.  This is actually a
practical rule designed to make multiple inheritance behave as
intuitively as possible in these "conflict" situations.

<p>The point of the rule is this: When the programmer created class B,
she <i>specifically</i> and <i>consciously</i> decided that B's
version of <i>p</i> was special - she actually wrote out <i>p</i>'s
definition in B by hand, after all.  The programmer personally decided
that the version of <i>p</i> inherited from Z was wrong for B and
needed to be overridden.  In contrast, the programmer who created
class C (who might even be a different programmer - A, B, and Z might
be classes from a library, and class C is something we've created in
our game program) <i>didn't say anything about p</i>.  The programmer
who wrote class C might not even have thought about <i>p</i> - he just
knows that he wants to combine the general functionality inherited
from A and B, and hasn't necessarily thought about every individual
property and method.  The same holds for class A - the programmer who
wrote class A never said anything about <i>p</i>, so might not even
have thought about it when writing A; <i>p</i> was just inherited by
default.  That's a big part of OOP's appeal, after all: that we can
use classes in our program without having to know every detail about
their internal structures.

<p>So when it comes to deciding on which <i>p</i> to inherit in class
C, which seems more important: the first programmer's explicit
decision to override Z's version - and thus A's version - of <i>p</i>
in class B, or the second programmer's indication that A generally
comes before B in priority order?

<p>TADS 3's answer is that the first programmer's decision that
B.<i>p</i> overrides Z.<i>p</i> takes precedence.

<h3>The multiple inheritance rules in summary</h3>

<p>Here's a summary of the multiple inheritance rules: a class
inherits a property from the leftmost superclass that defines or
inherits the property, <i>except</i> that if a superclass further to
the right itself overrides the actual source of that first property,
the one to the right takes precedence.

<p>Stated as an algorithm:

<ul>
<li>If the object in question <i>directly</i> defines the property, that's
    the definition to use, so we're done; otherwise, proceed.
<li>Starting at the leftmost superclass, visit each superclass:
  <ul>
  <li>If the current superclass defines the property directly <i>or</i>
      inherits the property from one of its superclasses, then:
    <ul>
    <li>Note the actual <i>defining</i> object of the property (if the
        superclass directly defines the property, the defining
        object is the superclass, otherwise it's the class that the
        superclass inherits the property from);
    <li>If we haven't yet found a match, remember this as the new match;
        otherwise, if this defining object is a descendant (i.e., a
        subclass, or a subclass of a subclass, etc) of the previous
        match's defining object, remember this as the new match;
        otherwise forget the current match.
    <li>In any case, keep going.
    </ul>
  <li>In any case, keep going.
  </ul>
<li>We're done: the last match from the loop is the one to use.
</ul>

<h2>Where <span class="code">inherited</span> goes next</h2>

<p>The rules above for inheritance and multiple inheritance explain
how to find the definition of a property to use when evaluating an
initial property evaluation - a direct property evaluation or a call
to a method, as in <span class="code">obj.p</span>.  But there's more to inheritance than
this, thanks to the <span class="code">inherited</span> operator.

<p>The <span class="code">inherited</span> operator's job is to <i>continue</i> the
traversal of the inheritance tree.  An initial property evaluation
reaches the most specific override of the property, but then
<span class="code">inherited</span> can be used to call the <i>next-most specific</i>
version of the property.  This extends the basic benefits of
inheritance to a much finer granularity: not only can we inherit whole
properties and methods from base classes, but we can actually
<i>extend</i> base class methods by incorporating the originals
into our code even when we override them.

<p>The rules for continuing an inheritance tree traversal with
<span class="code">inherited</span> are actually very simple.  <span class="code">inherited</span> just goes to
the instance of the method that the current instance overrides.  In
other words, it's the instance that <i>would</i> have been called if
the current instance had never been defined.

<p>It's worth noting that there's always a single linear "inheritance"
ordering of all of the instances of a given method in a given object's
class tree.  For example, take our example from earlier:

<p><center><img src="class3.gif"></center>

<p>In C's hierarchy, the inheritance order for <i>p</i> is [B, Z] - in
other words, C inherit <i>p</i> first from B, then from Z.  We know
from the multiple inheritance rules that B.<i>p</i> comes first in the
inheritance order; and if we removed B.<i>p</i> from the picture, we
can see that we'd have gone to Z.<i>p</i> first.

<p>The reason we point out this linear ordering is that the "tree"
diagrams can often make it seem as though the inheritance is all fuzzy
and non-deterministic, as though there were all sorts of paths through
the tree.  But that's not really the case: there's <i>always</i> a
unique linear ordering for the inheritance order.  Given a class tree,
you can always work out <i>exactly</i> the order in which
<span class="code">inherited</span> will traverse the classes.

<p>There's one other thing to note.  The traversal order depends on
the <i>final</i> subclass we're talking about - in other words, it
depends on the actual object we targeted in the initial method call.
Each final subclass has its own tree.  The position of a given
superclass in the hierarchy might vary from one - we mixed A and B as
superclasses in our example above, but some other class might mix A
and C as superclasses, or might mix A and B and some other class X.
Another object might use B and A as superclasses rather than A and B,
making B take precedence over A in that case.  This means that we
can't look at a given method and determine <i>in isolation</i> where
its <span class="code">inherited</span> calls will go - it all depends on the full class
tree of the final object that's involved.

</div>
<hr class="navb"><div class="navb">
<i>TADS 3 System Manual</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="langsec.htm">The Language</a> &gt; 
The Object Inheritance Model
<br><span class="navnp"><a class="nav" href="startup.htm"><i>Prev:</i> The Main Program Entrypoint</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="objdef.htm"><i>Next:</i> Object Definitions</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>
