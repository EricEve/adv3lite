<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>StringBuffer</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="builtins.htm">The Intrinsics</a> &gt; 
StringBuffer
<br><span class="navnp"><a class="nav" href="string.htm"><i>Prev:</i> String</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="strcomp.htm"><i>Next:</i> StringComparator</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">

<h1>StringBuffer</h1>

<p>A StringBuffer is a mutable character string.  Unlike the regular
<a href="string.htm">String</a> class, a StringBuffer can be edited in
place, meaning that you can change the text contained in the object.

<p>In contrast, a String object is immutable: operators and functions
that <i>appear</i> to modify a string, such as the "+=" operator,
actually leave the original string unchanged and create a new String
object to represent the result of the operation.

<p>This difference means that it's often more efficient to use
StringBuffer when you need to assemble a string by concatenating a
number of pieces together.  Doing this with regular String objects
requires creating a new intermediate string for each concatenation
step, which involves allocating memory and copying the source strings.
Consider this example:

<p><div class="code"><pre>
local x = 'one ';
x += 'two ';
x += 'three ';
x += 'four ';
x += 'five';
</pre></div>

<p>This creates five separate strings - the original string, plus a
new string for each concatenation result.  The text 'one' has to be
copied again on every step, since it appears at the start of every
intermediate result.  Now consider the corresponding code
using a StringBuffer object:

<p><div class="code"><pre>
local x = new StringBuffer();
x.append('one ');
x.append('two ');
x.append('three ');
x.append('four ');
x.append('five');
</pre></div>

<p>This only creates a single StringBuffer object.  Each <span class="code">append()</span>
call modifies the <i>contents</i> of the StringBuffer - it doesn't
create a new object.  Appending new text simply tacks the text onto
the end of the current contents of the object, so the text already
stored doesn't have to be copied anywhere.

<p>For simple operations involving a few concatenations, you probably
wouldn't notice any performance difference between the two approaches,
so you might as well stick to the simple String approach.  Where
StringBuffer becomes interesting is for complex string constructions
involving a long series of steps - dozens or hundreds of steps.
StringBuffer is ideally suited for tasks like capturing the text
directed to an output stream, or loading the lines of text out of
a file.

<h2>Construction</h2>

<p>You create a StringBuffer with the <span class="code">new</span> operator.  The simplest
format is to create the object with no constructor arguments:

<p><div class="code"><pre>
local s = new StringBuffer();
</pre></div>

<p>This creates a StringBuffer with default allocation parameters.

<p>StringBuffer objects manage their memory automatically, but the
constructor takes a couple of optional arguments that let you
fine-tune the object's memory usage.  If you include one integer value
in the <span class="code">new</span> call, it specifies the initial allocation size of the
internal text buffer, in characters:

<p><div class="code"><pre>
s = new StringBuffer(1000);
</pre></div>

<p>This allocates an initial buffer with room for 1000 characters of
text.

<p>You can also specify a second integer argument giving the "incremental"
allocation size.  This is the amount of additional memory that the
object will allocate each time its contents expand beyond its current
capacity.

<p><div class="code"><pre>
s = new StringBuffer(1000, 500);
</pre></div>

<p>That allocates 1000 space for characters initially, and tells the
object to add memory for another 500 characters each time the contents
exceed the current capacity.

<p>If you have some idea when creating the object of how much text
you'll ultimately be storing in it, you can improve performance by
specifying the allocation parameters.  Expanding the buffer space is
extra work, so it's best to minimize it by making the buffer large
enough up front that it won't need to be expanded too often.  On the
other hand, it wastes memory to specify an initial size that's much
larger than you'll ever need.

<h2>Limits</h2>

<p>A StringBuffer's stored text length is limited only by available
memory.  This means that a StringBuffer can be much longer than an
ordinary string, which is limited to about 64,000 bytes.  (The Unicode
UTF-8 format is a variable-length encoding, meaning that each
character requires a different number of bytes of storage.  As a
result, the 64,000 byte limit translates to anywhere from 21,000 to
64,000 characters, depending on which particular characters are
involved.)  When you convert a StringBuffer to an ordinary string
object, such as via <span class="code">toString()</span>, an error will be thrown if the
contents exceed the string size limit.

<p>The <span class="code">+</span> and <span class="code">+=</span> operators cannot be used with StringBuffer
objects (more on this shortly).


<h2>Converting to String</h2>

<p>You can convert a StringBuffer to a regular String using the <a
href="tadsgen.htm#toString"><span class="code">toString()</span></a> function, passing the
StringBuffer as the argument.  This returns an ordinary String object
with the same contents.  

<p>The normal way to use StringBuffer is to maintain a StringBuffer
object for the process of assembling a string out of various elements,
then to convert the result to an ordinary String when the build
process is done.  StringBuffer isn't as full-featured as String; it's
intended to be used mainly for construction, not manipulation or
long-term storage.


<h2>Operators</h2>

<p>You can use the comparison operators (<span class="code">==</span>, <span class="code">!=</span>, <span class="code">&gt;</span>, <span class="code">&lt;</span>,
<span class="code">&gt;=</span>, <span class="code">&lt;=</span>) to compare StringBuffer values to other StringBuffers
or to ordinary strings.  The comparisons are handled as though the
StringBuffer were an ordinary string containing the text in the
buffer.

<p><div class="code"><pre>
local s = new StringBuffer();
s.append('hello');
if (s == 'hello')
  "Yes";
</pre></div>

<p>This will print "Yes", since the contents of the StringBuffer
match the character string.

<p>You can use the indexing operator to retrieve a single character
from a StringBuffer:

<p><div class="code"><pre>
local s = new StringBuffer();
s.append('abcdefg');
local c = s[3];   // c = 'c'
</pre></div>

<p>The result is a one-character string containing the character
at the given index.  (The first character is at index 1.)  It's
illegal to index the string outside of the bounds of the string.
However, a negative value <i>is</i> legal: it indicates an offset
from the end of the string, with -1 referring to the last character,
-2 the second to last, and so on.

<p><div class="code"><pre>
local g = s[-1];  // g = 'g'
</pre></div>

<p>You can also assign a value to an indexed element.  This replaces
the character at that position with a given character.  The
replacement can be specified as a string, in which case only the first
character of the string will be used; or as an integer, which is
treated as a Unicode character code.

<p><div class="code"><pre>
s[2] = 'B';
s[3] = 67;  // unicode character 'C'
// s now contains 'aBCdefg'
</pre></div>

<p>As with the regular index operator, you can only assign to index
values within the bounds of the text in the buffer, and you can use
a negative value to index from the end of the string.

<p><div class="code"><pre>
s[-1] = 'G';  // s now contains aBCdefG
</pre></div>


<p>Unlike with Strings, the <span class="code">+</span> (addition) and <span class="code">+=</span> (add and
assign) operators don't work with StringBuffers.  This isn't
an oversight; it's to avoid confusion.  The whole point of
StringBuffer is to avoid creating new objects on every edit, but it
would be confusing for <span class="code">+</span> <i>not</i> to create new objects
when used with StringBuffer: <span class="code">+</span> never alters its operands, and the
only way for <span class="code">+</span> to work on a StringBuffer without altering it would
be to create a new StringBuffer to hold the result.  But that would be
confusing in its own way, because it's contrary to the whole spirit of
StringBuffer.  So it seems best for <span class="code">+</span> to explicitly not work with
this object.

<h2>Methods</h2>

<p><span class="code">append(<i>str</i>)</span>
<div class=fdef>

Appends the string <i>str</i> to the end of the StringBuffer's current
text.  If <i>str</i> isn't already a string value, it'll be converted
to a string, if possible.  Integers, BigNumber values, and and
<span class="code">true</span> and <span class="code">nil</span> values can all be converted automatically.

</div>

<p><span class="code">charAt(<i>idx</i>)</span>
<div class=fdef>

Returns an integer giving the Unicode character value of the
character at index <i>idx</i>.  The index must be within the bounds
of the contents of the buffer.  A negative value is an index from
the end of the string (-1 refers to the last character).

</div>

<p><span class="code">copyChars(<i>idx</i>, <i>str</i>)</span>
<div class=fdef>

Copy characters from the string <i>str</i> into the buffer starting at
index <i>idx</i>, overwriting the current contents.  The first
character is at index 1.  If <i>idx</i> is negative, it's an index
from the end of the buffer, with the last character at index -1.

</div>

<p><span class="code">deleteChars(<i>idx</i>, <i>len</i>?)</span>
<div class=fdef>

Deletes <i>len</i> characters from the string starting at index <i>idx</i>.
The first character is at index 1.  You can use a negative value for
<i>idx</i> to index from the end of the string, with the last character
at index -1.  If <i>len</i> is omitted, all characters from the
starting point to the end of the string are deleted.

</div>

<p><span class="code">insert(<i>str</i>, <i>idx</i>)</span>
<div class=fdef>

Inserts the string <i>str</i> into the StringBuffer at index <i>idx</i>;
that is, just before the character currently at the given index.  The
first character is at index 1.  You can use a negative value to index
from the end of the string, with the last character at index -1.
If you insert at an index past the end of the string, the result will
be the same as <span class="code">append()</span>.  As with <span class="code">append()</span>, <i>str</i> is
automatically converted to a string representation if it's not
already a string (and a conversion is possible).

</div>

<p><span class="code">length()</span>
<div class=fdef>

Returns the length in characters of the contents of the StringBuffer.

</div>

<p><span class="code">splice(<i>idx</i>, <i>len</i>, <i>str</i>)</span>
<div class=fdef>

Replaces the <i>len</i> characters starting at index <i>idx</i>
with the replacement text <i>str</i>.  This is essentially a combined
delete and insert operation: we first delete <i>len</i> characters,
then insert the new string at the same position.  <i>idx</i>
be negative to index from the end of the string.  As with <span class="code">append()</span>,
<i>str</i> is automatically converted to a string representation
if it's not already a string (and a conversion is possible).

</div>

<p><span class="code">substr(<i>idx</i>, <i>len</i>?)</span>
<div class=fdef>

Returns an ordinary string containing the characters in the buffer
starting at index <i>idx</i> and continuing for <i>len</i> characters.
If you omit <i>len</i>, all characters from <i>idx</i> to the end of
the buffer are included.  <i>idx</i> can be negative to index from
the end of the string.  For example, <span class="code">substr(-10)</span> returns a string
containing the last 10 characters in the buffer.

</div>

</div>
<hr class="navb"><div class="navb">
<i>TADS 3 System Manual</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="builtins.htm">The Intrinsics</a> &gt; 
StringBuffer
<br><span class="navnp"><a class="nav" href="string.htm"><i>Prev:</i> String</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="strcomp.htm"><i>Next:</i> StringComparator</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>
