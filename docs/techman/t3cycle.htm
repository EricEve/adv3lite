<!DOCTYPE html>
<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>The Command Execution Cycle</title>
<link rel="stylesheet" href="techman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="advtop.htm">Advanced Topics</a> &gt; 
The Command Execution Cycle
<br><span class="navnp"><a class="nav" href="advtop.htm"><i>Prev:</i> Advanced Topics</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="t3multimeth.htm"><i>Next:</i> Handling TIActions with Multi-Methods</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">

<h1>The Command Execution Cycle</h1>


<p><i>by Eric Eve</i>

<p>The command execution cycle in the adv3Lite library is quite complex. This article aims to unpack it step-by-step, both to give game authors a clearer idea of what is happening, and to indicate places where it may be useful to intervene.</p>
<p>To detail every single by-way and wrinkle of the command execution cycle would probably be more confusing than helpful, concealing the main contours of the process behind a mass of not particularly interesting detail. In this article we shall therefore simplify some of the processes involved, so that the usual course of events stands out, unencumbered by a plethora of potential exceptions. If you want the complete picture, you'll have to examine the library source code and try to puzzle it out!</p>
<p>The command execution cycle is, if not a series of wheels within wheels, at least cycles within cycles or subroutines within subroutines. In an attempt to make this less confusing and more easy to follow, we shall try to follow the main line of execution one level at a time. We'll start by giving an overview of the main scheduling loop that runs each turn, and then trace the execution of a player's command piece by piece. Game authors who just want to see an step-by-step chart of the execution cycle focused mainly on the steps where game code might intervene may prefer to jump straight to the expandable <a href='#summary'><b>summary</b></a> below.</p>

<br>

<h2>Broadbrush Overview</h2>
<p>At a rough broadbrush approxination, the command execution loop works as follows:</p>
<ol>
<li><a href='#maincommand'>mainCommandLoop</a> reads the player's command, applies any modifications from StringPreParsers, and passes it to Parser.parse() to parse (interpet).</li>
<li>The <a href='#parser'>parser</a> attempts to work out what action, actor, and objects are intended in the player's command and creates a new Command object to encapsulate its understanding of the command.</li>
<li>The <a href='#command'>Command</a> object then selects the appropriate Doer or Doers to handle the command.</li>
<li>The <a href='#doer'>Doer</a> object can do whatever it likes with the information passed to it by the Command object, but the usual behaviour is to pass the command information on to the relevant Action by calling the action's exec(cmd) method, where <i>cmd</i> is the Command object.</li>
<li>The relevant <a href='#action'>Action</a> then does the bulk of the work related to the specific action concerned, which includes carrying out the before action processing, the action processing, and the after action processing.</li>
</ol>

<p>We shall next explore each of these steps in more detail.</p>

<h2 id='maincommand'>Top Level Loop &ndash; mainCommandLoop</h2>
<p>The overall command execution in adv3Lite is carried out by the <code>mainCommandLoop()</code> function, which does the following:</p>
<ol>
<li>Sets the current actor to gPlayerChar to ensure there is a current actor (the current actor may be changed later in the cycle).</li>
<li>Displays any pending score notifications.</li>
<li>Executes any current PromptDaemons.</li>
<li>Outputs a paragraph break.</li>
<li>Calls <code>readCommandLine()</code> which:
<ol>
<li>Displays the command prompt.</li>
<li>Reads the player's command and stores it in the local variable <i>txt</i>.</li>
</ol></li>
<li>Allows any active StringPreParsers to modidfy <i>txt</i>.</li>
<li>If as a result, <i>txt</i> is now nil skips the rest of the loop and goes back to step 1.</li>
<li>Calls <a href='#parser'>Parser</a>.parse(txt) to parse and execute the command.</li>
<li>Updates the status line.</li>
<li>Goes back to Step 1 to execute the next cycle.</li>
</ol>

<h2><a name='parser'>Parsing the Player's Command</a></h2>
<p>The main parsing loop is contained in <a href='../libref/source/parser.t.html#211'>Parser.parse()</a>. <p>Various things can complicate this process. The command may be directed towards another actor (e.g. BOB, PUT RED BALL IN BOX), or the player may have entered several commands at once (e.g. PUT RED BALL IN BOX, TAKE BOX, GO NORTH); or the Player have entered an OOPS command to correct a misspelling, or be responding to a parser query such as a disambiguation prompt, or be entering a sepecial command form such as an implicit SAY command (the text of what the player wants the player character to say without explictly using the command SAY); the parsing loop has to cope with these possibilities.</p>
<p>The full details of this process are far too complex to go into here, and most game authors will not usually either want or need to know about them. Here we shall give a simplified account that should suffice for most purposes. With that caveat, Parser.parse(<i>str</i>) carries out the following steps:</p>
<ol>
<li>Resets the special verb handler.</li>
<li><a href='../sysman/tok.htm'>Tokenizes </a> the input string (<i>str</i>), producing a list of tokens encapsulating each of the separate words and punctuation marks in the player's input.</li>
<li>If there are no outstanding parser queries, set the current actor to the player character (if there is an outstanding query, the current actor may already have been set).</li>
<li>Notes any spelling corrects the spelling corrector has made.</li>
<li>If there are no tokens at all (because the player has entered an empty command) carry out the empty command by calling <code>emptyCommand()</code>, which either carries out a LOOK command (if autoLook is true) or otherwise displays "I beg your pardon?". Either way the Parser then stops there.</li>
<li>Otherwise the parser checks for an OOPS command and if there is one correcting a current error, adjusts the command tokens from step 2 to take account of it.</li>
<li>Updates the vocabulary of any game objects that use <a href='../manual/thing.htm#altvocab'>alternating or variable vocabulary</a>.</li>
<li>Gives the special verb manner the chance to amend the command tokens to take account of any <a href='../manual/specialaction.htm'>SpecialVerbs</a> the player may have used.</li>
<li>If there's an outstanding parser question (such as a dismbiguation, 'Which do you mean?' or a missing object, 'What do you want to frob?'), and the question takes priority over new commands, try parsing the input against the question if it's the first command on the input line.</li>
<li>Otherwise, construct a list of new <a href='../libref/object/Command.html'>Command</a> objects which could correspond to the player's input.
This involves the construction of a new CommandList object which:
<ol>
<li>Creates a list of commands by parsing the tokens passed to the CommandList constuctor by calling its Production's (typically a VerbRule) parseTokens() method. This stage identifes the possible actions the command may refer to.</li> 
<li>Sorts the command list in order of <a href='../libref/object/Command.html#calcPriority'>priority</a>.</li>
<li>Iterates through every command in the command list to call its resolveNouns() method, which in simplified form, does the following:
<ol>
<li>Calls the matchVocab() method on each noun phrase, which again, in simplified turns, takes care of any pronouns and calls matchName(tokens) on every Thing in scope for the current action to obtain a list of matching objects.</li>
<li>Calls buildObjLists() to construct a tentative list of matching objects.</li>
<li>Determines the actor if the noun we're looking for occupies the actor role (e.g. bob in a command that starts "bob, jump")</li>
<li>Select the objects from the available matches according to the grammatical mode (definite, indefinite, plural), by calling selectObjects() on each of the objects in our match list. Roughly speaking, this does the following:
<ol>
<li>If we're looking for a definite match (e.g. "THE BOOK") and we have one possible match, simply choose that match. If we have more than one, attempt to disambiguate among the possibilities by calling our disambiguate() method which:
<ol>
<li id='scoreobjs'>First calls scoreObjects() on the current action, which in turn:
<ol>
<li>Calls the <b>verify</b> routine for the current action on every item in the list of objects we want to choose between. If this is TIAction we're using multimethods for, first call the appropriate verifyWhatever() multimethod. In any case next call the verifyPreCondition() method on all PreConditions that apply to the object for the current action. Then call the verify() sections of any dobjFor() and (for TIActions) iobjFor() blocks.</li>
<li>Adds 100 to the resultant verify score (the lowest logicalRank that emerges from the verify routine).</li>
<li>Makes a note of this adjusted score and its associated verifyResult if it's better than any previous score we've encountered so far.</li>
<li>Note whether the verifyResult has resulted in a change of object via a remap.</li>
<li>Makes a note of which object came out best in whichever role we're currently interested in.</li>
<li>Calls scoreObject() on any object we're interested, which adds the object's vocabLikelihood to the score and carries out a couple of other tweaks in special circumstances.</li>
</ol></li>
<li>Sorts the objects in descending order of score.</li>
<li>If the number of objects with the highest score is the number of objects we're looking for, then selects them.</li>
<li>Otherwise, if we have too many best matches, throws a disambiguation error so the parser can ask the player to clarify their choice.</li>
</ol></li>
<li>If we're looking for an indefinite match (e.g. "TWO BOOKS) calls scoreObjects() on the action and sorts the result in descending order of score then chooses the first however many objects we want.</li>
<li>If we're looking for a match to ALL, simply select all the matching objects.</li>
</ol></li>
<li>Goes back and re-resolve any ALL lists.  For two-object commands, resolving ALL in one slot sometimes depends on resolving the
bject in the other slot first.</li>
<li>Resolves any reflexives.</li>
<li>Check for any empty roles (such as a missing indirect object for a TIAction) and throws an error if it finds one.</li>
<li>Calls buildObjLists() again to  Clear out the old object lists, then build them anew.  The old object lists were tentative, before disambiguation; we want to  replace them now with the final lists.</li>
</ol></li>
<li>If any errors are encountered, notes the first curable one and then continues interating through the list of commands.</li>
</ol></li>
</li> 
<li>If the previous step failed to find any resolvabe commands, try treating the player's input as the answer to any outstanding parser queries that don't take precedence over a new command.</li>
<li>If we still don't have any resolvable commands and this is the first command on the line and there is a conversation currently in progress (gPlayerChar.currentInterlocutor isn't nil), and the player character can still talk to their current interlocutor and the player character's current interlocutor allows implicit say commands, then treat the player's input as an implicit SAY command.</li>
<li>Otherwise, if the first word of the command doesn't match a possible verb, try parsing it as a noun phrase and, if that works, make the noun the direct object of our default action (GO TO for a Room or EXAMINE for any other thing), provided our defaultActions property is true (as it is by default).</li>
<li>If we've applied a spelling correction, and the command match didn't consume the entire input, make sure what's left of the input has a valid parsing as another command.  This ensures that we don't get a false positive by excessively shortening a command, which we can sometimes do by substituting a word like "then" for another word.</li>
<li> If we didn't find a parsing at all, issue a generic "I don't understand" error.  If we found a parsing, but not a resolution, reject it if it's a spelling correction.  We only want completely clean spelling corrections, without any errors.</li>
<li>If, one the other hand, the parser has found a resolvable command, we now execute it:
<ol>
<li>First ensure that we don't have multiple objects occupying a slot that the action's grammar (VerbRule) defines as only allowing a single object (singleDobj, singleIobj). If we do, then reject the command and explain the problem.</li>
<li>Otherwise, execute the <a href='##command'>command</a> by calling its exec() method. This is outcome we hope will occur in the majority of cases.</li>
<li>If this wasn't the last command on the command line, go back and parse the next one.</li>
</ol></li>
<li>If, however, we were unable to find a valid command, see if our command list contains a curable command, i.e. a command that could be rectified by the player responding to parser query.</li>
<li>If we can't find a curable command, try applying the spelling corrector. If that works, try executing the corrected command </li>
<li>If all has failed, throw an error and report the problem to the player and then stop trying to pause this command.</li>
</ol>

<h2 id="command">Executing the Command</h2>

<p>Once the initial parsing has resolved the player's command to an
action and a set of objects the action should act on (if there are any; for an IAction or most SystemActions
there plainly won't be), the Parser calls the appropriate Command object's exec() method, which:</p>
<ol>
<li>Carries out a number of housekeeping tasks, such as resetting a number of values, which need not detain us here.</li>
<li>Calls execGroup(cmd) on the relevant action to give it a chance to act on the entire group of objects involved (e.g. if the command was TAKE ALL or DROP THE PEN, THE GREEN BOOK AND THE GLASS KEY). In the library this does nothing on any actions part from GIVE TO and SHOW TO, where it resets a couple of properties used to summarise the effects of the action.</li>
<li>If there are no noun roles (because this is an intransitive action) just run our <a href='#execiter'>execIter()</a> method for this action.</li>
<li>Otherwise, first combine any duplicate direct objects into a single object (this is relevant if, for example, the player has types X LEAVES, TWIGS, TREES and BRANCHES and these are all synonyms for the same Decoration object).</li>
<li>Get the matches for each role (DirectObject, IndirecObject, etc.)</li>
<li>Sort the roles into canonical order (DirectObject, IndirecObject, AccessoryObject)</li>
<li>Call our execCombos() method for each set of objects in each role, starting with the DirectObject role: this method does the following for each set of objects:
<ol>
<li>Sets the current object for this role.</li>
<li>If there's more than one role, recursively call execCombos() for the next role.</li>
<li id="execiter">Otherwise, if we have reached the final role, call execIter(list), where <i>list</i> is a list in the form [action, dobj, iobj...]. This it turn does the following:
<li>Gives the special verb manager the opportunity to veto this command if we've been executing a <a href='../manual/specialaction.htm'>SpecialVerb</a>.
</li>Calls preAction(list) on the current actor (for example, to allow it to veto the action if the actor is bound or blindfolded).</li>
<li>Calls execDoer(list). This finds the list of <a href='../manual/doer.htm'>Doers</a> that match this action and its current set of objects (as specified in <i>list</i> and <a href='#doer'>executes</a> the one with the highest priority. This will lead to the bulk of the action handling on this turn.</li>
</ol></li>
<li id='post-action'> After the current Doer/Action has finished dealing with the action, Command.exec() resumes control by carrying out some post-action processing.
<ol>
<li>Call reportAction() on the action that's just been executed, which in turn displays any pending implicit action reports and then calls the appropriate report method, reportDobjWhatever, on the last direct object the action acted on, in order to display a default summary report of the action (for any objects whose action() method didn't display anything).</li>

<li>Display all the afterReports that were created by calls to reportAfter() during execution of the action.</li>
</ol></li>
<li>Next carry out the afterAction() routine for the current action, unless it's a SystemAction or the action failed. This does the following:
<ol>
<li>If the lighting conditions change, display a description of current location if it's now lit or announce the onset of darkness if it's now dark.</li>
<li>Call afterAction() on all current <a href='../manual/scene.htm'>Scenes</a>.
<li>Call notifyAfter() on the actor's current Room. This first calls the Room's roomAfterAction() method and then calls regionAfterAction() on all the regions that contain the Room.</li>
<li>Call afterAction() on every object currently in scope for the actor.</li>
</ol></li>
<li>Call turnSequence() on the current action. This does the following:
<ol>
<li>Calls regionDaemon() on every region that contains the player character's current room.</li>
<li>Calls roomDaemon() on the player character's current room.</li>
<li>Calls executeTurn() on the eventManager object, which executes all current Events (Fuses and Daemons) in order of their priority, along with the sceneManager, which activates and deactivates Scenes as appropriate and calls the eachTurn() method on every active Scene and the actorSchedule, which calls the takeTurn() method on every Actor, which in turn carries out a number of Actor related housekeeping tasks including, if the actor hasn't conversed this turn:
<ul> 
<li>Trigger the relevant NodeContinuationTopic if the actor is the player character's current interlocutor, or</li>
<li>Failing that, trigger the actor's highest priority AgendaItem, if any, or</li>
<li>Failing that, call the doScript() method on the actor's current ActorState.</li>
</ul></li>
<li>Advances the turn counter.</li>
</ol>
</li>
<li>Call advanceTime() on the current action. This does nothing in the main library but is provided as a hook for the
<a href='../../extensions/docs/objtime.htm'>Objective Time</a> extension to use to add to the time taken by implicit actions.</li>
</ol>
<p>Tbis completes the action cycle. At this point the game will return to the start of the <a href='#maincommand'>main command loop</a>.</p>

<br>

<h2 id="doer">The Doer</h2>
<p>Once the current Command has identfied the appropriate <a href='../manual/doer.htm'>Doer</a> to handle the command, it calls that Doer's exec(curCommand) command, where <i>curCommand</i> is the current Command object. If the actor for the current command is the player character, we carry out various housekeeping tasks and allow the Doer to redirect the action to a different action, before calling our execAction() method. Otherwise we call handleCommand on the actor (who would then be a Non-Player Character). The normal result of calling execAction is to call our current action's exec(curCmd) method.</p>
<p>In sum a Doer, can intervene to change the action into something completely different, handle it itself, or stop the action althogether but the usual outcome is that the Doer will pass the command straight through to the action's exec() method.</p>

<h2 id="action">Carrying Out the Action</h2>
<p>As just stated, in most cases the relevant Doer will pass control to the appropriate action's exec(cmd) method, where <i>cmd</i> is the current <a href='#commandobj'>Command object</a>. What happens then depends on what type of action it is: SystemAction, IAction, TIAction or whatever, but we'll start with what virtually all actions do in common.</p>

<h3>exec(cmd)</h3>
<p>Action.exec(cmd) mostly does the following:</p>
<ol>
<li>Resets actionFailed to nil.</li>
<li>Resets scopeList to an empty list.</li>
<li>Sets libGlobal.curActor to cmd.actor.</li>
<li>Notes the actor's current room in the action's oldRoom property.</li>
<li>Notes that room's illumination state (lit or unlit) in the action's wasIlluminated property.</li>
<li>Executes the action-processing cycle by calling <a href='#execcycle'>execCycle(cmd)</a>.</li>
</ol>
<p>A few types of action vary this slightly:</p>
<ul>
<li><b>LiteralAction</b>s additionally store cmd.dobj.name (their literal object) in their <code>literal</code> property.</li>
<li><b>TopicAction</b>s additionally store cmd.dobj (the current topic) in their <code>curTopic</code> property.</li>
<li><b>NumericAction</b>s additionally store cmd.dobj.numVal (the numeric value associated with the action) in their <code>num</code> property.</li>
<li><b>SystemAction</b>.exec(cmd) simply calls execCycle(cmd) without doing anything else.</li>
<li>A few specific actions defined in the library do their own thing in exec(cmd). These include Again, ExamineOrGoto, TakeFrom (which calls inherited(cmd) on one comditional branch) and TellTo.</li>
</ul>

<h3 id = 'execcycle'>execCycle(cmd)</h3>
<p>Tbis does the following:<p>
<ol>
<li id='beforeaction'>Unless it's a SystemAction, TAction or TIAction, first calls beforeAction(), which in turn:
<ol>
<li>Calls checkActionPreconditions() and stops the action if this returns nil.</li>
<li>Calls actorAction() on the current actor.</li> 
<li>Calls notifyBefore() on the sceneManager, which calls beforeAction() on any current Scenes..</li>
<li>Calls notifyBefore() on the actor's current room. This in turn:
<ol>
<li>Calls roomBeforeAction() on the room.</li>
<li>Calls regionBeforeAction() on every Region that (directly or indirectly) contains the room.</li>
</ol></li>
<li>Calls buildScopeList() to build the scope list for the current action if it hasn't already been built.</li>
<li>Calls beforeAction() on every item in the scope list.</li>
</ol></li>
<li>Calls <a href='#execaction'>execAction(cmd)</a>.</li>
<li>If the action is repeatable, stores a clone of the action at libGlobal.lastAction.</li>
</ol>

<p><b>SystemAction</b> omits step 1. A <b>TravelAction</b> first sets its <code>direction</code> property to cmd.verbProd.dirMatch.dir (the direction entered by the player) unless it already has a non-nil <code>predefinedDirection</code> property. A <b>TAction</b> or <b>TIAction</b> first checks whether ALL was used with an action for which allowAll is nil, and if so displays a message saying that the current command does not allow ALL and then stops the action; they also both call beforeAction() at a later point, during execAction().</p>

<h3 id="execaction">execAction(cmd)</h3>
<p>How things proceed from now on depend on the kind of action. Broadly speaking we may divide actions into Type 1 Actions that don't involve any physical game objects (or at least, don't have any grammar slots for them in their VerbRule) and Type 2 Actions that do. Type 1 Actions include SystemAction, IAction, TravelAction, TopicAction, LiteralAction and NumericAction. Type 2 Actions include all the rest: TAction, TIAction, TopicTAction, LiteralTAction and NumericTAction. For Type 2 Actions the details of what happens is defined on the dobjFor() and, for TIActions, iobjFor() blocks of the objects (or classes of object) involved. Type 1 Actions are handled in their execAction(cmd) method.<p>

<p><b>Type 1 Actions</b> (SystemAction, IAction, TravelAction, TopicAction, LiteralAction and NumericAction)</p>
<p>For these types of action, what happens is defined by the execAction() method of the relevant Action object in a way that will vary from Action to Action. This method may call other methods on the Action object relevant to the specific action and/or methods on some physical game objects. An ImplicitConversationAction (a subclass of TopicAction), for example, will call handleTopic() on the player character's current interlocutor, which a TravelAction may well end up call the travelVia() method of an TravelConnector, which in turn will trigger various <a href='#travel'>travel notifications</a>.

<p>Remember that once a Type 1 Action's execAction() has finished its work, control will return to the Command object's exec() method to carry out the <a href='#post-action'>post-action</a> processing.</b>

<p><b>Type 2 Actions</b> (TAction, TIAction, TopicTAction, LiteralTAction, NumericTAction)</b>
<p>From this point on, a Type 2 Action mainly co-ordinates calling the appropriate preCond, verify, check, and action methods on the objects involved in the command, although this will be via a series of methods we'll outline below.</p>
<p>TopicTAction, LiteralTAction and NumericTAction first ensure that the physical game object involved in the command is moved to the direct object slot and the topic, literal or number to the indirect object slot, regardless of the grammatical form of the command issued by the player (such as ASK BOB ABOUT TROUBLES, or WRITE FOO ON PAPER). This ensures that the action handling that follows can assume that the direct object is the Thing or Thing-derived object involved in the action, which in turn means that the relevant methods can always be called on the direct object.</p>
<p>Type 2 Actions then call <code>notePronounAntecedent()</code> on the object(s) (dobj and possibly iobj) involved in the command so that if the player refers to the same object(s) with a pronoun in the following command (e.g. X BOOK followed by TAKE IT) the parser will know what the player is referring to.</p>
<p>Finally, execAction() calls execResolvedAction() to handle what comes next.</p>

<h3 id="execresolved">execResolvedAction()</h3>
<p>This is similar for all Type 2 Actions, except that TIActions have to call methods on both the objects involved in the command. The steps are:</p>
<ol>
<li>Create a new LookUpTable called verifyTab to store our verify results.</li>
<li>Obtain the verify results for current direct object. If we're a TIAction we also do the same for the indirect object; which comes first depends on the value of resolveIobjFirst for this Action. Note that the verify routines for this action were previously called by <a href='#scoreobjs'>scoreObjects()</a> to help the parser choose which objects the player meant. This time round the Action calls verifyObjRole(obj, role) on each of the objects (direct object, and if there is one, indirect object) to ascertain whether the action can go ahead. If verifyObjRole() returns nil, the action is stopped at this point and we skip to the <a href='#post-action'>post-action</a> processing. The steps followed by verifyObjRole() are:
<ol>
<li>Set up a new LookUpTable, then call verify(obj, role) and store the result in the local variable verResult; verify(obj, role) does the following:
<ol>
<li>Clears out any existing verify table</li>
<li>Determines which object properties to use depending on the role (DirectObject, IndirectObject, AccessoryObject or ActorRole).</li>
<li>Calls  obj.remap(D|I|A)obj to check is we should remap to a different object in this role; if so replace the current object with the object we're remapping to.</li>
<li>If the object is a Decoration (obj.isDecoration is true) and we're not one of obj's decorationActions, change the verify prop we would otherwise have used to verify(D|I|A)objDefault.</li>
<li>If we're a TIAction on which multi-method handling has been enabled, call the appropriate multi-method, e.g. verifyWhateverAction(dobj, iobj, obj). This may add verify results to our verify table.</li>
<li>Call obj.(verifyProp) where <i>verifyProp</i> is the appropriate verify property (e.g. &amp;verifyDobjPutIn) for this object in this role. This may add verify results to our verify table.</li>
<li>If we don't yet have a verify table, create a new one now.</li>
<li>If our verifyTable doesn't contain an entry for obj, create one now (a 'logical' result with a logical rank of 100).</li>
<li>Iterate over all the preConditions defined on obj for this action in this role and call their verifyPrecondition(obj) method, which replace the verify result in our verify table if it's a worse result.</li>
<li>Return the entry for obj in our verify table. This will the worst result, i.e. the one with the lowest logical rank. (The method that adds entries to a verify table only replaces an entry if the replacement is a 'worse' one).</li>
</ol></li>
<li>If the verify result doesn't allow the action (verResult.allowAction == nil), then note the failure message.</li>
<li>If we're testing the direct object of the command and this action is iterating over more than one direct object,
then announce the object name, unless announceMultiVerify (a property of the Action object) is nil.</li>
<li>If this is an implicit action, add a failing implicit action report ('first trying to whatever') to the implicit action reports for this action.</li>
<li>If we have a failure message, display it.</li>
<li>If the action failed, note that it did.</li>
<li>If we don't want a failed action to count as a turn (failedActionCountsAsTurn is nil for this Action), throw an <code>abort</code> signal to skip the post-action processing.</li>
<li>If the action failed, return nil to our caller.</li>
<li>Otherwise, if this is an implicit action and our best verify result doesn't allow implicit actions (because it's <code>nonObvious</code> or <code>dangerous</code> throw an abortImplicit signal to abort the implicit action.</li>
<li>Otherwise, if our worst verify result allows the action to go ahead, return true to our caller.</li>
</ol></li>
<li>If gameMain.beforeRunsBeforeCheck is nil, the order of the next two steps is reversed.</li>
<li>Calls beforeAction(), which does the following: 
<ol>
<li>Calls checkActionPreconditions() and stops the action if this returns nil. Note that checkActionPreconditions calls checkPreCondition on the PreConditions defined on the Action rather than those defined on any of the objects involved in the action.</li>
<li>Calls actorAction() on the current actor.</li> 
<li>Calls notifyBefore() on the sceneManager, which calls beforeAction() on any current Scenes.</li>
<li>Calls notifyBefore() on the actor's current room. This in turn:
<ol>
<li>Calls roomBeforeAction() on the room.</li>
<li>Calls regionBeforeAction() on every Region that (directly or indirectly) contains the room.</li>
</ol></li>
</li>
<li>Calls checkAction(). If this returns nil, stop the action here and jump to the <a href='#post-action'>post-action</a> processing; checkAction() does the following:
<ol>
<li>Calls checkPreCondition on all the preconditions related to this action defined on the dobj (and, for a TIAction, the iobj) of this action. If any fail, return nil to fail the action.</li>
<li>If this a TIAction that has been enabled for multi-methods, calls check([dobj, iob], &amp;mmcheck) to call the appropriate multi-method, checkWhateverAction(dobj, iobj). 
<li>Calle the relevant check(dobj, checkDobjProp) and, if this is a TIAction, check(iobj, checkIobjProp), and if either returns nil, return nil to halt the action at this point; checkDobjProp is property pointer of the form &amp;checkDobjActionName; the check() method does the following:
<ol>
<li>If this a TIAction that has been enabled for multi-methods and check has been called with a list [dobj, iobj] for its first argument, calls the appropriate multi-method, checkWhateverAction(dobj, iobj), and captures the output to checkMsg.</li>
<li>Otherwise, call the check method passed in the second argument on the object passed in the first (e.g. call dobj.checkDobjWhateverAction()) and capture the output to checkMsg.</li>
<li>If checkMsg is neither nil nor the empty string '', then:
<ol>
<li>If we're iterating over several objects and this action's announceMultiCheck property is true but its reportFailureAfterSuccess property is nil, display the name of the current object.</li>
<li>If this is an implicit action, add a failure ('trying to...) message to our implicit action reports.</li>
<li>Otherwise flush our implicit action reports (display any pending ones and then empty the list).</li>
<li>If reportFailureAfterSuccess is true, call reportAfter(checkMsg) to add out failure message to the list of reports to be displayed in the post-action handling.</li>
<li>Otherwise, simply display our checkMsg.</li>
<li>Note that the action failed, unless the latest check routine called on an object used the noHalt macro.</li>
</li>Return nil to indicate that the action failed the check stage, unless the latest check routine called on an object used the noHalt macro.</li>
</ol></li>
<li>Otherwise, return true to allow the action to proceed.</li>
</ol></li>
</ol></li>
<li>Calls doActionOnce() to carry out the action with the current direct object (and, for a TIAction, the current indirect object).</li>
</ol>


<h2>doActionOnce()</h2>
<p>If we've reached this point, the action can proceed, employing the following steps:</p>
<ol>
<li>If announceMultiAction is true for this action we're iterating over multiple direct objects for this command, then announce the name of the current direct object.</li>
<li>If this is an implicit action, add it to the list of pending implicit action reports.</li>
<li>If this is a TIAction and this action has been enabled for multi-methods, execute the appropriate multi-method, actionWhateverAction(dob, iobj) and note whether this output any text.</li>
<li>Provided the previous step didn't use the skip macro, call the appropriate action method on the direct object, e.g. dobj.actionDobjWhatever(), and note whether this output any text.</li>
<li>Certain actions, such as GoThrough, ClimbUp, ClimbDown, PushTravel and Enter, may cause the actor to travel from one room to another, in which case a number of <a href='#travel'>travel notifications</a> will be triggered at this point.</li>
<li>Add the current direct object to the list of objects this action has added on.</li>
<li>If this is a TIAction, call the appropriate action method on the indirect object, e.g. iobj.actionIobjWhatever(), and note whether this output any text.</li>
<li>If none of the methods called above output any text then add the current indirect object to the list of objects we've acted on and add the current direct object to the list of objects to be reported on at the report stage.</li>
<li>Return true to tell our caller we completed the action successfully.</li>
</ol>
<p>Control now returns to the Command object's exec() method to carry out the <a href='#post-action'>post-action</a> processing.</p>
<br>
<h2 id="travel">Travel notifications</h2>
<p>TravelAction(s) and some TActions such as GoThrough, ClimbUp, ClimbDown and PushTravel which trigger travel via a TravelConnector (which can include a Room) will or may call a TravelConnector's travelVia() method to execute the travel. This will trigger a further series of notifactions at the action handling point in the command execution cycle, some of which may be used to interrupt the action. The sequence of event triggered by travelVia is as follows:</p>
<ol>
<li>Check any travel barriers defined on the TravelConnector. If any fail canTravelerPass() call their explainTravelBarrier() to explain travel isn't possible and halt the action at this point.</li>
<li>Carry out our travel connector's beforeTravel notifications:
<ol>
<li>Call beforeTravel(actor, connector) on every object that's in scope for the actor.</li>
<li>Call regionBeforeTravel(actor, connector) on every region containing the actor's pre-travel current room.</li>
</ol></li>
<li>Call noteTraversal(actor) on the TravelConnector. If the actor is the player character this will cause the TravelConnector's travelDesc to be displayed.</li>
<li>If this TravelConnector doesn't go anywhere (because its destination is nil) then if noteTraversal() hasn't displayed anything, then call sayNoDestination to say it doesn't lead anywhere, and it any case stop at this point.</li>
<li>Call notifyDeparture() on the room the actor is leaving; this does the following:
<ol>
<li>Calls travelerLeaving(traveler, dest) on the Room the actor is about to leave.</li>
<li>Calls travelerLeaving(traveler,dest) on any Regions the actor is about to leave.</li>
<li>Calls travelerEnteringtraveler,dest) on any Regions the actor is about to enter.</li>
<li>Calls travelerEnteringtraveler,dest) on the Room the actor is about to enter.</li>
</ol></li>
<li>Move the traveler into the destination room.</li>
<li>Display the description of the room the traveler has just arrived in, provided the traveler is or contains the player character and the new room's lookAroundOnEntering property is true (which it normally will be).</li>
<li>Provided the traveler has arrived in a new room, carry out the after travel notifications:
<ol>
<li>Call afterTravel(actor, connector) on every item in the actor's new scope.</li>
<li>Call regionAfterTravel(actor, connector) on every Region that contains the actor's new location.</li>
</ol></li>
</ol>

<h2 id='summary'>Summary</h2>

<p>For a <b>System Action</b> the important steps are displaying any prompt daemons, accepting the player commmand, parsing it to a System Action (like QUIT or UNDO), passing it through a Doer (which could in theory intervene but normally shouldn't) and then carrying out the command in the Action object's execAction (c) method. User code will very seldom if at all need to intervene at any of the stages. Perhaps the most important to bear in mind with System Actions is not to rule them out by accident, as might happen in the course of a scene when the player character is immobilized and restricted to only a couple of basic actions. In this case you should normally ensure that all System Actions are still allowed (you can check for <code>gAction.ofKind(SystemAction)</code>, otherwise players may become mightily annoyed with you if they can't even QUIT, let alone UNDO, SAVE or RESTORE.</p>

<p>All other actions are otherwise Type 1 actions or Type 2 Actions.</p>

<p><b>Type 1 Actions</b> are those not involving any physical game objects (Things) as either direct object or indirect object. These include IAction, TravelAction, TopicAction, LiteralAction and NumericalAction</p>

<p><b>Type 2 Actions</b> are those that do involve a physical game objects (Things) as either direct object or indirect object (or both). These include TAction, TIAction, TopicTAction, LiteralTAction and NumericTAction. Some TActions (e.g. GO THROUGH) also involve travel.</p>

<p>The table below lists the main points of the command action cycle of game authors in the order in which they occur. Some sections relate only to Type 1 actions, Type 2 actions, or actions involving travel. Readers can view the steps peculiar each by clicking on the little triangle beside the relevant section to expand them, as they can also do to expand various other summary headings.</p>

<ol>
<li>Any pending score notifications are displayed.</li>
<li>Any current PromptDaemons are executed.</li>
<li>The command prompt is displayed and the player's command read.</li>
<li>Any active StringPreParsers get a chance to amend the player's input and/or stop the action.</li>
<li>The command is parsed to identify the actor, action, and objects involved. A SpecialVerb can intervene 
to translate an non-standard verb into one the parser can understand.</li>
<li>To identity the objects (Things) involved the parser may call the verify() routines for the relevant action 
on the direct and, if there is on, indirect object of the action to choose the objects with the highest score (
highest logical rank).
<li>The command is encapsulated in a Command object.</li>
<li>The Commmand object calls the preAction() method on the actor (which could stop the action at this point).</li>
<li>The Command object chooses the most suitable Doer to handle the command and calls its execAction() method. 
This can modify or stop the action, but normally passes it straight through to the appropriate Action object 
by calling the Action object's execAction() method.</li>
<li><details><summary>Type 1 Actions only carry out their before action processing at this point:</summary>
<ol>
<li>Call checkActionPreconditions() and stops the action if this returns nil.</li>
<li>Call actorAction() on the current actor.</li> 
<li>Call notifyBefore() on the sceneManager, which calls beforeAction() on any current Scenes..</li>
<li>Call roomBeforeAction() on the room.</li>
<li>Call regionBeforeAction() on every Region that (directly or indirectly) contains the room.</li>
<li>Call buildScopeList() to build the scope list for the current action if it hasn't already been built.</li>
<li>Call beforeAction() on every item in the scope list.</li>
</ol>
</details></li>
<li>Type 1 Actions only then execute the action directly in their execAction method.</li>
<li><details><summary>Type 1 Travel Actions (e.g. GO EAST) carry out travel notifications and travel at this point:</summary>
<ol>
<li>Check any travel barriers defined on the TravelConnector. If any fail canTravelerPass() call their explainTravelBarrier() to explain travel isn't possible and halt the action at this point.</li>
<li>Carry out our travel connector's beforeTravel notifications:
<ol>
<li>Call beforeTravel(actor, connector) on every object that's in scope for the actor.</li>
<li>Call regionBeforeTravel(actor, connector) on every region containing the actor's pre-travel current room.</li>
</ol></li>
<li>Call noteTraversal(actor) on the TravelConnector. If the actor is the player character this will cause the TravelConnector's travelDesc to be displayed.</li>
<li>If this TravelConnector doesn't go anywhere (because its destination is nil) then if noteTraversal() hasn't displayed anything, then call sayNoDestination to say it doesn't lead anywhere, and it any case stop at this point.</li>
<li>Call notifyDeparture() on the room the actor is leaving; this does the following:
<ol>
<li>Calls travelerLeaving(traveler, dest) on the Room the actor is about to leave.</li>
<li>Calls travelerLeaving(traveler,dest) on any Regions the actor is about to leave.</li>
<li>Calls travelerEnteringtraveler,dest) on any Regions the actor is about to enter.</li>
<li>Calls travelerEnteringtraveler,dest) on the Room the actor is about to enter.</li>
</ol></li>
<li>Move the traveler into the destination room.</li>
<li>Display the description of the room the traveler has just arrived in, provided the traveler is or contains the player character and the new room's lookAroundOnEntering property is true (which it normally will be).</li>
<li>Provided the traveler has arrived in a new room, carry out the after travel notifications:
<ol>
<li>Call afterTravel(actor, connector) on every item in the actor's new scope.</li>
<li>Call regionAfterTravel(actor, connector) on every Region that contains the actor's new location.</li>
</ol></details></li>
<li><details><summary>Type 2 Actions only then call appropriate methods on the direct and (if there is one) indirect objects of the action:</summary>
<ol>
<li>Calls  obj.remap(D|I|A)obj to check is we should remap to a different object in this role; if so replace the current object with the object we're remapping to.</li>
<li>If the object is a Decoration (obj.isDecoration is true) and we're not one of obj's decorationActions, change the verify prop we would otherwise have used to verify(D|I|A)objDefault.</li>
<li>If we're a TIAction on which multi-method handling has been enabled, call the appropriate multi-method, e.g. verifyWhateverAction(dobj, iobj, obj).</li>
<li>Call the verify routines on the direct and (if there is one) indirect object. These may rule out the action at 
this point.</li>
<li>Call the verifyPrecondition() method on all the preconditions attached to the direct (and, if any, indirect) objects 
of the action. These may also rule out the action.</li>
<li>If <code>gameMain.beforeRunsBeforeCheck</code> is nil, the order of the next two steps is reversed.</code>
<li><details><summary>Carry out the before action handling:</summary>
<ol>
<li>Calls checkActionPreconditions() and stops the action if this returns nil. Note that checkActionPreconditions calls checkPreCondition on the PreConditions defined on the Action rather than those defined on any of the objects involved in the action.</li>
<li>Calls actorAction() on the current actor.</li> 
<li>Calls notifyBefore() on the sceneManager, which calls beforeAction() on any current Scenes.</li>
<li>Calls notifyBefore() on the actor's current room. This in turn:
<ol>
<li>Calls roomBeforeAction() on the room.</li>
<li>Calls regionBeforeAction() on every Region that (directly or indirectly) contains the room.</li>
</ol></details></li>
<li><details><summary>Carry out the check routines</summary>
<ol>
<li>Call checkPreCondition on all the preconditions related to this action defined on the dobj (and, for a TIAction, the iobj) of this action. If any fail, return nil to fail the action.</li>
<li>If this a TIAction that has been enabled for multi-methods, call the appropriate multi-method, checkWhateverAction(dobj, iobj).</li> 
<li>Call the check() methods for the current action on the direct and (if any) indirect object of the command.</li>
<li>If any of the above methods output any text, halt the output at this point (unless a <code>noHalt</code> was used).</li>
</ol></details></li>
<li>Call the action() methods for the current action on the direct and (if any) indirect object of the command.</li>
<li><details><summary>If the action involves travel (e.g., GO THROUGH DOOR) this will also involve travel notifications:</summary>
<ol>
<li>Check any travel barriers defined on the TravelConnector. If any fail canTravelerPass() call their explainTravelBarrier() to explain travel isn't possible and halt the action at this point.</li>
<li>Carry out our travel connector's beforeTravel notifications:
<ol>
<li>Call beforeTravel(actor, connector) on every object that's in scope for the actor.</li>
<li>Call regionBeforeTravel(actor, connector) on every region containing the actor's pre-travel current room.</li>
</ol></li>
<li>Call noteTraversal(actor) on the TravelConnector. If the actor is the player character this will cause the TravelConnector's travelDesc to be displayed.</li>
<li>If this TravelConnector doesn't go anywhere (because its destination is nil) then if noteTraversal() hasn't displayed anything, then call sayNoDestination to say it doesn't lead anywhere, and it any case stop at this point.</li>
<li>Call notifyDeparture() on the room the actor is leaving; this does the following:
<ol>
<li>Call travelerLeaving(traveler, dest) on the Room the actor is about to leave.</li>
<li>Call travelerLeaving(traveler,dest) on any Regions the actor is about to leave.</li>
<li>Call travelerEnteringtraveler,dest) on any Regions the actor is about to enter.</li>
<li>Call travelerEnteringtraveler,dest) on the Room the actor is about to enter.</li>
</ol></li>
<li>Move the traveler into the destination room.</li>
<li>Display the description of the room the traveler has just arrived in, provided the traveler is or contains the player character and the new room's lookAroundOnEntering property is true (which it normally will be).</li>
<li>Provided the traveler has arrived in a new room, carry out the after travel notifications:
<ol>
<li>Call afterTravel(actor, connector) on every item in the actor's new scope.</li>
<li>Call regionAfterTravel(actor, connector) on every Region that contains the actor's new location.</li>
</ol></details></li>
<li>If nothing at the action stage has output any text, add the direct object to the list of direct objects to 
be reported on at the report stage.</li>
</ol>
</details></li>
<li><details><summary>Carry out the post-action processing</summary>
<ol>
<li>Call reportAction() on the action that's just been executed, which in turn displays any pending implicit action reports and then, for a Type 2 Action, calls the appropriate report method, reportDobjWhatever, on the last direct object the action acted on, in order to display a default summary report of the action (for any objects whose action() method didn't display anything).</li>

<li>Display all the afterReports that were created by calls to reportAfter() during execution of the action.</li>
<li>Next carry out the afterAction() routine for the current action, unless it's a SystemAction or the action failed. This does the following:
<ol>
<li>If the lighting conditions change, display a description of current location if it's now lit or announce the onset of darkness if it's now dark.</li>
<li>Call afterAction() on all current <a href='../manual/scene.htm'>Scenes</a>.
<li>Call notifyAfter() on the actor's current Room. This first calls the Room's roomAfterAction() method and then calls regionAfterAction() on all the regions that contain the Room.</li>
<li>Call afterAction() on every object currently in scope for the actor.</li>
</ol></li>
<li>Call turnSequence() on the current action. This does the following:
<ol>
<li>Calls regionDaemon() on every region that contains the player character's current room.</li>
<li>Calls roomDaemon() on the player character's current room.</li>
<li>Calls executeTurn() on the eventManager object, which executes all current Events (Fuses and Daemons) in order of their priority, along with the sceneManager, which activates and deactivates Scenes as appropriate and calls the eachTurn() method on every active Scene and the actorSchedule, which calls the takeTurn() method on every Actor, which in turn carries out a number of Actor related housekeeping tasks including, if the actor hasn't conversed this turn:
<ul> 
<li>Trigger the relevant NodeContinuationTopic if the actor is the player character's current interlocutor, or</li>
<li>Failing that, trigger the actor's highest priority AgendaItem, if any, or</li>
<li>Failing that, call the doScript() method on the actor's current ActorState.</li>
</ul></li>
<li>Advances the turn counter.</li>
</ol>
</li>
<li>Call advanceTime() on the current action. This does nothing in the main library but is provided as a hook for the
<a href='../../extensions/docs/objtime.htm'>Objective Time</a> extension to use to add to the time taken by implicit actions.</li>
</ol></details></li>
</ol>
<p>This completes the full command cycle.</p>





</div>
<hr class="navb"><div class="navb">
<i>TADS 3 Technical Manual</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="advtop.htm">Advanced Topics</a> &gt; 

The Command Execution Cycle
<br><span class="navnp"><a class="nav" href="advtop.htm"><i>Prev:</i> Advanced Topics</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="t3multimeth.htm"><i>Next:</i> Handling TIActions with Multi-Methods</a> &nbsp;&nbsp;&nbsp; </span>


</div>
</body>
</html>

