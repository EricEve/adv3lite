<!DOCTYPE html>
<html>


<head>
<title>Analysyis of a Transcript</title>
<link rel="stylesheet" href="techman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="depth.htm">Adv3Lite In Depth</a> &gt; 
Analysyis of a Transcript
<br><span class="navnp"><a class="nav" href="depth.htm"><i>Prev:</i> Adv3Lite In Depth</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="t3res.htm"><i>Next:</i> Action Results</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">
<h1>Analysyis of a Transcript<h1>

<h2>Anatomy of a Transcript</h2>
<p>When you start writing your own game and testing it, you'll find that the library takes care of a good deal of the work for you. Mainly, that's a benefit, but sometimes it can become a problem, particularly when the library doesn't quite do what you want but you can't see how to change it. That's where this article may be able to help. Immediately below we give <a href='#sampleTrans'>a sample transcript</a> from a simple TADS 3/adv3Lite game. Next to the various parts of the transcript you'll find numbered links, like this <a href='#showintro'>[1]</a>. Clicking on the link will take you to an explanation of where the game's response to player input (the 'message') is coming from, often with some hints on how to change it, or a reference to some other documentation that explores the relevant library feature in more detail.</p>

<p>This article also contains the full <a href='#sourcecode'>source code</a> for the game from which the sample transcript was taken. Where appropriate the explanations for a given feature are linked to the appropriate object in the source code. This lets you click on a numbered link in the transcript to read an explanation, and then click on a link in the explanation to see the relevant part of the TADS 3 source.</p>

<p>Parts of this sample game are deliberately unpolished; showing examples of things <i>not</i> working properly can sometimes be more instructive than showing everything working properly, and if you're using this sample transcript to locate things that aren't quite right in your own game, it may help if they match things that aren't quite right in this sample game.</p>

<p>Reading this article through sequentially from beginning to end may not be the best way to use it. You may find it more helpful to read through the sample transcript below, and then click on the numbered link when you see something that interests you.</p>
<br>
<hr>

<h2><a name='sampleTrans'>A Sample Transcript</a></h2>

<p><pre>
<a name='r1'>Welcome to this demo!</a>   <a href='#showintro'>[1]</a>

<b><a name='r2'>Box Room</a></b>   <a href=#roomname>[2]</a>
This large box room is strewn with junk. The only way out is via a door to the east.   <a href=#roomdesc>[3]</a>

A small square table stands in the middle of the room.   <a href=#specialdesc>[4]<a>

A large red box sits in the corner.   <a href=#specialdesc>[4]<a> 

You see a tennis ball, an old coat, an odd sock, and a small green book here.   <a href=#lister>[5]</a> 
On the small square table is a small blue box.    <a href=#lister>[5]</a>

<b><a name='r6'>&gt;about</a></b>   <a href=#cmdprompt>[6]</a>
This is just a brief demo game to illustrate where various messages come from in TADS 3.   
Or you could think of it as a high adventure with deep characterization, a riveting plot, 
and a myriad of amazing puzzles – except that if you do think of it this way you'll be 
sadly disappointed! <a href='#about'>[7]</a>

<b id='r8'>&gt;credits</b>
Put credits for the game here.
<a href='#credits'>[8]</a>

<b>&gt;x table</b>
On the small square table is a small blue box.   <a href=#lister>[5]</a>   

<b><a name='r9'>&gt;x red box</a></b>
It's large, red and box-shaped, and is currently closed.   <a href='#openableLister'>[9]</a> 

<b><a name='r10'>&gt;take box</a></b>
Which box do you mean, (1) the large red box or (2) the small blue box?  <a href='#disambig'>[10]</a>

<b>&gt;red</b>
Taken.   <a href='#defaultResponse'>[11]</a> 

<b>&gt;look in red box</b>
(first opening the large red box)   <a href='#implicit'>[12]</a>
The large red box contains an old teddy bear, a large black torch, and a red lego brick.   <a href=#lister>[5]</a> 

<b>&gt;take torch</b>
Taken.   <a href='#defaultResponse'>[11]</a> 

<b>&gt;drop box</b>
Dropped.   <a href='#defaultResponse'>[11]</a>

<b>&gt;look</b>
<b>Box Room</b>
This large box room is strewn with junk. The only way out is via a door to the east. 

A small square table stands in the middle of the room.   <a href=#specialdesc>[4]<a> 

You see a tennis ball, an old coat, an odd sock, a small green book, and a large 
red box (which contains an old teddy bear and a red lego brick) here. On the small 
square table is a small blue box. 

<b>&gt;x junk</b>
All sorts of stuff, the accumulated detritus of decades, mostly not worth bothering with. 

<b><a name='r12a'>&gt;search junk</a></b>
The junk isn’t important.   <a href='#notImportant'>[12a]</a>

<b><a name='r13'>&gt;take table</a></b>
The small square table is too heavy. <a href='#tooHeavy'>[13]</a>

<b><a name='r14'>&gt;look in blue box</a></b>
(first unlocking the small blue box, then opening it)   <a href='#implicit'>[12]</a>
In the small blue box you see a yellow crayon, a red crayon, and a blue crayon.  <a href='#listgroup'>[14]</a> 

<a name='r15'><b>&gt;x book</b></a>
It's a copy of <i>Getting Started in TADS 6</i>. 

<b>&gt;read book</b>
Reading the book brings back happy memories of writing IF in your early twenties.   <a href='#readdesc'>[15]</a>
With TADS 6 all you had to do was fill in a form specifying the genre of the game, 
the names of a few key NPCs, and the median age of the target audience, select a 
plot-type from a drop-down list, and then hit either the “generate two-hour version 
for IF-Comp” button or “generate long version” button, and a bug-free, typo-free 
TADS 6 game would be instantly created for you. Shame so many diehards on 
intfiction.org thought this took all the fun out of creating IF.

<b>&gt;wear sock</b>
(first taking the odd sock)   <a href='#implicit'>[12]</a>
Okay, you’re now wearing the odd sock. 

<a name='r16'><b>&gt;wear sock</b></a>
You’re already wearing it.   <a href='#verify'>[16]</a> 

<a name='r17'><b>&gt;i</b></a>
You are carrying a large black torch, and you’re wearing an odd sock.   <a href='#inventory'>[17]</a>

<b>&gt;e</b>
(first opening the door)   <a href='#implicit'>[12]</a>

<a name='r18'><b>Landing</b></a>
Emerging from the box room you find yourself standing at the top of a flight of   <a href='#roomfirst'>[18]</a> 
stairs leading down to the south. 

<b>&gt;look</b>
<b>Landing</b>
A flight of stairs leads down to the south, while a door leads into the box room 
just to the west. 

<a name='r19'><b>&gt;d</b></a>
You walk briskly down the stairs.   <a href='#travelDesc'>[19]</a> 

<a name='r20'><b>Hall (East End)</b></a>
This large hall continues to the west. A flight of stairs leads up to the north.

You can see a rubber duck here.

In the hall west end you see a wooden chair.

Mavis is sitting on a wooden chair at the far end of the hall. 

Harold is in the hall west end. <a href='#remoteactor'>[20]</a>


<a name='r21'><b>&gt;x harold</b></a>
He's about your height and build, and really looks quite a lot like you. Since he's   <a href='#sightSize'>[21]</a>
your twin brother this is not altogether surprising. 

<b>&gt;x mavis</b>
She’s too far away to make out any detail.   <a href='#sightSize'>[21]</a> 

<a name='r22'><b>&gt;x dfwv</b></a>
You see no dfwv here.   <a href='#oops'>[22]</a> 

If this was an accidental misspelling, you can correct it by typing OOPS followed by the
corrected word now. Any time the story points out an unknown word, you can correct a
misspelling using OOPS as your next command.

<b>&gt;oops duck</b>  
It's yellow. 

<p><pre>
<b>&gt;x buck</b>
<i>(x <b>duck)</b></i> <a href='#spell'>[22a]</a>
It’s yellow.
</pre>

<b>&gt;w</b>
<a name='r23'><b>Hall (West End)</b></a>
This large hall continues to the east. A flight of stairs leads down to the south. 

At the far end of the hall, you see a rubber duck.   <a href='#inRoomName'>[23]</a> 

Harold is here. <a href='#locActor'>[24]</a>

Mavis is sitting on the wooden chair.  <a href='#locActor'>[24]</a> 

<a name='r25'><b>&gt;exits</b></a>
Obvious exits lead south; and east, back to the hall (east end).   <a href='#exits'>[25]</a>

(You can control the exit listings with the EXITS command. EXITS STATUS shows the exit 
list in the status line, EXITS LOOK shows a full exit list in each room description, 
EXITS ON shows both, and EXITS OFF turns off both kinds of exit lists.) 

<a name='r26'><b>&gt;x mavis</b></a>
She's a funny old woman, when all's said and done. She is sitting on the wooden chair.   <a href='#posture'>[26]</a> 
She's rocking back and forth in her chair moaning “Woe!” 

<a name='r27'><b>&gt;ask mavis about mavis</b></a>
The old woman simply rocks back and forth in her chair moaning, “Woe, woe, woe is me!”   <a href='#noResponse'>[27]</a>

<a name='r28'><b>&gt;talk to harold</b></a>
“Hello, Harold!” you say.   <a href='#greeting'>[28]</a>

“Hi there!” he replies. 

(You could ask him about Mavis.) 
  <a href='#topics'>[29]</a>
(Enumeration and/or hyperlinking of topic suggestions can be toggled on and off using the commands ENUM SUGGS and/or HYPER SUGGS respectively. )
<a name='r30'><b>&gt;a mavis</b></a>
“What's up with Mavis?” you ask.   <a href='#asktopic'>[30]</a>

“She's inconsolable – she can't find her favourite photograph of Buster Keaton,” he tells you. 

<a name='r31'><b>&gt;topics</b></a>
You could ask him about the photo.    <a href='#topics2'>[31]</a>

<a name='r32'><b>&gt;a photo</b></a>
“Where did Mavis leave the photo?” you ask.   <a href='#stopEvent'>[32]</a>

“I think it may be in the cellar; but it's dark down there so I couldn't find it,” he tells you. 

<b>&gt;g</b>
“You think Mavis's photo of Buster Keaton may be in the cellar?” you ask.   <a href='#stopEvent'>[32]</a>

“That's right,” he nods, “Be a good fellow and get it for her, her moaning is getting
 on my nerves.” 

<b>&gt;g</b>
“You think Mavis's photo of Buster Keaton may be in the cellar?” you ask.   <a href='#stopEvent'>[32]</a>

“That's right,” he nods, “Be a good fellow and get it for her, her moaning is getting 
on my nerves.” 

<a name='r33'><b>&gt;ask harold about american foreign policy</b></a>
“I think you'd better help poor Mavis before we discuss that,” he suggests.  <a href='#defresponse'>[33]</a> 

<a name='r34'><b>&gt;bye</b></a>
The conversation is ended.   <a href='#bye'>[34]</a>

<a name='r35'><b>&gt;d</b></a>
<b>In the dark</b>   <a href='#dark'>[35]</a>
It’s pitch black. 

<a name='r36'><b>&gt;turn on torch</b></a>
Done.   <a href='#torchon'>[36]</a>   

<b>Cellar</b>   <a href='#nowlight'>[37]</a>
The cellar is almost bare. A flight of stairs leads up to the north. 

You see a photo of Buster Keaton here. 

<b>&gt;x photo</b>
The picture shows Buster Keaton posing in a Confederate uniform in <i>The General</i>. 

<a name='r38'><b>&gt;take it</b></a>
Taken. 
(Your score has just increased by ten points.)   <a href='#score'>[38]</a>
(If you’d prefer not to be notified about score changes in the future, type NOTIFY OFF.) 

<a name='r39'><b>&gt;i</b></a>
You are carrying a large black torch (providing light) and a photo of Buster Keaton,   <a href='#providing'>[39]</a>
and you’re wearing an odd sock. 

<a name='r40'><b>&gt;e</b>
You can’t go that way. From here you could go north.   <a href='#cantgo'>[40]</a> 

<a name='r41'><b>&gt;turn off torch</b></a>
Done. 

You are plunged into darkness.   <a href='#darkannounce'>[41]</a> 

<a name='r42'<b>&gt;e</b></a>
It’s too dark to see where you’re going. <a href='#darkgo'>[42]</a>

From here you could go north.  

<a name='r43'><b>&gt;up</b></a>
<b>Hall (West End)</b>
This large hall continues to the east. A flight of stairs leads down to the south. 

At the far end of the hall, you see a rubber duck. 

Harold is standing here. 

Mavis is sitting on the wooden chair. 

You turn to Mavis and hand her the photograph of Buster Keaton. She snatches it       <a href='#fuse'>[43]</a> 
eagerly from your grasp, instantly stops her moaning, and showers the actor's picture 
with delighted kisses.

(Your score has just increased by ten points.)

*** You have made an old lady very happy ***   <a href='#winning'>[44]</a>

In 42 moves, you have scored 20 of a possible 20 points.   <a href='#finalscore'>[45]</a> 

Would you like to RESTORE a saved position, RESTART the story, UNDO the last move,   <a href='#winning'>[44]</a> 
see your FULL SCORE, or QUIT?

<a name='r46'><b>&gt;full score</b></a>
In 42 moves, you have scored 20 of a possible 20 points. Your score consists of:   <a href='#fullscore'>[46]</a>
	10 points for retrieving the photograph
	10 points for making Mavis happy


Would you like to RESTORE a saved position, RESTART the story, UNDO the last move, 
see your FULL SCORE, or QUIT?

<a name='r47'><b>&gt;q</b></a>
Thanks for playing!   <a href='#goodbye'>[47]</a>
</pre></p>
<br>
<hr>


<h2>Explanations</h2>

<h3  id='showintro'>[1] showIntro()</h3>

<p>"Welcome to this demo!" This text is generated from the showIntro() method of <a href=#gameMain>gameMain</a>. This is something you'll normally want to customize.</p>
<a href='#r1'>[back]</a>
<br>
<h3 id='roomname'>[2] roomTitle</a></h3>

<p>The name of the room printed at the head of its description is taken from the room's 
roomTitle property. Normally this is assigned through the Room template, as in <a href='#boxRoom'>boxRoom</a>, the starting location here.</p>

<p>By default the room name is shown in bold. If you want to change this you can do so by modifying roomnameStyleTag; e.g. to make the room name appear in italics in a fixed-spaced font:</p>

<p><pre>
modify roomnameStyleTag
    openText = '\n&lt;i&gt;&lt;FONT FACE=TADS-TYPEWRITER&gt;'
    closeText = '&lt;/FONT&gt;&lt;/i&gt;\n'
;
</pre></p>

<p>We could similarly modify statusroomStyleTag to change the way the room name is displayed in the status line (although here we would probably override the htmlOpenText and htmlCloseText properties instead.)</p>
<a href='#r2'>[back]</a>
<br>
<h3><a name=roomdesc>[3] Room Description</a></h3>
<p>The normal description of a room is taken from its desc property. Normally this is assigned through the template, as shown in the <a href='#boxRoom'>boxRoom</a> example.</p>
<p>Normally a room's description is diplayed in the standard font for the game. This can be changed by modifying roomdescStyleTag. For example to make room decriptions display in the same colours as the status line you could do this:</p>
<p><pre>
modify roomdescStyleTag
    openText = "&lt;font bgcolor=statusbg color=statustext&gt;"
    closeText = "&lt;/font&gt;"
;
</pre></p>
<p>The fact that you <i>can</i> do this doesn't make it a particularly good idea, however, not least because the room description will then be displayed differently from all the items listed within the room (but perhaps this is what someone, somewhere will want for some mysterious purpose).</p>
<a href='#r2'>[back]</a>
<br>

<h3 id='specialdesc'>[4] specialDesc & initSpecialDesc</h3>
<p>Items listed in separate paragraphs, like the <a href='#table'>table</a> and the <a href='#largebox'>large red box</a> here, probably
have either a specialDesc or an initSpecialDesc (the latter applies until the object is moved).
In the example the red box (which can be moved) has an initSpecialDesc and the table
(which can't) simply has a specialDesc. The difference between the table and the red box becomes
more apparent later in the transcript: once the box is taken and dropped again its initSpecialDesc is no longer used, and the box is listed among the other miscellaneous items in the room. The table can't be moved at all, however. </p> 
<a href='#r2'>[back]</a>
<br>

<h3 id='lister'>[5] Lists of Objects</h3>
<p>The lists of objects lying on the floor and on the table are automatically generated as part of the room description by listContents(), which is in turn called by lookAroundWithin() (both defined on Thing, but in this instance called on the Room), all defined on Thing but called on the room in question. These are fairly complex methods that you probably won't want to mess with too much. If you want to change the way lists are displayed, see the <i>Library Manual</i> article on <a href='../manual/lister.htm'>Lists and Listers</a>.</p>
<a href='#r2'>[back]</a>
<br> 

<h3><a name=cmdprompt>[6] Command Prompt</a></h3>
<p>Many, perhaps most, games don't bother to customize the command prompt, but if you're looking to do so it may help to know that it's generated by libMessages.mainCommandPrompt(which). So if you did want to change it, you could do something like this (though preferably in better taste):</p>

<p><pre>
CustomMessages
   [    
      Msg(command prompt,'\b&lt;b&gt;&lt;FONT COLOR=RED&gt;What next?&lt;/FONT&gt;&lt;/b&gt; ')    
   ]    
;
</pre></p>

<p>By default what the player types is then displayed in bold black type (with the standard black on white display &mdash; with other colour schemes this may differ). This may be customised in two different places. One way would be to modify InputDef. For example, to make the player's input appear simply in italics we could use:</p>

<p><pre>
modify InputDef
    beginInputFont() { "&lt;i&gt;"; }    
    endInputFont() { "&lt;/i&gt;"; }
;
</pre></p>
<p>Alternatively, we could modify inputlineStyleTag; e.g. to make what the player types appear in bold green print we could do this:</p>

<p><pre>
modify inputlineStyleTag
    htmlOpenText = '&lt;b&gt;&lt;font color=green&gt;'
    htmlCloseText = '&lt;/font&lt;/b&gt;' 
;
</pre></p>
<p>Some caution is needed doing this kind of thing, however, since what might look well enough on your interpreter with the set of colours you're using might look quite dreadful, or even barely visible, on a different interpreter using a different colour scheme.</p>
<p>Note also that the default behaviour of InputDef.beginInputFont() and InputDef.endInputFont() is simply to invoke the opening and closing text of the inputLineStyleTag &mdash; so there's no point trying to modify the input font in both places (any changes to InputDef will take precedence).</p>
<a href='#r6'>[back]</a>
<br>

<h3 id='about'>[7] About Text</h3>
<p>The game's ABOUT text, which has been customized here, is defined in the showAbout() method of the <a href='#versionInfo'>versionInfo</a> object. In a more complex game this might launch a menu offering different kinds of information about the game; here just a simple message is displayed. This is something you will always want to customize in your own games.</p>
<a href='#r6'>[back]</a>
<br>

<h3 id='credits'>[8] Credits</h3>
<p>Although it probably should have been, the credits information for this game has not been customised. The place to do this is in the showCredit() method of the the <a href='#versionInfo'>versionInfo</a> object.</p>
<a href='#r8'>[back]</a>
<br>
<h3 id='openableLister'>[9] OpenableContentsLister</h3>
<p>The text "It's large, red and box-shaped, and is currently closed" all comes from the desc property . Note especially that the "and is currently closed" part of the description is only there because it's been defined as part of the desc property  of the <a href='#largeBox'>largeBox</a> object; it's not something the library adds automatically. If the box were open, though, the library would add a notice to that effect as part of the introduction to listing the box's contents. You could dispense with that notice by setting the red box's openStatusReportable property to nil, or make is use a pronoun rather than a noun ("It's open and contains..." rather than "The large red box is open and contains...") by setting openStatusReportable to UsePronoun. Alternatively, you could customise the whole introduction by overriding descContentsLister.showListPrefix().</p>
<a href='#r9'>[back]</a>
<br>

<h3 id='disambig'>[10] Disambiguation Prompt</h3>
<p>This disambiguation prompt is being displayed because there's more than one object in scope that matches the noun 'box', in this case the <a href='#largeBox'>large red box</a> and the <a href='#smallBox'>small blue box</a>. The two boxes have quite distinct names, so that it's no trouble for the player to select one or the other (as in the next command). The parser uses the disambigName property of the objects concerned to list the objects the player is to choose from in a disambiguation prompt. By default, the disambigName is the same as the name. In special cases you might want to override disambigName to give distinct names for disambiguation purposes for objects you otherwise want to be named alike. But note that the parser also assigns each possibility a number so the player could also answer the question here by typimg 1 or 2. You can disable the enumeration of disambiguation options here by setting <code>libGlobal.enumerateDisambigOptions</code> to nil (players can also toggle this option on and off with the DISAMBIG ENUM command).</p>

<p>You probaby wouldn't want to, but you could customize the 'Which do you mean' question by using a CustomMessages object, e.g.,:
<p><pre>
   CustomMessages
     [
        Msg(which do you mean, 'which of these were you trying to refer to']
     ]
   ;  
</pre>

<a href='#r10'>[back]</a>
<br>

<h3 id='defaultResponse'>[11] Default Action Report</h3>
<p>Laconic messages like 'Done' or 'Taken' or 'Dropped' are generally produced by the report  methods for the appropriate actions defined on Thing. For further details of this see the <a href='t3res.htm#report'>Report</a> section of the article on <a href't3res.htm'>Action Results.</a></p>
<p>To change this on an individual object, simply override the appropriate action method on the object in question, calling its inherited handling and then adding your own custom message: e.g.</p>

<p><pre>
vase: Thing 'antique vase; delicate'
   "It looks incredibly delicate. "
   dobjFor(Drop)
   {
	   action()
	   {
		   inherited;
		   actionReport('You put the vase down very carefully. ');
	   }
   }
;
</pre></p>

<p>Your custom message will automatically displace anything produce by a report method, so you don't have to worry about both messages appearing. What may be trickier is ensuring that your custom message isn't displayed in the event of an <a href='#implicit'>implicit action</a>. Using <code>actionReport()</code> takes care of that, otherwise you would need to do something like this:</p>

<p><pre>
vase: Thing 'antique vase; delicate'
   "It looks incredibly delicate. "
   dobjFor(Drop)
   {
	   action()
	   {
		   inherited;
		   if(!gAction.isImplicit)
		      "You put the vase down very carefully. ";
	   }
   }
;
</pre></p>
<p>If you want to make a global change, e.g. from the laconic "Dropped" to the slightly less laconic "Put down carefully", you can either use the above technique to modify Thing appropriately, or else modify the message used by the library. You could do this by overriding the report method:</p>

<p><pre>
    dobjFor(Drop)
    {
       report(} { say ('Put down carefully. | {I} {put} &lt;&lt;gActionListStr&gt;&gt; down very carefully. '); }
    }
</pre></p>

<p>Or you could change it with:</p>
<p><pre>
CustomMessages
  [
     Msg(report drop, 'Put down carefully. | {I} put {1} down very carefully. ')
  ]
;
</pre></p>

<p>
<a href='#r10'>[back]</a></p>
<br>

<h3><a name='implicit'>[12] Implicit Action Announcements</a></h3>
<p>Messages like "(first opening the large red box)" or "(first opening the door)" are implicit action announcements. That is they are messages from the parser telling the player that the parser has just carried out one or more commands on the player's behalf; these commands will generally have been executed in order to enable the command the player actually typed to be carried out. For example, in order to look inside the large red box it's necessary to open the red box, and in order to go through the door it's first necessary to open the door.</p>

<p>In a typical TADS 3 game most implicit actions will be generated by <a href='t3res.htm#precond'>preconditions</a>, such as objOpen. If you want to customize these implicit action reports, see the article on <a href='t3imp_action.htm'>Implicit Action Reports</a> later in this Technical Manual.</p>
<br>

<h3><a name='notImportant'>[12a] Not Important Message</a></h3>
<p>The <a=href='#junk'>junk</a> object is evidentally a Decoration. What's displayed here is a Decoration's default 'not important' message. This can be changed by overriding notImportantMsg on individual Decorations (or on Decoration itself, if so desired).</p>
<a href='#r12a'>[back]</a>
<br>

<h3><a name='tooHeavy'>[13] Too Heavy Message</a></h3>
<p>The <a href='#table'>table</a> has evidently been defined of class Heavy, since this is the standard message that is displayed when a player tries to take or move an object of that class. Such messages are generated from either <a href='t3res.htm#verify'>verify()</a>
 or <a href='t3res.htm#check'>check()</a>, depending on the action in question, but to change them you simply need to override cannotTakeMsgand/or cannotPutMsg and/or cannotMoveMsg, on the object in question (or the class). By default the first too of these are the same ("The X is too heavy. ") for a Heavy object.</p>
<a href='#r13'>[back]</a>
<br>

<h3><a name='listgroup'>[14] List Order</a></h3>
<p>We can ensure we keep the three crayons listed together by overriding the listOrder property of the <a href='#crayon'>Crayon</a> class to something other than the default value of 100. To ensure that the library attempted an implicit UNLOCK command when we looked in the small blue book we added the objUnlocked preoondition to its dobjFor(Open) handling, otherwise the action would have failed, telling us that the box was locked. </p>

<p><pre>
++ smallBox: LockableContainer 'small blue box' 
    dobjFor(Open)
    {
        preCond = [touchObj, objUnlocked]
    }
;
</pre>


<a href='#r14'>[back]</a>
<br>

<h3 id='readdesc'>[15] readDesc</h3>

<p>You'll notice that X BOOK and READ BOOK give different responses here (which is not the case for most objects). That's because the <a href='#greenBook'>green book</a> has been given a separate readDesc property.</p>
<a href='#r15'>[back]</a>
<br>

<h3><a name='verify'>[16] Verify Message</a></h3>
<p>The first time the player types WEAR SOCK the parser is quite happy to carry out the command, since the <a href='#sock'>sock</a> is both within scope and defined as being a Wearable. On the second occasion, however, the parser complains that the sock is already being worn; this type of message, where an action is not (or is not yet or is no longer) reasonable is typically generated by a <a href='t3res.htm#verify'>verify routine</a>.</p>
<a href='#r16'>[back]</a>
<br>

<h3><a name='inventory'>[17] Inventory Listing</a></h3>
<p>This is a typical inventory listing, produced by the inventoryLister, which is a specialised type of <a href='../manual/lister.htm#itemlister'>itemLister</a>. 
<a href='#r17'>[back]</a>
<br>

<h3><a name='roomfirst'>[18] roomFirstDesc</a></h3> 
<p>Ordinarily it would be a bad idea to include any mention of how you arrived at the location in a room descrption, since this will generally not read well if the room is approached from some other direction, or the room is subsequently examined again. In this case, however, the <a href='#landing'>landing</a> is described differently when it is examined the second time. This is achieved by using roomFirstDesc to display a different description the first time the room is examined. This works well here since the first time the landing is examined the player character <i>can</i> only have just entered it from the box room.</p>
<a href='#r18'>[back]</a>
<br>

<h3><a name='travelDesc'>[19] travelDesc</a></h3>
<p>There's more than one way we could produce this description of the player character walking down the stairs. Perhaps the simplest, which is used in the code below, is to define the message we want on its travelDesc property.</p>
<a href='#r19'>[back]</a>
<br>
<h3><a name='remoteactor'>[20] Remote Descriptions</a></h3>

<p>The hall is represented in this game by two different locations, <a href='#hallEast'>hallEast</a> and <a href='#hallWest'>hallWest</a>, linked by being in the same <a href='#dConn'>SenseRegion</a>. The implementation is less than perfect, however, as can be seen from the transcript.</p>

<p>First, the man is described and the chair are both decribed as being "in the hall west end", which doesn't read at all well, but is the best the library can do from the roomTitle. We can improve things by giving the hallWest room a name as well: </p>

<p><pre>
  hallWest: Room 'Hall (West End)' 'west end of the hall[n]'
    "This large hall continues to the east. A flight of stairs leads down to the
    south. "
    east = hallEast  
    south = hallStairsDown
    down asExit(south) 
    ...
</pre>

<p><p>Here the first single-quoted string in the Room template is the roomTitle, which is displayed in the status line and at the head of a room description. The second single-quoted string is the vocab, in which we've just specified the name.</p> 

<p>The next issue is the chair is mentioned twice, first as something being in the west end of the hall, and then as what Mavis is sitting on. We could probably do without the first of these. There's more than one way we could get rid of it, but for now we'll make the chair not listed if Mavis is on it:</p>

<p><pre>
+ woodenChair: Platform 'wooden chair'
    canLieOnMe = nil
    sightSize = large
    
   isListed = !(mavis.isIn(self)) // add this
;
</pre>    
<p>With these changes we get:</p>

<p><pre>
<b>Hall (East End)</b>
This large hall continues to the west. A flight of stairs leads up to the north.

You can see a rubber duck here.

Mavis is sitting on a wooden chair at the far end of the hall.

Harold is in the west end of the hall.
</pre>

<p>The description of Mavis here hasn't been automatically generated by the library here (by default adv3Lite has no concept of postures like sitting, although we can add them via the <a href='../../extensions/docs/postures.htm'>postures</a> extension). Here, we've generated the text about Mavis through defining the remoteSpecialDesc method on her <a href='#hermit'>ActorState</a>:

<p><a href='#mavis'>Mavis</a> starts out in an unresponsive <a href='#hermit'>ActorState</a> (for details of ActorStates see the article on <a href='t3actor.htm'>Creating Dynamic Characters</a>). All we need to do is to add the following to the definition of this ActorState:</p>
<p><pre>
    remoteSpecialDesc(pov)
    {
        "Mavis is sitting on the wooden chair at the far end of the hall. ";
    }
    
    specialDesc = "Mavis is sitting on the wooden chair. " 
</pre></p>

 We could improve the description of Harold by doing something similar on his ActorState:</p>
 
 <p><pre>
 + hWaiting: ActorState
    specialDesc = "Harold is standing by Mavis's chair. "  
    isInitState = true 
 </pre>
 
 <p>You may be wondering why we suggest defining both a specialDesc and a remoteSpecialDesc on Mavis's ActorState but only a specialDesc on Harold's. The reason is that we want what's said about Mavis to vary according to whether the player character is viewing her from her location or from the other end of the hall, whereas the statement that Harold is standing by her chair will fit either perspective equally well. If remoteSpecialDesc(pov) is not otherwise defined, it simply uses specialDesc.

<p>Then we'll get:</p>
<p><pre>
<b>Hall (East End)</b>
This large hall continues to the west. A flight of stairs leads up to the north. 

You see a rubber duck here. 

Harold is standing at the far end of the hall. 

Mavis is sitting on the wooden chair at the far end of the hall. 
</pre></p>
<a href='#r20'>[back]</a>
<br>

<h3><a name='sightSize'>[21] Remote Descriptions and sightSize</a></h3>
<p>It shouldn't be too difficult to see where the description of Harold is coming from; it's simply the desc property defined on the <a href='#harold'>harold</a> object. But why aren't we seeing a description for <a href='#mavis'>Mavis</a>?</p>
<p>The answer is quite simple: the game defines <code>sightSize = large</code> on Harold (which means we can get a description of him from a distance, including from a remote location, as here), but we have omitted to make the same change on Mavis. Mavis's sightSize is thus still at medium (the default), which means that although she can be seen from a distance, any attempt to view her from a remote location will be met with the response "She’s too far away to make out any detail."</p>
<p>If we want to change this we have several options, depending on what we want to achieve.</p>
<p>First, we could just define <code>sightSize = large</code> on Mavis as well as Harold, so that we'd get her normal description too.</p>
<p>Second, if we're happy that Mavis is too small to be clearly discerned from a distance, but we want to customize the message that's shown in such circumstances, we use a CustomMessages object:<p>
<p><pre>
CustomMessages
    [
        Msg(too far away to see detail, 'You haven\'t got your glasses on, so you can\'t really make
            out much of {the dobj} from this distance. ')
    ]
;
</pre></p>

<p>The third possibility is to override remoteDesc(pov) on Mavis, which will define how she's described from a remote point of view regardless of her sight size. For example:</q>
<p><pre>
mavis: Person 'old mavis/woman' 'Mavis' @woodenChair
    "She's a funny old woman, when all's said and done. "
    remoteDesc(pov)  {  "She's looks quite aged. "; }
    isProperName = true
    isHer = true
    posture = sitting
;
</pre></p>
<p>This would give us (when carried out in the east end of the hall):<p>
<p><pre>
<b>&gt;x mavis</b>
She looks quite aged. 
</pre></p>
<a href='#r21'>[back]</a>
<br>
<h3 id='oops'>[22] Oops</h3>
<p>The first part of the message, saying that you can't see ny dfwv" (a gross typo for "duck" here) here (meaning either that the game doesn't recognize it or there's no matching object in scope), is produced from the <code>display()</code> method of <code>UnmatchedNounError</code>, which is probably the easiest place to customize it. If you wanted instead to use a CustomMessages object the message key in this instance is <code>unmatched noun</code>.

<p>The second half (which would only be displayed the first time an unknown word is encountered) comes from oopsTip.tipText. For more on Tips see the <a href='t3tips.htm'>Tips</a> article in this <i>Technical Manual</i>.</p>

<h3 id='spell'>[22a] Spelling Correction</h3>

<p>We needed quite a gross typo to demonstrate this, since a more modest one would probably be caught and corrected by the spelling corrector, for example:</p>

<p><pre>
<b>&gt;x buck</b>
<i>(x <b>duck)</b></i>
It’s yellow.
</pre>
<p>The spelling corrector is usually helpful, but some game authors and players may occasionally find it a mixed blessing. To disable it we can set Parser.autoSpell to nil.

<a href='#r22'>[back]</a>
<br>

<h3><a name='inRoomName'>[23] inRoomName</a></h3>
<p>The rubber duck is sensibly described as being "At the far end of the hall". This is because <a href='#hallEast'>hallEast</a> defines inRoomName(pov) accordingly; the inRoomName(pov) method can be used to define a prepositional phrase (e.g. "at the far end of the hall", "further up the street" or "in the north side of the field") used to describe the whereabouts of objects in this location when they're viewed from another location. The point-of-view parameter (pov) can be used to vary this phrase according to where we're looking from; we could, for example, check <code>pov.getOutermostRoom</code> to decide whether to describe a particular stretch of street as "further up the street to the north" or "further down the street to the south".</p>
<a href='#r23'>[back]</a>
<br>

<h3><a name='locActor'>[24] Listing Actors</a></h3>
<p>Here <a href='#harold'>Harold</a> and <a href='#mavis'>Mavis</a> are shown in the standard form for listing actors who are present in the player character's location (rather than actors in a remote location, as we discussed above). Tracing where the library actually generates these descriptions is a little complex; here's the chain:</p>
<ol>
<li>In the first instance, the way an actor is listed in the player character's location is determined by that actor's specialDesc. It can therefore be directly overridden here, but the standard library behaviour is to call the corresponding method on the actor's current ActorState. If the Actor is stateless or its current ActorState doesn't define a specialDesc then the actorSpecialDesc defined on the Actor will be used. Unless the actor will never change ActorStates during the course of the game it's generally a good idea not to override specialDesc directly on the actor; override actorSpecialDesc instead.</li>
<li>By default, actorSpecialDesc displays "So-and-so is here" if the actor is directly located in a Room, or "So-and-so is in/on the whatever" if the Actor is in or one a nested room such as a Booth or Platform.</li>
<li>The listing of actors in a remote location follows a similar logic. This is determined by that actor's remoteSpecialDesc(pov) method, which in turn calls the remoteSpecialDesc(pov) method on the actor's current ActorState (if there is one and it defines a SpecialDesc property). If Actor.remoteSpecialDesc(pov) can't obtain a remote specialDesc from the ActorState, it falls back on the actorRemoteSpecialDesc(pov) method, which by default produces an output of the form "So-and-So is in the wherever" or "So-and-so is in/on the whatever in the wherever", constructing these messages from the whatever's remoteObjInName(pov) and wherever's inRoomName(pov). Game code should avoid overriding remoteSpecialDesc(pov) on the Actor and usually refrain from overriding actorRemoteSpecialDesc(pov) unless this the way the actor's remote presence is describec is never going to vary by ActorState</li>
<li>If the ActorState's remoteSpecialDesc(pov) is used it defaults to that ActorState's specialDesc.</li>
</ol>
<p>So, for Harold, Actor.specialDesc() and Actor.remoteSpecialDesc(pov) both end up using his ActorState's specialDesc, while, for Mavis, we get her ActorState's specialDesc when the player character is in her end of the hall and its remoteSpecialDesc() when he's in the other end of the hall.</p>



<p> In the vast majority of cases, you'll probably want to stick to overriding the specialDesc (and, where appropriate, removeSpecialDesc(pov)) property of the relevant ActorState. For example, we might define the specialDescs on <a href='#harold'>Harold's</a> initial ActorState and <a href='#mavis'>Mavis's</a> thus:</p>
<p><pre>
mavis: Actor 'Mavis; old; woman; her' @woodenChair
    "She's a funny old woman, when all's said and done. "

    remoteDesc(pov)  {  "She looks quite aged. "; }
;

+ ActorState
    isInitState = true
    noResponse = "The old woman simply rocks back and forth in her chair
        moaning, &lt;q&gt;Woe, woe, woe is me!&lt;/q&gt;"
    stateDesc = "She's rocking back and forth in her chair moaning <q>Woe!</q> "
    
    specialDesc = "Mavis is slumped miserably in the wooden chair.  " 
    
    remoteSpecialDesc(pov)
    {
        "Mavis is sitting on a wooden chair at the far end of the hall. "; 
    }
    
;

harold: Actor 'Harold;;twin man brother;him' @hallWest
    "He's about your height and build, and really looks quite a lot like you.
    Since he's your twin brother this is not altogether surprising. "
    sightSize = large    
;


+ hWaiting: ActorState
    specialDesc = "Harold is hovering anxiously over Mavis.  "  // improved version
    isInitState = true
;

+ hTalking: ActorState
    specialDesc = "Harold is standing by Mavis's chair, waiting for you to
        speak. "    
;

</pre></p>
<p>To produce:</p>
<p><pre>
<b>Hall (West End)</b>
This large hall continues to the east. A flight of stairs leads down to the south. 

At the far end of the hall, you see a rubber duck. 

Harold is hovering anxiously over Mavis. 

Mavis is slumped miserably in the wooden chair. 
</pre></p>

<a href='#r23'>[back]</a>
<br>

<h3 id='exits'>[25] Listing Exits</h3>
<p>First, the news in brief: the list of exits is produced by exitLister.showExitsCommand(), which in turn calls chain of methods too complex to go into here. Suffice to say that if you want to customize the way exits are listed, that's the place to look. It's also exitLister.showExitsCommand() that's responsible for displaying the explanation of the EXITS command ("You can control the exit listings with the EXITS command. EXITS STATUS ...") the first time it's used. This explanation is handled via DMsg(explain exits on off, '...') so you could use a CustomMessages object to change it if you wished.</p>

<a href='#r25'>[back]</a>
<br>

<h3><a name='posture'>[26] Actor Posture</a></h3>
<p>Although you can use the <a href='../../extensions/docs/postures.htm'>postures</a> extension if you wish, most adv3Lite games probably don't need it, and we're not using it here, which means our little game is making no attempt to keep track of anyone's posture. All the descriptions of npcs' postures are coming from the specialDesc, stateDesc, or their remote equivalents (remoteSpecialDesc and remoteDesc) on their current ActorState, which is both more flexible and easier to use in most cases. We can use one of these properties to describe our actor as standing, sitting, slouching, lounging, pacing up and down or anything else we like and simply change ActorState when we want to change this description, or we could even change the descrption within the same ActorState with a little extra custom coding, such as:</p>

<p><pre>
  + hWaitingState
     specialDesc = "Harold is &lt;&lt;one of&gt;&gt;standing&lt;&lt;or&gt;hovering&lt;&lt;or&gt;&gt;pacing around&lt;&lt;shuffled&gt;&gt; Mavis' chair. "
  ;
</pre>

<p>Or else something like:</p>

<p><pre>
  + hWaitingState
     specialDesc = "Harold is &lt;&lt;postureDesc&gt;&gt; Mavis' chair. "
     
     postureDesc = (gRevealed('foobar') ? 'hovering' : 'standing')
  ;  
</pre> 
<p>Where <code>postureDesc</code> is a custom property we've just devised for the purpose. In this little game, though, we'll keep things simple.</p>


<a href='#r26'>[back]</a>
<br>

<h3><a name='noResponse'>[27] noResponse</a></h3>

<p>There are several ways in which Mavis's response, or rather non-response - could have been generated here, but given the nature of her (non-)response and the absence of any greeting protocols, the most likely (and most probable) way this has been generated is from the noResponse property of her <a href='#hermit'>ActorState</a>.</p>

<a href='#r27'>[back]</a>
<br>

<h3><a name='greeting'>[28] HelloTopic</a></h3>

<p><a href='#harold'>Harold</a> responds to the player character's greeting here because he's been given an explicit HelloTopic in his initially active ActorState. For a fuller explanation of this see the article on <a href='t3conv.htm#greeting'>Programming Conversations with NPCs</a>.</p>

<a href='#r28'>[back]</a>
<br>

<h3><a name='topics'>[29] Suggested Topics</a></h3>
<p>The explicit greeting command has resulted in a list of topics the player could try asking <a href='#harold'>Harold</a> about (here there's actually only one). The greeting triggers a call to suggestTopics(true) on the actor initiating the conversation (in this case, and in most others, the player character); it's the 'explicit' argument that's being called as true here. The suggestTopics method then calls suggestTopicsFor(self, explicit) on the actor who his being addressed (in this case Harold), which in turn calls suggestTopicsFor() on that actor's current ActorState (which should by now be Harold's InConversationState). This then calls the ActorState's showSuggestedTopics() method.</p>

<p>Here, Mavis is listed as a possible topic of conversation because there's a currently active <a href='#mavisask'>AskTopic<a> for mavis that has a <code>name</code> defined. There's also an AskTopic for the <a href='#photoask'>photo</a> that has a name, but it's not active yet since at this stage the player character doesn't know about the photo.</p>

<p>The message about the use of the various ENUM commands the player can use is generated by the explainOptions() method of suggestedTopicLister where it is produced by DMsg(explain enumerating and hyperlinking, '...') and DMsg(explain numbering, '...), which could both be customised with a <a href='../manual/message.htm#custmessage_idx'>CustomMessages</a> object if desired.</p>

<p>For a fuller explanation of all this see the article on <a href='t3conv.htm#suggest'>Programming Conversations with NPCs</a>.</p>
<a href='#r28'>[back]</a>
<br>

<h3><a name='asktopic'>[30] AskTopic</a></h3>
<p>Here we see a fairly standard kind of response from an <a href='#mavisask'>AskTopic<a>. This one informs the player character about the photograph and so needs to mark that object as known about so that the player can now refer to it in subsequent conversation. At the same time the player's curiosity about Mavis is exausted (that is, she won't appear as a suggested topic of conversation again.</p>

<p>For a fuller explanation of all this see the article on <a href='t3conv.htm#asktell'>Programming Conversations with NPCs</a>.</p>
<a href='#r30'>[back]</a>
<br>

<h3><a name='topics2'>[31] Explicit Topic Request</a></h3>
<p>We have just met a topic inventory display <a href='#topics'>above</a>. The procedure for producing it is much the same here, except that the output is not enclosed in parentheses (since it's the response to an explicit TOPICS command, not a by-product of a greetings command). One point to note is that the list has changed: the player character's curiosity about Mavis has been exhausted, but he now knows about the photograph, so that has become available to be asked about.</p>
<a href='#r30'>[back]</a>
<br>

<h3><a name='stopEvent'>[32] StopEventList</a></h3>
<p>Once again we see the output from an ordinary AskTopic, but this one appears also to be a <a href='#photoask'>StopEventList</a>, since we get a different response second time round, which repeats thereafter. See the article on <a href='t3conv.htm#sequential'>Programming Conversations with NPCs</a> for more information about providing sequential and random responses.</p>

<a href='#r32'>[back]</a>
<br>

<h3 id='defresponse'>[33] DefaultTopic</h3>
<p>The player is always likely to ask an NPC about topics for which the author has provided no specific response, as here. At least we can assume that the author of this game would not have thought to provide a response to asking Harold about American foreign policy, so this will almost certainly be the response from some kind of <a href='#deftopic'>DefaultTopic</a>. This one has the merit of keeping the player firmly focused on his next objective.</p>

<p>For more information on how DefaultTopics can be used in NPC conversations, see the article on <a href='t3conv.htm#default'>Programming Conversations with NPCs</a>.</p>
<a href='#r33'>[back]</a>
<br>

<h3 id='bye'>[34] Missing ByeTopic</h3>
<p>The rather abrupt "The conversation is ended." response occurs here because the author has forgotten to define an appropriate ByeTopic for Harold at this point. The response is defined on Actor.noGoodbyeResponseMsg so could be easily customised by overriding that property on the Actor class on or individual actors, but what we really ought to do is to define a ByeTopic and locate it in the <a href='#hTalking'>hTalking </a> ActorState:</p>
 
<p><pre>
++ ByeTopic
    "&lt;q&gt;Bye for now,&lt;/q&gt; you say.\b
    &lt;q&gt;See you soon,&lt;/q&gt; he replies. "
;
</pre></p>
<p>We'd then see:</p>
<p><pre>
<b>&gt;bye</b>
“Bye for now,” you say.

“See you soon,” he replies. 
</pre></p>

<p>For a more sophisticated implementation, we might want to provide a separate ImpByeTopic, LeaveByeTopic and so forth.</p>
<a href='#r34'>[back]</a>
<br>
<h3><a name='dark'>[35] Darkness</a></h3>
<p>There are two library default messages here, which we may as well take together. The first, 'In the dark', is the default value of roomDarkName. The second "It's pitch black" is likewise the default value of roomDarkDesc. These give respectively the name and the description of a location when there's not enough light present to see it by.</p>

<p>It's easy enough to customize both messages when appropriate, as it probably is here, since the player character is presumably at least aware that the stairs lead down into the cellar. So we might change the definition of the <a href='#cellar'>cellar</a> location thus:</p>

<p><pre>
cellar: DarkRoom 'Cellar'
    "The cellar is almost bare. A flight of stairs leads up to the north. "
    darkName = 'Cellar (in the dark)'
    darkDesc = "You're dimly aware of the flight of stairs leading back up,
        but otherwise it's too dark to see anything in here. "
    north = cellarStairs
    up asExit(north)    
;
</pre></p>
<p>We'd then get:</p
<p><pre>
<b>&gt;d</b>
<b>Cellar (in the dark)</b>
You're dimly aware of the flight of stairs leading back up, but otherwise it's 
too dark to see anything in here. 
</pre></p>
<p>Since the dark description now mentions the flight of stairs, it might be a good idea to define <code>visibleInDark = true</code> on the stairs object, so that the flight of stairs can be referred to by the player (e.g. CLIMB STAIRS) even in the absence of light.</p>

<a href='#r35'>[back]</a>
<br>

<h3 id='torchon'>[36] Torch Turned On Message</h3>
<p>This is simply the default message for turning something on, generated from reportDobjTurnOn(). The actual message used is If you wanted to customize it for a particular Flashlight you'd probably do so in its actionDobjTurnOn() (i.e. the action() method in the dobjFor(TurnOn) block).</p>

<a href='#r36'>[back]</a>
<br>

<h3 id='nowlight'>[37] A Newly Lit Location</h3>

<p>Turning on the torch also causes the room description to be re-displayed, now that the player character can see it. This is one of the things carried out by the afterAction() method of the current Action. Earlier in the cycle Action.exec() notes whether the Actor's location was located before the action was carried out. Action.afterAction() checks whether lighting conditions have changed, so requiring a new description of the newly-lit location or else an announcement of the onset of darkness.</p>
<a href='#r36'>[back]</a>
<br>

<h3 id='score'>[38] Score Notification</h3>

<p>We get this score notification because actionDobjTake() on the <a href='#photo'>photo</a> object calls awardPointsOnce() on an associated Achievement (a number of other methods might have had a similar effect, but this is the one that was used here). Using awardPointsOnce() prevents the player building up an inflated score by repeatedly dropping and taking the photo.</p>

<p> Whatever the precise method use to invoke the scoring, it will usually be routed through the addToScoreOnce() method of the Achievement which in turn calls the addToScore() function which in turn calls libScore.addToScore_(points, desc), which does most of the actual work. 
</p>

<p> The actual message announcing the change in score comes from scoreNotifier.checkNotification(), which only issues a score notification if libScore.scoreNotify.isOn is true. If it is,  libScore.firstScoreChange() is used if this is the first time a change of score is being notified in a game, or libScore.scoreChange() thereafter. Both these libScore.methods then call libScore.basicScoreChange() to announce the actual change in score, but libScore.firstScoreChange() then goes on to diplay the additional message "If you’d prefer not to be notified about score changes in the future, type NOTIFY OFF", via DMSg(first score change, '...').</p>

<a href='#r38'>[back]</a>
<br>

<h3 id='providing'>[39] State-Related Text</h3>

<p>We've already seen an <a href='#inventory'>inventory listing</a> before. What's new here is the text '(providing light)' following the name of the torch in the inventory listing. Without going into arcane details of the way various inventory listers go about their business, we can say that this text ultimately comes from the additionalInfo property of the LitUnlit State object, so that one way to customize it would be with the following:</p>

<p><pre>
modify LitUnlit
     additionalInfo = [[true, ' (currently switched on)']]   
;
</pre></p>
<p>We'd then see:</p>
<p><pre>
<b>&gt;i</b>
You are carrying a large black torch (currently switched on) and a photo of Buster 
Keaton, and you’re wearing an odd sock.
</pre></p>
<p>This is fine when the torch is the only light source in the game, but if there were multiple light sources it might not be so good, since this change would then apply to all of them. To allow for this we could make the more complicated change:</p>
<p><pre>

modify ItemLister
    listName(o)
    { 
        local oldLitInfo = LitUnlit.additionalInfo;
        try
        {
            if(o.providingLightMsg &amp;&amp; o.isLit)
                LitUnlit.additionalInfo = [[true, o.providingLightMsg]];
            return inherited(o);
        }
        finally
        {
            LitUnlit.additionalInfo = oldLitInfo;
        }        
    }
;


</pre></p>
<p>One could then override providingLightMsg on each and every light source that required a custom version.</p>

<p>See the <i>Adv3Lite Libary Manual</i> for a brief explanation of the <a href='../manual/thing.htm#manipulatevocab'>State</a> mechanism.</p>

<a href='#r39'>[back]</a>
<br>

<h3><a name='cantgo'>[40] Cannot Go That Way</a> </h3>
<p>This is the message you get when the player character tries to go in an unavailable direction. The message is generated by cannotGoThatWay() (called on the current room), which in turn first displays the room's cannotGoThatWayMsg, and then calls cannotGoShowExits(gActor) to list the exits that are available.</p>

<p>There are thus several places at which you can customize this, but two in particular are useful. If you want to change the first part of the message but leave the listing of exits as it is, then simply override cannotGoThatWayMsg, e.g.:</p>

<p><pre>
cellar: DarkRoom 'Cellar'
    "The cellar is almost bare. A flight of stairs leads up to the north. " 
    north = cellarStairs
    up asExit(north)    
    cannotGoThatWayMsg = 'There\'s obviously nothing in that direction. '
;
</pre></p>
<p>This would result in:</p>
<p><pre>
<b>&gt;e</b>
There's obviously nothing in that direction. From here you could go north. 
</pre></p>

<p>The alternative is to replace the entire output by overriding cannotGoThatWay(dir):</p>
<p><pre>
cellar: DarkRoom 'Cellar'
    "The cellar is almost bare. A flight of stairs leads up to the north. "    
    north = cellarStairs
    up asExit(north)    
    cannotGoThatWay(dir)
    {
        "There's no point blundering around in that direction; you
        know perfectly well that the only way out of here is back <<aHref('UP',
            'up','Go up')>> the stairs. ";
    }
;
</pre></p>
<p>Using the aHref() function is the icing on the cake here; it provides a hyperlink on the word "up" in the output text that the player can click to go up from the cellar, but there's no need to do this if you don't want to. The effect of this override is to produce:</p>

<p><pre>
<b>&gt;e</b>
There's no point blundering around in that direction; you know perfectly well that the 
only way out of here is back <A href='#d'>up</A> the stairs. "
</pre></p>


<a href='#r40'>[back]</a>
<br>

<h3><a name='darkannounce'>[41] Announcement of Darkness</a></h3>
<p>The mechanism for recognizing and responding to the onset of light or darkness  has already been described <a href='#nowlight'>above</a>. The new point to note here is that the actual message announcing the darkness ("You are plunged into darkness.") comes from <code>DMsg(onset of darkness, '\n{I} {am} plunged into darkness. ')</code> If we wanted to change it this message, this would therefore be the most convenient place to change it, e.g.:</p>
<p><pre>
CustomMessages
    [        
        Msg(onset of darkness, '\nNow it\'s too dark to see anything. ')
    ]
;
</pre></p>
   
<a href='#r41'>[back]</a>
<br>   

<h3><a name='darkgo'>[42] Cant Go in Darkness</a></h3>
<p>This message is produced by the method cannotGoThatWayInDark(dir), called on the current location. By default it displays the location's cannotGoThatWayMsg, but obviously it could be overridden to display any message you like, e.g.:</p>
<p><pre>
cellar: DarkRoom 'Cellar'
    "The cellar is almost bare. A flight of stairs leads up to the north. " 
    north = cellarStairs
    up asExit(north)    
    cannotGoThatWayInDark(dir)
    {
        "Although it's dark and you can hardly see a thing
        down here, you're pretty certain that the only way out is back up the
        stairs. ";
    }        
;
</pre></p>



<a href='#r42'>[back]</a>
<br>   

<h3><a name='fuse'>[43] Winning Cut-Scene</a></h3>
<p>There are several distant ways we could generate this brief closing cut-scene. This one was implemented by setting up a Fuse in the travelerEntering() method of <a href='#hallWest'>hallWest</a> if the player enters the room carrying the photograph; the fuse then executes at the end of the turn, displaying the message and ending the game.</p>

<a href='#r43'>[back]</a>
<br>

<h3><a name='winning'>[44] Winning Message</a></h3>
<p>This winning message, which marks the end of the game, is here generated by the call to finishGameMsg() in the (custom) winGame() method on <a href='#hallWest'>hallWest</a>.</p>
<p>finishGameMsg() can either be called with a literal single-quoted string as its first argument (as in this example), or with a FinishType object. If it's called with a literal string, that literal string is displayed as the winning messages. If it's called with a FinishType object, that object's finishMsg is displayed. The library defines four FinishType objects: ftVictory ('You have won'), ftDeath ('You have died'), ftFailure ('You have failed') and ftGameOver ('Game Over'). You can define additional FinishType objects if you like, but this is only worthwhile if you want to use them more than once (i.e. if the same ending message can be displayed from calls to finishGameMsg at several different places in your code).</p>
<p>The second parameter used by finishGameMsg is a list of FinishOption objects. Once the game is over the parser will always offer the player the option to RESTORE, RESTART or QUIT, but here the author can offer the player additional options, in this case UNDO and FULL SCORE (using finishOptionUndo and finishOptionFullScore). Other FinishOption types that can be used include finishOptionScore, finishOptionAmusing, and finishOptionCredits.</p>

<a href='#r43'>[back]</a>
<br>

<h3><a name='finalscore'>[45] Final Score Notification</a></h3>
<p>This final score notification is generated from a call to libGlobal.scoreObj.runScoreNotifier(); in the finishGameMsg() function (which was called from author code; see the definition of <a href='#hallWest'>hallWest</a>.winGame).</p>

<a href='#r43'>[back]</a>
<br>

<h3><a name='fullscore'>[46]</a></h3>
<p>The FULL SCORE command generates this report of the score and list of achievements by calling libGlobal.scoreObj.showFullScore(), which will normally be equivalent to libScore.showFullScore(). The points awarded for and description of each achievement listed are defined on the various Achievement objects defined in the game and activated by a call to awardPointsOnce(). For a fuller account of the scoring system see the <i>Library Manual</i> chapter on <a href='../manual/score.htm'>Scoring</a>.</p>
<a href='#r46'>[back]</a>
<br>

<h3><a name='goodbye'>[47] Goodbye Message</a></h3>
<p>This farewell message is produced by the showGoodbye() method on <a href='#gameMain'>gameMain</a>.</p>
<a href='#r46'>[back]</a>
<br>
<hr>
<h2><a name='sourcecode'>The Source Code</a></h2>
<p><pre>
#charset "us-ascii"

#include &lt;tads.h&gt;
#include "advlite.h"



/*
 *   Our game credits and version information.  This object isn't required
 *   by the system, but our GameInfo initialization above needs this for
 *   some of its information.
 *   
 *   IMPORTANT - You should customize some of the text below, as marked:
 *   the name of your game, your byline, and so on.  
 */
<a name='versionInfo'>versionInfo</a>: GameID
    name = 'TADS 3 Starter Game'
    byline = 'by An Author'
    htmlByline = 'by &lt;a href="mailto:your-email@your-address.com"&gt;
                  YOUR NAME&lt;/a&gt;'
    version = '1.0'
    authorEmail = 'YOUR NAME &lt;your-email@your-address.com&gt;'
    desc = 'CUSTOMIZE - this should provide a brief description of
            the game, in plain text format.'
    htmlDesc = 'CUSTOMIZE - this should provide a brief description
                of the game, in &lt;b&gt;HTML&lt;/b&gt; format.'

    showCredit()
    {
        /* show our credits */
        "Put credits for the game here. ";        
    }
    showAbout()
    {
        "This is just a brief demo game to illustrate where various messages
        come from in TADS 3. Or you could think of it as a high adventure with
        deep characterization, a riveting plot, and a myriad of amazing
        puzzles -- except that if you do think of ir this way you'll be sadly
        disappointed! ";
    }
;


<a name=gameMain>gameMain</a>: GameMainDef
    /* the initial player character is 'me' */
    initialPlayerChar = me

    /* 
     *   Show our introductory message.  This is displayed just before the
     *   game starts.  Most games will want to show a prologue here,
     *   setting up the situation for the player, and show the title of the
     *   game.  
     */
    showIntro()
    {
        "Welcome to this demo!&lt;.p&gt;";     
    }

    /* 
     *   Show the "goodbye" message.  This is displayed on our way out,
     *   after the user quits the game.  You don't have to display anything
     *   here, but many games display something here to acknowledge that
     *   the player is ending the session.  
     */
    showGoodbye()
    {
        "<.p>Thanks for playing!\b";
    }
;

me: Player
    location = boxRoom   
    desc = "You're neither as young as you used to be or as young as you'd like
        to be. "
;

<span id='boxRoom'>boxRoom</span>: Room 'Box Room'
    "This large box room is strewn with junk. The only way out is via a door
    to the east. "
    east = boxDoor
;

+ boxDoor: Door 'door'
    "It's just a plain door, painted white. "
;

+ <a name='junk'>Decoration</a> 'junk' 
    "All sorts of stuff, the accumulated detritus of decades, mostly not worth
    bothering with. "
;

+ <a name=largeBox>largeBox</a>: OpenableContainer 'large red box' 
    "It's large, red and box-shaped&lt;&lt;unless isOpen&gt;&gt;, and is currently closed&lt;&lt;end&gt;&gt;. "
    initSpecialDesc = "A large red box sits in the corner. "    
;

++ teddy: Thing 'old teddy bear' 
    "The old teddy stills shows the dreadful effects of too much love from an
    over-enthusiastic child, but has long since suffered years of neglect. "
;

++ legoBrick: Thing 'red lego brick'
;

++ torch: Flashlight 'large black torch;;flashlight'
    "It looks sturdy enough, and seems to be in good working order. "
;

+ <span id='table'>Heavy, Surface</span> 'small square table' 
    specialDesc = "A small square table stands in the middle of the room. "
;

++ <span id='smallBox'>smallBox: LockableContainer</span> 'small blue box'
   dobjFor(Open)
   {
        preCond = [touchObj, objUnlocked]
   }
;

+++ redCrayon: Crayon 'red +' 
;

+++ blueCrayon: Crayon 'blue +' 
;    

+++ yellowCrayon: Crayon 'yellow +' 
;


+ oldCoat: Wearable 'old coat; brown'
    "It's brown, but not too motheaten. "
;

+ <a name='greenBook'>greenBook</a>: Thing  'small green book; getting started'    
    "It's a copy of <i>Getting Started in TADS 6</i>. "
    readDesc = "Reading the book brings back happy memories of writing IF in
        your early twenties. With TADS 6 all you had to do was fill in a form
        specifying the genre of the game, the names of a few key NPCs, and the
        median age of the target audience, select a plot-type from a drop-down
        list, and then hit either the &lt;q&gt;generate two-hour version for
        IF-Comp&lt;/q&gt; button or &lt;q&gt;generate long version&lt;/q&gt; button, and a
        bug-free, typo-free TADS 6 game would be instantly created for you.
        Shame so many diehards on intfiction.org thought this took all the
        fun out of creating IF."
;

+ <a name='sock'>oddSock</a>: Wearable 'odd sock; green'
    "Washing machines have a habit of swallowing odd socks, and this one (which
    happens to be green) must be the survivor of what was once a pair. "
;

+ tennisBall: Thing 'tennis ball; split'
    "This one has been split open; it's no good for playing tennis with any
    more. "
;

class Crayon: Thing 'crayon'
    /* This ensures that crayons will be listed together */
    listOrder = 90
;


<a name='landing'>landing</a>: Room 'Landing'
    "A flight of stairs leads down to the south, while a door leads into the box
    room just to the west. "
    roomFirstDesc = "Emerging from the box room you find yourself standing at
        the top of a flight of stairs leading down to the south. "
    west = landingDoor
    south = landingStairs
    down asExit(south)
;

+ landingDoor: Door ->boxDoor 'box room door'
;

+ <a name='stairway'>landingStairs</a>: StairwayDown 
    'flight of stairs[n];;;it them'
    travelDesc = "You walk briskly down the stairs. "
    
    destination = hallEast
;

<a name='dconn'></a> 
hallRegion: SenseRegion
    rooms = [hallEast, hallWest]
;

<a name='hallEast'>hallEast</a>: Room 'Hall (East End)' 'east end of the hall[n]'
    "This large hall continues to the west. A flight of stairs leads up to the
    north. "
    inRoomName(pov) { return 'at the far end of the hall'; }
    north = hallStairs
    up asExit(north)
    west = hallWest
;

+ hallStairs: StairwayUp 'flight of stairs[n]'
    destination = landing
;


+ <a name='duck'>rubberDuck: Thing 'rubber duck; yellow'
    "It's yellow. "
    afterAction()
    {
        if(gActionIs(Jump))
        {
            moveInto(isIn(hallEast) ? hallWest: hallWest);
            &quot;&lt;.p&gt;As if startled by your sudden exertion, the rubber duck lets
            out a clockwork quack and waddles to the other end of the hall. ";
        }
    }  
;


<a name='hallWest'>hallWest</a>: Room 'Hall (West End)' 'west end of the hall[n]'
    "This large hall continues to the east. A flight of stairs leads down to the
    south. "
    east = hallEast  
    south = hallStairsDown
    down asExit(south)
    
    travelerEntering(traveler, origin) 
    {
        if(photo.isIn(traveler))
            new Fuse(self,&amp;winGame, 0);
    }
    
    winGame()
    {
        "You turn to Mavis and hand her the photograph of Buster Keaton. She
        snatches it eagerly from your grasp, instantly stops her moaning, and
        showers the actor's picture with delighted kisses.\b";
        
        achievement.awardPointsOnce();
        
        finishGameMsg('You have made an old lady very happy', [finishOptionUndo,
            finishOptionFullScore]);
    }
    
    achievement: Achievement { +10 "making Mavis happy" }
;

+ woodenChair: Platform 'wooden chair'
    canLieOnMe = nil
    sightSize = large   
;

+ hallStairsDown: StairwayDown 'flight of stairs[n];;;it them'
    destination = cellar
;

<a name='cellar'>cellar</a>: DarkRoom Room 'Cellar'
    "The cellar is almost bare. A flight of stairs leads up to the north. "
    north = cellarStairs
    up asExit(north)
    isLit = nil
;

+ cellarStairs: StairwayUp 
    'flight of stairs[n];;;it them'
    destination = hallWest
;


+ <a name='photo'>photo</a>: Thing 'photo of Buster Keaton; favourite; picture photograph'
    "The picture shows Buster Keaton posing in a Confederate uniform in The
    General. "
        
    dobjFor(Take)
    {
        action()
        {
            inherited;
            achievement.awardPointsOnce();
        }
    }
   achievement: Achievement { +10 "retrieving the photograph" }
;


<a name='mavis'>mavis</a>: Actor 'Mavis; old; woman; her' @woodenChair
    "She's a funny old woman, when all's said and done. "
    // sightSize = large   
    /* We could add: */
    // remoteDesc(pov)  {  "She's lookes quite aged. "; }
;

+ <a name='hermit'>ActorState
    isInitState = true
    noResponse = "The old woman simply rocks back and forth in her chair
        moaning, <q>Woe, woe, woe is me!</q>"
    stateDesc = "She's rocking back and forth in her chair moaning <q>Woe!</q> "
    
    specialDesc = "Mavis is sitting on the wooden chair. " 
    
    remoteSpecialDesc(pov)
    {
        "Mavis is sitting on a wooden chair at the far end of the hall. "; 
    }
    
;

<a name='harold'>harold</a>: Actor 'Harold;;twin man brother;him' @hallWest
    "He's about your height and build, and really looks quite a lot like you.
    Since he's your twin brother this is not altogether surprising. "
    sightSize = large    
;



+ <a name='hWaiting'>hWaiting</a>: ActorState
    /* We should add: */
    // specialDesc = "Harold is standing by Mavis\'s chair. "  
    isInitState = true
;

++ HelloTopic
    "<q>Hello, Harold!</q> you say.\b
    <q>Hi there!</q> he replies. "    
    
    changeToState = hTalking
;

+ <span id='hTalking'>hTalking: ActorState</span>
    specialDesc = "Harold is standing by Mavis\'s chair, waiting for you to
        speak. "    
;

++ <a name='mavisask'>AskTopic @mavis
    &quot;&lt;q&gt;What's up with Mavis?&lt;/q&gt; you ask.\b
    &lt;q&gt;She's inconsolable -- she can't find her favourite photograph of Buster
    Keaton,&lt;/q&gt; he tells you. &lt;&lt;gSetKnown(photo)&gt;&gt;&quot;
    name = 'Mavis'
;

++ <a name='photoask'>AskTopic, StopEventList @photo</a>
    [
        '&lt;q&gt;Where did Mavis leave the photo?&lt;/q&gt; you ask.\b
        &lt;q&gt;I think it may be in the cellar; but it\'s dark down there so I
        couldn\'t find it,&lt;/q&gt; he tells you. ',
        
        '&lt;q&gt;You think Mavis\'s photo of Buster Keaton may be in the cellar?&lt;/q&gt;
        you ask.\b
        &lt;q&gt;That\'s right,&lt;/q&gt; he nods, &lt;q&gt;Be a good fellow and get it for her,
        her moaning is getting on my nerves.&lt;/q&gt; '
    ]
    name = 'the photo'
;

++ <a name='deftopic'>DefaultAnyTopic</a>
    "&lt;q&gt;I think you'd better help poor Mavis before we discuss that,&lt;/q&gt; he
    suggests. "
;

</pre>



</div>
<hr class="navb"><div class="navb">
<i>TADS 3 Technical Manual</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="depth.htm">Adv3Lite In Depth</a> &gt; 
Analysyis of a Transcript
<br><span class="navnp"><a class="nav" href="depth.htm"><i>Prev:</i> Adv3Lite In Depth</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="t3res.htm"><i>Next:</i> Action Results</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>
