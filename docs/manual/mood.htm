<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Actors &mdash; Moods and Stances</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="actor.htm">Actors</a> &gt; 
Moods and Stances
<br><span class="navnp"><a class="nav" href="orders.htm"><i>Prev:</i> Giving Orders to NPCs</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="tags.htm"><i>Next:</i> String Tags and Object Tags</a> &nbsp;&nbsp;&nbsp; </span>
</div>
<div class="main">
<h1>Moods and Stances</h1>
<h2>Overview</h2>
<p>In many games it may be enough (or more than enough) to track what various actors know and believe, but human beings have affective as well as cognitive properties, and if we're trying to create lifelike NPCs in our game, it may be that we want to track something about their emotional lives too. <a href='#moods'>Moods</a> and <a href='#stances'>Stances</a> in adv3Lite provide a framework for tracking each Actor's current emotional state (Mood) and (positive or negative) attitude towards the player character (and, if we so wish, towards other NPCs).</p>

<p>An Actor's mood and/or stance can be tested (and changed) in game code to affect the way the Actor behaves, for example in his or her converational responses or AgendaItems.</p>

<a name='moods'></a>
<h2>Moods</h2>
<p>A Mood is a simple representation of an Actor's current emotional state. Moods are objects of the Mood class. Each Mood object has a programmatic name ending in Mood (e.g., <span class='code'>happyMood</span>) with a corresponding <span class='code'>name<</span> property giving the name of the Mood as a single-quoted string (e.g., 'happy'). A number of Moods come predefined in the language dependent part of the library (english.t): neutral, calm, happy, euphoric, contented, sad, depressed, angry, furious, afraid, terrified, confident, bold. lonely, bored, and excited. You can easily define more if you want them. For example, to define an irritable Mood you'd just use:</p>

<p><div class="code"><pre>
 DefMood(irritable);
 </pre></div>
 

<p>This would create the following object:</p>
 <p><div class="code"><pre>
 irritableMood:Mood
     name = 'irritable'
;
</pre></div>

<p>The Actor class defines the following properties and methods to support the use of Moods:</p>
<ul>
<li><b>mood</b>: The Actor's current mood (e.g. <span class='code'>neutralMood</span>). This should be treated as read-only, since it returns the mood defined on the actor's current ActorState (if there is one) or else the value of <span class='code'>actorMood</span>. To change the Actor's mood either set <span class='code'>actorMood</span> or use the <span class='code'>setMood()</span> method.</li>
<li><b>actorMood</b>: The mood this actor is in if and when he or she isn't in any ActorState, or if his/her current ActorState's <span class='code'>mood</span> is nil (the default), or the Actor's <span class='code'>stateDependentMoods</span> property is set to nil.</li>
<li><b>setMood(mood_)</b>: sets the Actor's current ActorsState's <span class='code'>mood</span> to <i>mood_</i>, or the Actor's <span class='code'>actorMood</span> to <i>mood_ if</i> the Actor has no current ActorState. If you want to avoid changing the current ActorState's mood just use <span class='code'>actorMood = newMood</span> instead, or set the Actor's <span class='code'>stateDependentMoods</span> property to nil. Note thst <span class='code'>setMood(mood_)</span> will complain (and not set the mood) if <i>mood_</i> is not a Mood object.</li>
<li><b>stateDependentMoods</b>: If you don't want moods to be related to ActorStates (which would be perfectly reasonable if, for example, you were using ActorStates to model what actors were doing and the like regardless of their mood) then you can set this to nil, either on individual Actors or on the Actor class.</li>
</ul>
<p>The default initial <span class='code'>actorMood</span> for an Actor is the value of <span class='code'>libGlobal.defaultMood</span>, which in the english library is <span class='code'>neutralMood</span>. It's done this way so that translators (or game authors) working in different languages can readily define their own default mood.</p>

<a name='moodmacros'>
<p>The library also defines the following macros to work with moods:</p>
<ul>
<li><b>gMood</b>: get getActor's current mood.</li>
<li><b>gMoodIs(<i>name</i>)</b>: test whether getActor's current mood is <i>name</i></li>
<li><b>gMoodIn(<i>name1</i>, <i>name1</i>...)</b>: test whether getActor's mood is one of <i>name1</i>, <i>name1</i>...</li>
<li><b>gSetMood(<i>name</i>)</b>: set getActor's mood to <i>name</i>.</li>
<li><b>aMood(actor)</b>: get actor's current mood.</li>
<li><b>aMoodIs(actor, <i>name</i>)</b>: test whether actor's current mood is <i>name</i></li>
<li><b>aMoodIn(actor, <i>name1</i>, <i>name1</i>...)</b>: test whether actor's mood is one of <i>name1</i>, <i>name1</i>...</li>
<li><b>aSetMood(actor, <i>name</i>)</b>: set actor's mood to <i>name</i>.</li>
</ul>
<p>In each case the <i>name</i> parameter is the name of the Mood without the suffix 'Mood', so that, for example, you would use <span class='code'>gMoodIs(happy)</span> rather than <span class='code'>gMoodIs(happyMood)</span>.
<p>The macros with names starting with <b>g</b> all relate to getActor in contexts where getActor makes sense, i.e. in an ActorTopicEntry, TopicGroup or AgendaItem where getActor is the actor any of these belong to). To get or set the mood of any other actor, or in any other context, you need to use one of th macros beginning <b>a</b> and specify the <i>actor</i> parameter to denote the actor in question.</p>
The macros <span class='code'>gMood</span> and <span class='code'>aMood(actor)</span> return the Mood <i>object</i> e.g. <span class='code'>happyMood</span>.

<p>Moods can be used in various ways to customize NPC responses in various ways. Here's one very simple example:</p>

<p><div class="code"><pre>
++ AskTopic @bob    
     "&lt;q&gt;How are you today?&lt;/q&gt; you enquire.\b
      &lt;q&gt;I'm quite &lt;&lt;gMood.name&gt;&gt;,&lt;/q&gt; he replies. " 
;
 </pre></div>
 
<p>More typically, we might do something like this:</p>

<p><div class="code"><pre>
++ AskTopic @bob
    "&lt;q&gt;How are you today?&lt;/q&gt; you enquire.\b
    &lt;q&gt;I'm &lt;&lt;if gMoodIn(happy, euphoric, excited, confident)&gt;&gt;great&lt;&lt;else if gMoodIn( 
        sad, depressed, lonely, bored)&gt;&gt;not so good&lt;&lt;else&gt;&gt;okay&lt;&lt;end&gt;&gt;,&lt;/q&gt; he tells you. &quot; 
;
 </pre></div>

<p>You can also extend the Mood framework in any way you think fit. For example, if you wanted to add strength and affect properties to Mood (so that Moods with the same affect could, for example, be grouped together and compared for their strength) you could do something like this:</p>

<p><div class="code"><pre>
#define ModMood(mood_, strength_, affect_)\
    modify mood_ ## Mood\
    strength = strength_\
    affect = #@affect_

modify Mood
    strength = 0 
    afffect = 'none'
;

ModMood(furious, 50, anger);
ModMood(angry, 25, anger);
ModMood(happy, 25, happiness);
ModMood(euphoric, 50, happiness);
;

<span class='comment'>// and so on</span>
 </pre></div>

<p>The macro expansion would then result in:</p>

<p><div class="code"><pre>
modify furiousMood
   strength = 50
   affect = 'anger'
;

<span class='comment'>// and so on</span>
 </pre></div>
 
 <p>We don't do this in the library since we assume that different game authors will want to adapt the moods framework in different ways. The above example would allow embedded expressions (or other such tests) like <span class='code'>"<&lt;if gMood.affect == 'happines'&gt;&gt;happy text&lt;&lt;else if gMood.affect == 'anger'&gt;&gt; angry response&lt;&lt;else ...&gt;&gt;"</span>.

<a name='stances'>
<h2>Stances</h2>
<p>Stances provide a simple representation of the the (positive or negative) attitude an NPC has towards the Player Character (and also, if you wish to track it, towards other NPCs). Stances are not ActorState dependent, but they are Actor-dependent in the sense that an NPC's stance towards other actors in the game may obviously vary by actor. Unlike Moods, stances can be ranked by <b>score</b>, a crude measure of the degree of positivity or negativity an actor has towards the Player Character (and possible other actors).</p>

<p>Stances are objects of the Stance class. Each Stance object has a programmatic name ending in Stance(e.g., <span class='code'>friendly</span>) with a corresponding <span class='code'>name<</span> property giving the name of the Stance as a single-quoted string (e.g., 'friendly'), along with an associated <span class='code'>score<</span>, e.g. 20. A number of Stances come predefined in the language dependent part of the library (english.t); in ascending order of score (from -50 to 50) these are: loathing, rancorous, hostile, unfriendly, cool, neutral, lukewarm, friendly, warm, loving, and amorous. You can easily define more if you want them. For example, to define a cordial Stance with a score 25 of you'd just use:</p>

<p><div class="code"><pre>
 DefStance(cordial, 25);
 </pre></div>
 

<p>This would create the following object:</p>
 <p><div class="code"><pre>
 cordialStance: Stance
     name = 'cordial'
     score = 25
;
</pre></div>

<p>The Actor class defines the following properties and methods to support the use of Stances:</p>
<ul>
<li><b>stance</b>: The Actor's current stance towards the Player Character (e.g. <span class='code'>neutralSTance</span>). This should be treated as read-only, since it returns the value of <span class='code'>stanceTowards(gPlayerChar)</span>. To change the Actor's stance  use the <span class='code'>setStanceToward()</span> method.</li>
<li><b>stanceToward(<i>actor</i>)</b>: The stance this Actor has towards <i>actor</i>.</li>
<li><b>setStanceToward(actor, stance)</b>: sets the Actor's current stance towards <i>actor</i></span> to <i>stance</i>.If <i>actor</i> is not an Actor and/or <i>stance</i> is not a Stance this method will complain about it rather than attempting to update anything.</li>
<li><b>likesMost()</b>: returns a list of actors to whom this Actor has the most positive stance (of the stances s/he holds).</li>
<li><b>likesLeast()</b>: returns a list of actors to whom this Actor has the least positive stance (of the stances s/he holds).</li>
<li><b>mostLikedBy()</b>: returns a list of actors who hold the most positive stance to this Actor(of the stances they hold). </li>
<li><b>leastLikedBy()</b>: returns a list of actors who hold the least positive stance to this Actor(of the stances they hold). </li>
</ul>

<p>In the case of the final four of these, the Actor is excluded from the list under consideration (consider the case where Bob has a positive stance towards everyone else but his stance towards himself has been left at <span class='code'>neutralStance</span>; to learn that Bob likes himself the least probably isn't the information we'd be looking for here).</p>

<a name='stancemacros'>
<p>As with Mood, there are a number of macros that can be used with Stance; the following all concern other actors' stances towards the Player Character.</p>

<ul>
<li><b>gStance</b>: get getActor's current stance towards the Player Character (PC).</li>
<li><b>gStanceIs(<i>name</i>)</b>: test whether getActor's current stance towards the PC is <i>name</i></li>
<li><b>gStanceIn(<i>name1</i>, <i>name1</i>...)</b>: test whether getActor's stance towards the PC is one of <i>name1</i>, <i>name1</i>...</li>
<li><b>gSetStance(<i>name</i>)</b>: set getActor's stance towards the PC to <i>name</i>.</li>
<li><b>aStance(actor)</b>: get actor's current stance towards the PC.</li>
<li><b>aStanceIs(actor, <i>name</i>)</b>: test whether actor's current stance towards the PC is <i>name</i></li>
<li><b>aStanceIn(actor, <i>name1</i>, <i>name1</i>...)</b>: test whether actor's stance towards the PC is one of <i>name1</i>, <i>name1</i>...</li>
<li><b>aSetStance(actor, <i>name</i>)</b>: set actor's stance towards the PC to <i>name</i>.</li>
</ul>

<p>In each case the <i>name</i> parameter is the name of the Stance without the suffix 'Stance', so that, for example, you would use <span class='code'>gStanceIs(friendly)</span> rather than <span class='code'>gStanceIs(friendlyStance)</span>.
<p>The macros with names starting with <b>g</b> all relate to getActor in contexts where getActor makes sense, i.e. in an ActorTopicEntry, TopicGroup or AgendaItem where getActor is the actor any of these belong to). To get or set the stance of any other actor towards the player character, or in any other context, you need to use one of th macros beginning <b>a</b> and specify the <i>actor</i> parameter to denote the actor in question.</p>
The macros <span class='code'>gStance</span> and <span class='code'>aStance(actor)</span> return a Stance <i>object</i> e.g. <span class='code'>friendlyStance</span>.

<a name='stanceoperators'>
<p>Because Stances have an associated score, they can be ranked and compared by score. The following operators are available to compare Stances:
<ul>
<li> <b>a - b</b>: equivalent to <span class='code'>a.score - b.score</span></li>
<li> <b>a &gt;&gt; b</b>: equivalent to <span class='code'>a.score &gt; b.score</span></li>
<li> <b>a &lt;&lt; b</b>: equivalent to <span class='code'>a.score &lt; b.score</span></li>
<li> <b>a &gt;&gt;&gt; b</b>: equivalent to <span class='code'>a.score &gt;= b.score</span></li>
</ul>

(The last three of these operators were chosen in place of the more conventional ones as being the closest available operators TADS can override).

<p>There are a further trio of Stance operators which may perhaps be useful to some game authors:</p>
<ul>
<li> <b>whateverStance[a] = [b]</b>: Sets <i>whateverStance</i> to be <i>a</i>'s stance to <i>b</i>.</span></li>
<li> <b>whateverStance[a]</b>: returns a list of people towards whom <i>a</i> holds this stance.</span></li>
<li> <b>whateverStance * a</b>: returns a list of people who hold this stance towards <i>a</i>.</span></li>
</ul>
<a name='stanceinit'>
<p>If you need to set up a fair number of attitudes at the start of play, you can make use of the <b>stanceInitializer</b> object, modifying it to define a list of stances, each stance entry being a list of the form <span class='code'>[actor1, stance, actor2]</span>, meaning actor1 starts out holding <i>stance</i> towards actor2. To avoid having to keep typing 'Stance' at the end of each stance name, you can make use of the <b>Sta</b> macro, for example:</p>


 <p><div class="code"><pre>
 modify stanceInitializer
    stances = [
        Sta(me, friendly, bob),
        Sta(bob, warm, me),
        Sta(bob, amorous, mavis),
        Sta(mavis, loving, bob),
        Sta(me, lukewarm, mavis),
        Sta(mavis, cool, me)
    ]
; 
 </pre></div>

<p>Note that you don't need to add any entries for the neutralStance, since this is the default.</p>

<p>A simple example of what can be done with Stances might be varying greeting responses according to stance:</p>

<p><div class="code"><pre>
++ HelloTopic
    &quot;&lt;q&gt;Hello, Bob,&lt;/q&gt; you say.\b
    &lt;q&gt;Hello,&lt;/q&gt; he replies. &quot;
;

+++ AltTopic
     &quot;&lt;q&gt;Hi there, Bob,&lt;/q&gt; you say.\b
    &lt;q&gt;Hi, great to see you!&lt;/q&gt; he declares. &quot;
   isActive = gStance &gt;&gt; neutralStance
;

+++ AltTopic
    "<q>Hello,</q> you say.\b
    In reply Bob merely grunts. "
    isActive = gStance &lt;&lt; coolStance    
;
 </pre></div>
 
 <p>Or you could do something like this:</p>
 
 <p><div class="code"><pre>
++ QueryTopic 'how Mavis feels about you; does feel me'
    "&lt;q&gt;&lt;&lt;if aStanceIn(mavis, neutral, lukewarm, warm, friendly, loving)&gt;&gt;I think she quite likes
    you&lt;&lt;else&gt;&gt;I'd rather not say&lt;&lt;end&gt;&gt;,&lt;/q&gt; he tells you. "
;
 </pre></div>

<p>Or as an extreme example of using a Stance in connection with an AgendaItem:</p>


 <p><div class="code"><pre>
 bobLoathingAgenda: AgendaItem
    invokeItem()
    {       
        "Bob snarls as you enter the room. &lt;q&gt;I &lt;i&gt;hate&lt;/i&gt; you&lt;/q&gt;!\b
        So saying, he snatches up the nearest heavy blunt object and smashes 
        it down on your head with all the force he can muster.\b";
        
        finishGameMsg(ftDeath, [finishOptionUndo]);        
    }    
    
    agendaOrder = 50
    initiallyActive = true
    isReady = gStanceIs(loathing) &amp;&amp; gRoom == getActor.getOutermostRoom    
;

 </pre></div>
 
 <p>No doubt game authors will be able to come up with many more ingenious uses for Moods and Stances than the examples given here, but hopefully we have suggested enough to get you started.</p>

<hr class="navb"><div class="navb">
<i>adv3Lite Library Manual</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="actor.htm">Actors</a> &gt; 
Moods and Stances
<br><span class="navnp"><a class="nav" href="orders.htm"><i>Prev:</i> Giving Orders to NPCs</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="tags.htm"><i>Next:</i> String Tags and Object Tags</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>