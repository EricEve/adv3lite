<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Actors &mdash; Special Topics</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="actor.htm">Actors</a> &gt; 
Special Topics
<br><span class="navnp"><a class="nav" href="suggest.htm"><i>Prev:</i> Suggesting Conversational Topics</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="topicgroup.htm"><i>Next:</i> Topic Groups</a> &nbsp;&nbsp;&nbsp; </span>
</div>
<div class="main">
<h1>Special Topics</h1>

<p>On the face of it, between them AskTopic, TellTopic, AskForTopic and TalkTopic (together with YesTopic and NoTopic) offer a reasonable range of TopicEntry classes for responding to conversational commands, but they are somewhat limited in expressiveness. If I type TELL BOB ABOUT MAVIS do I want to tell him about her appearance, her career, about the conversation I've just had with her or what? If I type ASK BOB ABOUT THE TOWER do I want to enquire when the tower was built, how long people have been afraid of it, why it's considered so scary, or what? Even more, if Bob asks the player character 'What do you think of Mavis?' the player is rather restricted in his choice of reply if all he can type is TELL BOB ABOUT MAVIS.</p>

<p>To alleviate this problem, the adv3Lite library defines two types of SpecialTopic: <a href="#saytopic">SayTopic</a> and <a href="#querytopic">QueryTopic</a>. A SayTopic allows the player character to say just about anything (in principle, at any rate; in practice we'd be constrained by the need to keep commands reasonably brief). A QueryTopic increases the range of questions that can be asked from ASK ABOUT to ASK WHAT, ASK WHO, ASK WHERE, ASK WHY, ASK WHEN, ASK HOW, ASK WHETHER and ASK IF. But before going into the specifics of each type of SpecialTopic, it will be helpful to outline their common features.</p>

<p>First, both types of SpecialTopic have their <strong>autoName</strong> property set to true by default. This is necessary since players can scarcely be expected to guess the wording that will trigger a SayTopic or a QueryTopic, so they always need to be suggested, at least in the appropriate context. With a SpecialTopic, however, the name used is the <span class="code">name</span> property of the matchObj, not the <span class="code">theName</span> property, since in this case the <span class="code">name</span> property is nearly always more appropriate (note, however, that if you supply your own definition of the <span class="code">name</span> property of a SayTopic or SpecialTopic, the library won't override it).</p>

<p>Second, both types of SpecialTopic provide a short-cut way of defining the Topic they match. Instead of having to define a Topic object just to match a single SayTopic or QueryTopic, you can define the vocabProperty of the Topic object you would otherwise need to have defined and the library will create it for you. This will be illustrated when we come to look at SayTopic and QueryTopic.</p>

<p>Third, both types of SpecialTopic provide a short-cut way of defining an equivalent AskTopic or TellTopic (e.g. the player might type ASK BOB HOW OLD HE IS or ASK BOB ABOUT HIS AGE, and you'd want the same response). This can be handled by defining the <strong>askMatchObj</strong> and/or <strong>tellMatchObj</strong> property on the SpecialTopic in question (e.g. <span class="code">askMatchObj = tAge</span>). Again, we'll illustrate this below.</p>

<p>Fourth, whereas in the adv3 library SpecialTopic is a class used directly to define TopicEntries in game code, in the adv3Lite library it's a base class used to define the common behaviour of SayTopic and QueryTopic. In your own game code you'd use the latter two classes, not SpecialTopic.</p>

<p>Fifth, in adv3 SpecialTopics can only be used in ConvNodes; in adv3Lite SayTopics and QueryTopics can be used anywhere it's legal to use any of the other kinds of ActorTopicEntry.</p>

<h2><a name="saytopic">SayTopic</a></h2>

<p>A SayTopic can be used to allow the player character say just about anything (in practice limited by the need to keep IF commands reasonably brief). A SayTopic is triggered by a command beginning with the verb SAY, e.g. SAY YOU'RE NOT AFRAID, or SAY SALLY IS HORRIBLE, or SAY YOU LIKE CHOCOLATE. In fact the player can usually leave off the say, and just type YOU'RE NOT AFRAID, or SALLY IS HORRIBLE or YOU LIKE CHOCOLATE, although in the first and third cases the player might be more likely to type I'M NOT AFRAID or I LIKE CHOCOLATE, and your SayTopic will need to be able to deal with this possibility. What happens here is that while there's a conversation in progress between the player character and another actor the parser tries to interpret any command it can't otherwise understand as the topic object of a SAY command, which allows a SayTopic to be triggered even if the player didn't explicitly type SAY at the start of the command.</p>

<p>The full, long-hand way to define a SayTopic is thus first to define the Topic it matches and then use that Topic as the matchObj of your SayTopic; for example:</p>

 <p><div class="code"><pre>
tNotAfraid: Topic 'you\'re not afraid; you are i\'m i am'
;

...

+ SayTopic @tNotAfraid
  "&lt;q&gt;I'm not afraid of the dark tower, you know,&lt;/q&gt; you boast.\b
   &lt;q&gt;Well, you should be,&lt;/q&gt; Bob warns you. &quot;
;
</pre></div>

<p>Note how we define the tNotAfraid Topic object here. Because of the way autoname works it will be suggested to the player as 'You could say you're not afraid'. Faced with that suggestion many players will type anything but the wording they've just been shown, the obvious variants being SAY YOU ARE NOT AFRAID, I'M NOT AFRAID and I AM NOT AFRAID (you don't have to worry about the player including THAT after say since the VerbRule for the Say action takes care of that automatically). You thus need to define the vocab property of the tNotAfraid Topic such that its name (which will end up being used to provide the suggested name for the SayTopic) comes out as  'you'\re not afraid' while any additional or alternative words the player might type are also in the vocab.</p>

<p>If this were the only TopicEntry in the game to make use of the tNotAfraid Topic (as might well be the case), it may seem a slightly tedious step to have to define the tNotAfraid Topic in some other part of your code and then make use of it on just the one SayTopic. The adv3Lite library accordingly provides a short-cut way of doing this, allowing you to define the Topic directly on the SayTopic, like this:</p>


<p><div class="code"><pre>
+ SayTopic 'you\'re not afraid; you are i\'m i am'
  "&lt;q&gt;I'm not afraid of the dark tower, you know,&lt;/q&gt; you boast.\b
   &lt;q&gt;Well, you should be,&lt;/q&gt; Bob warns you. "
;
</pre></div>

<p>Note that this has the same effect behind the scenes. What happens is that the library preinitialization creates an anonymous Topic object with the vocab you define and then attaches it to the matchObj property of the SayTopic.</p>

<p>If you look at the template for TopicEntry you'll see that the property you should be defining here according to the template definition is the SayTopic's matchPattern, which can be used to match a regular expression. This is in fact the case. What happens is that the preinit code on SpecialTopic looks at the contents of the matchPattern property to see if it looks more like a regular expression (containing characters like &lt;&gt;|*$%^) or more like a vocab property (containing one or more semicolons), and then deals with it accordingly. In the absence of any firm evidence to the contrary it'll assume it's intended as the vocab property of an implicitly-defined Topic, so if you want to force it to a matchPattern you need to include one or more of the special regex characters.</p>

<p>It may happen that you want your SayTopic to be equivalent to an ordinary TellTopic (e.g. the player might type TELL BOB ABOUT FEAR instead of SAY I'M NOT AFRAID). To deal with this you can define an equivalent matchObj for a TellTopic on the SayTopic's tellMatchObj property, like so:</p>


<p><div class="code"><pre>
+ SayTopic 'you\'re not afraid; you are i\'m i am'
  "&lt;q&gt;I'm not afraid of the dark tower, you know,&lt;/q&gt; you boast.\b
   &lt;q&gt;Well, you should be,&lt;/q&gt; Bob warns you. "
   
   tellMatchObj = tFear
;
</pre></div>

<p>This assumes that the tFear Topic is defined somewhere else in your code. What happens behind the scenes here is that the library creates a SlaveTopic which matches TELL BOB ABOUT FEAR but executes the topicResponse of the SayTopic to which its enslaved. You can define an askMatchObj in just the same way (or you can define both on the same SayTopic or QueryTopic).</p>

<p>You're not restricted to using SayTopics for responses that could start with SAY. Suppose, for example, you want to include options to lie or to prevaricate in response to a question Bob asks the player character. Since the player does not need to begin a command with SAY to have it match a SayTopic this is perfectly possible. You'd do it like this: </p>

 <p><div class="code"><pre>
<span class="comment">/* Bob has just asked 'Have you been to the dark tower?' */</span>

+ YesTopic
  &quot;&lt;q&gt;Yes, I have,&lt;/q&gt; you confess.\b
   &lt;q&gt;You fool!&lt;/q&gt; he groans. &quot;
;

+ SayTopic @tLie
   &quot;&lt;q&gt;No, of course not,&lt;/q&gt; you lie hastily. &lt;q&gt;After all,
    you did warn me.&lt;/q&gt;\b
    &lt;q&gt;I did,&lt;/q&gt; Bob agrees, just a little warily. &quot;
    
    tellMatchObj = tLie
    includeSayInName = nil
;

+ SayTopic 'prevaricate'
    &quot;&lt;q&gt;Well, not exactly,&lt;/q&gt; you prevaricate.\b
     &lt;q&gt;What do you mean, &lt;q&gt;not exactly&lt;/q&gt;?&lt;/q&gt; Bob complains testily.
     &lt;q&gt;Either you have or you haven't!&lt;/q&gt; &quot;
     
     includeSayInName = nil
;

tLie: Topic 'lie';
</pre></div>   

<p>Note the use of the <strong>includeSayInName</strong> property to suppress the inclusion of 'say' in the way the topic is suggested when includeSayInName is set to nil. Note also how we define a SayTopic that will respond either to LIE or TELL A LIE; we need to do it this way since if the player types a command beginning with TELL the parser will try to match it to a TellTopic.</p>

<p>You can use SayTopics wherever you like, but the best use is probably just after the NPC the player character is in conversation with has just asked a question to which they might form an appropriate reply, which means you'll typically use SayTopics in <a href="convnode.htm">Conversation Nodes</a>.</p>



<h2><a name="querytopic">QueryTopic</a></h2>

<p>QueryTopics allow NPCs in your game to respond to questions like ASK BOB WHEN THE DARK TOWER WAS BUILT or ASK BOB HOW OLD HE IS or ASK BOB WHO DIED AT THE DARK TOWER or ASK BOB IF HE LIKES CHOCOLATE. QueryTopics are defined in a manner similar to SayTopics, except that we need to define one further property, the qtype ('how', 'what', 'who', 'why', 'where', etc.). We can do this directly in the QueryTopic template, like this:</p>

 <p><div class="code"><pre>
+ QueryTopic 'how' @tHowOld
    &quot;&lt;q&gt;How old are you?&lt;/q&gt; you ask.\b
    &lt;q&gt;None of your damned business,&lt;/q&gt; he replies. &lt;q&gt;Would you like someone
    asking you about your age?&lt;/q&gt; &quot;
    
    <span class="comment">/* 
     *   specifying the askMatchObj property allows Bob to respond to ASK
     *   BOB ABOUT HIS AGE in the same way as ASK BOB HOW OLD HE IS.
     */</span>
    askMatchObj = tAge    
;
...


tHowOld: Topic 'old he is; are you'
;

tAge: Topic 'his age'
;
</pre></div>

<p>Note how we here use the askMatchObj property so that the player would get the same response from ASK BOB ABOUT HIS AGE. Note also how we define the vocab property of the tHowOld Topic. The parser will recognize a command beginning with WHO, WHAT, WHY, WHEN or HOW as a form of ASK WHO/WHAT/WHEN/WHY/HOW, and faced with a prompt suggesting 'You could ask Bob how old he is' you can be sure that at least 50% of players will type HOW OLD ARE YOU rather than the text actually in front of them. The parser will deal with the initial HOW but we need to ensure that our Topic will match 'old are you' as well as 'old he is'. If there aren't any other NPCs where going to put this question to, it's probably more convenient to define the Topic vocab directly on the QueryTopic, as before:</p>

<p><div class="code"><pre>
+ QueryTopic 'how' 'old he is; are you'
    &quot;&lt;q&gt;How old are you?&lt;/q&gt; you ask.\b
    &lt;q&gt;None of your damned business,&lt;/q&gt; he replies. &lt;q&gt;Would you like someone
    asking you about your age?&lt;/q&gt; &quot;   

    askMatchObj = tAge     
;
</pre></div>

<p>This, by the way, is part of the reason we need to define <a name="qtype-idx">qtype</a> as a separate property, and not simply as part of the topic vocab. The 'how/what/who/why/when' is part of the verb grammar, which both allows the parser to recognize questions of this sort (and to distinguish them from attempts to ask someone <em>about</em> something) and allows the parser to recognize the short-form questions lacking the initial ASK. However, when defining a QueryTopic using the template form above we can, if we wish, run the qtype and the topic vocab together into a single string like this:</p>

<p><div class="code"><pre>
+ QueryTopic 'how old he is; are you'
    &quot;&lt;q&gt;How old are you?&lt;/q&gt; you ask.\b
    &lt;q&gt;None of your damned business,&lt;/q&gt; he replies. &lt;q&gt;Would you like someone
    asking you about your age?&lt;/q&gt; &quot;   

    askMatchObj = tAge     
;
</pre></div>

<p>In this case, where the library doesn't find the qtype property seperately defined, it takes the first word of the string to be the qtype and the remainer of the string to be the topic vocab. For this to work the first word of the string must be a valid qtype (who, what, why, where, when, if, whether, how), otherwise the QueryTopic won't match any player input. Other than that it's up to you whether you prefer to define the qtype and topic vocab as two separate strings or together in the same string. If the library finds two strings defined in the template, it will take the first to be the qtype and the second to be the topic vocab (unless it looks like a regular expression match pattern, in which case it will be interpreted as the matchPattern property). If the library finds only one string defined in the template, it will take the first word (i.e. everything up to the first space) to be the qtype, and the rest to be the topic vocab.</p>

<p>If we want a QueryTopic to match more than one qtype we can; we simply need to list the different question words in the qtype property and separate them with a vertical bar. This is most likely to be needed with ASK IF and ASK WHETHER, which players are likely to treat as synonyms. So, for example, we might define:</p>

 <p><div class="code"><pre>
+ QueryTopic 'if|whether' 'he likes chocolate; you like'
    &quot;&lt;q&gt;Do you like chocolate?&lt;/q&gt; you ask.\b
    &lt;q&gt;Of course,&lt;/q&gt; he replies. &lt;q&gt;Doesn't everyone?&lt;/q&gt;&quot;
;</pre></div>

<p>Or, alternatively and equivalently:</p>

 <p><div class="code"><pre>
+ QueryTopic 'if|whether he likes chocolate; you like'
    &quot;&lt;q&gt;Do you like chocolate?&lt;/q&gt; you ask.\b
    &lt;q&gt;Of course,&lt;/q&gt; he replies. &lt;q&gt;Doesn't everyone?&lt;/q&gt;&quot;
;</pre></div>

<p>Note here the appearance of 'you like' as additional words in the vocab property after the 'he likes chocolate' in the name part. This is to allow players to type DO YOU LIKE CHOCOLATE and have the command still work. Faced with a prompt like 'You could ask if he likes chocolate' at least 50% of players <em>will</em> type DO YOU LIKE CHOCOLATE and regard it as a bug of guess-the-verb proportions if the game doesn't recognize it, complaining like mad that they couldn't possibly be expected to guess that they need to type ASK IF HE LIKES CHOCOLATE when the suggestion is 'you could ask if he likes chocolate' (no, really, I have encountered this kind of thing!). The (English-language) parser recognizes commands beginning DO, DOES or DID as equivalent to commands beginning ASK IF, but your topic vocab needs to cope with the rest.</p>

</div>
<hr class="navb"><div class="navb">
<i>adv3Lite Library Manual</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="actor.htm">Actors</a> &gt; 
Special Topics
<br><span class="navnp"><a class="nav" href="suggest.htm"><i>Prev:</i> Suggesting Conversational Topics</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="topicgroup.htm"><i>Next:</i> Topic Groups</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>