<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Actors &mdash; Changing the Player Character</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="actor.htm">Actors</a> &gt; 
Changing the Player Character
<br><span class="navnp"><a class="nav" href="initiate.htm"><i>Prev:</i> NPC-Initiated Conversation</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="final.htm"><i>Next:</i> Final Moves</a> &nbsp;&nbsp;&nbsp; </span>
</div>
<div class="main">
<h1>Changing the Player Character</h1>
<p>Many, perhaps most, works of Interactive Fiction stick to the same player character throughout. There are some games, however, in which the player character changes to another character during the course of the game, perhaps more than once, or perhaps swapping between two or more characters.</p>

<p>If the various characters never met, that is, none of the player characters never functioned as an NPC and were never in scope while the player was playing as another character, then changing from one player character to another would be almost as simple as setting <strong>gPlayerChar</strong> to the new player character and letting the player know what had happened. Where, however, the same Actor object may function as the player character at one point in the game and an NPC at another point, it becomes more complicated.</p>

<p>In this case we need to call <strong>setPlayer(actor)</strong>, where <em>actor</em> is the Actor object we want to become the new player character. This will become the actor from whose perspective the game is played from then one, and the one referred to by the parser as 'you'. If we want our new player character to be referred to in the first or third person, we have to supply setPlayer() with a second parameter, 1 or 3 respectively, for example <span class="code">setPlayer(bob, 1)</span> to make bob the new player character referred to as 'I' or  'me'.</p>

<p>If we do this we probably also want to let the player know what's just happened. To assist with this setPlayer() returns the previous name of the new player character, so when the player becomes Bob you could use code like this:</p>

 <p><div class="code"><pre>
 "You are now &lt;&lt;setPlayer(bob)&gt;&gt;. ";
 bob.getOutermostRoom.lookAroundWithin(); 
 </pre></div>

<p>Something else you can do to help players keep track of who they're now meant to be is to include the name of the player character in the status line. One way to do that might be to include it in parentheses after the room name, which we can do like this:</p> 
 
  <p><div class="code"><pre>
 modify Room
    statusName(actor)
    {
        inherited(actor);
        if(libGlobal.playerCharName != nil)
            " (as &lt;&lt;libGlobal.playerCharName&gt;&gt;) ";
    }
;
 </pre></div>
 
<p>Or, alternatively, if we prefer it:</p> 
 <p><div class="code"><pre> 
modify statusLine
    showStatusLeft()
    {
        inherited;
        if(libGlobal.playerCharName != nil)
            " [as &lt;&lt;libGlobal.playerCharName&gt;&gt;] ";
    }
; 
</pre></div> 

<p>Or again, if we didn't want the score and turn count at the right hand end of the status line we could do this:</p>
 <p><div class="code"><pre>
modify statusLine
    showStatusRight()
    {        
        if(libGlobal.playerCharName != nil)
            " [as &lt;&lt;libGlobal.playerCharName&gt;&gt;] ";
    }
;
</pre></div>
<p>You can use whichever of these you prefer, or devise your own variant.</p>

<a name="pcname"></a> 
<p>Note the use of <span class="code">libGlobal.<strong>playerCharName</strong></span> here. This is set by <span class="code">setPlayer()</span>, so that if we've never called <span class="code">setPlayer()</span> it will be nil (unless, of course, we set it ourselves, which we might want to do at the start of the game). We need it because we can't just use <span class="code">gPlayerChar.theName</span> to get at the player characters's name, since unless it's a third-person player character that would just be 'I' or 'you' (which is not very informative). </p> 
 
<p>Another thing to bear in mind is that if the same object is going to act as the player character at one time and an NPC at another, it should be defined as being of class Actor; the player character can be of class Thing, but this wouldn't be appropriate for an NPC. Again, when you're defining an actual or potential player character who might also become an NPC at some point, you should define it more or less as if it was an NPC, except for the <span class="code">person</span> property which may be 1 or 2 if this is the Actor that's starting out as the player character; for example:</p> 

 <p><div class="code"><pre> 
+ joan: Actor 'Joan; large; woman; her'
    "She's quite a large woman. "
    
    person =  2
;
</pre></div> 
<a name="ispc"></a> 
<p>One more point: the description you want in response to X ME when Joan is the player character will probably be a bit different from the description you want in response to X ME when Joan is an NPC. You can test for which is applicable using the <strong>isPlayerChar</strong> property of the Actor and write the desc property accordingly. A minimally varying one might look like this:</p> 
 
  <p><div class="code"><pre> 
+ joan: Actor 'Joan; large; woman; her'
    "&lt;&lt;if isPlayerChar&gt;&gt;You're&lt;&lt;else&gt;&gt;She's&lt;&lt;end&gt;&gt; quite a large woman. "
    
    person =  2
;
</pre></div> 

<p>In practice, you'd probably want to vary the two descriptions by more than this.</p>
 
 
</div>

<hr class="navb"><div class="navb">
<i>adv3Lite Library Manual</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="actor.htm">Actors</a> &gt; 
Changing the Player Character
<br><span class="navnp"><a class="nav" href="initiate.htm"><i>Prev:</i> NPC-Initiated Conversation</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="final.htm"><i>Next:</i> Final Moves</a> &nbsp;&nbsp;&nbsp; </span>
</div>
</body>
</html>