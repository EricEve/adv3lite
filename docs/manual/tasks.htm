<html><head><title>Task Topical Guide</title>
<link rel="stylesheet" href="sysman.css" type="text/css"></head>
<body><div class="topbar"><img src="topbar.jpg" border=0>
</div>
<div class="nav"><a class="nav" href="toc.htm">Table of Contents</a> | <a class="nav" href="final.htm">Final Moves</a> &gt; Task Topical Guide<br><span class="navnp"><a class="nav" href="manual_idx.html"><i>Prev:</i> Alphabetical Index</a></span></div>
<div class="main"><h1>Adv3Lite Task Topical Guide</h1>
<a name='top'></a>
<h2>Introduction</h2>
<p>This Topical Guide is provided as a kind of annotated topic index to the Library Manual. It's aim is to help guide you to the relevant section of the Library Manual for the task you're trying to perform (or the feature you're interested in), especially when neither this manual's Table of Contents nor its Alphabetical Index seems able to do the job. To use this Topical Guide, first look down its table of contents immediately below to find the link to the appropriate topic, and this will hopefully take you to a brief discussion pointing you to the relevant part of this manual. If that fails, you could try using your brower's search function (quite likely triggered by CTRL-F) to search on a term you hope will take you to the topic you want.</p>

<h2>Contents</h2>
<ol>
<li><a href='#starting'>Starting a New Game</a></li>
<li><a href='#map'>Laying out the Map</a>
<ul>
<li><a href='#rooms'>Rooms and Regions</a></li>
<li><a href='#directions'>Directions</a></li>
<li><a href='#connectors'>Connectors and Barriers</a></li>
<li><a href='#doors'>Doors, Passages and Stairs</a></li>
<li><a href='#pathfind'>Pathfinding</a></li>
<li><a href='#roomdesc'>Room Descriptions</a></li>

</ul>
<li><a href='#populating'>Populating the Map</a></li>
<ul>
<li><a href='#thing'<h2>Basic Portable Objects - Things</h2></a></li>
<li><a href='#containment'>Containment and Containers</a></li>
<li><a href='#fixtures'>Fixtures, Fittings and Furniture</a></li>
<li><a href='#locks'>Locks and Keys</a></li>
<li><a href='#gadgets'>Gadgets, Controls and Devices</a>
<li><a href='#vehicle'>Vehicles and PushTravelers</a></li>
<li><a href='#attach'>Attachables and Attachments</a></li>
<li><a href='#unthing'>Unthings and MinorItems</a></li>
<li><a href='#collective'>CollectiveGroups and Collectives</a></li>
</ul>
<li><a href='#sense'>Sense, Sensing and Sensory Connections</a></li>
<ul>
<li><a href='#senses'>Senses in Adv3Lite</a></li>
<li><a href='#senseconn'>Sensory Scope and Sensory Connections</a></li>
<li><a href='#light'>Light and Darkness</a></li>
</ul>
</ol>
<a name='starting'>
<h2>Starting a new Game</h2>
<p>To start a new game you need to create a new source file, that defines a gameMain object, a versionInfo object, a starting location, and the player character. You also need to ensure you include the adv3Lite library and the appropriate header files. This is all explained in the section on <a href="mingame.htm">Starting Out</a>. You may wish to pay particular attention to some further considerations on defining the <a href='actoroverview.htm#pc'>Player Character</a>.<br><br>
<a href='#top'>Back to top</a>

<a name='map'></a>
<h2>Laying out the Map</h2>
<p>For an example of defining a map, see the sample game <a href='../learning/Exercise 11.t'>Exercise 11</a>.
<a name='rooms'><h3>Rooms and Regions</h3></a>
<p>At a minimum, laying out the map involves the creation of one or more <a href='room.htm'>Rooms</a>. Rooms can be grouped in <a href='room.htm#regions'>Regions</a>, which are allowed to overlap. Normally, once defined in your game, the list of rooms making up a region cannot be changed during the course of play. If you need regions that can change, you can use the <a href='../../extensions/docs/dynregion.htm'>Dynamic Region</a> extension. A Room is normally a discrete unit of space, isolated from other rooms (apart from the possibility of travelling to them). To establish sensory connections (sight, sound and smell) between rooms you can use a <a href='senseregion.htm'>SenseRegion</p></a>

<a name='directions'><h3>Directions</h3></a>
<p>If your game contains more than one room, you will need to define connections between the different rooms to allow travel between them. The simplest method is to connect rooms direcly to each other according to their <a href='room.htm#directionprops'>direction</a> from each other.
 The directions defined by the library are the eight compass directions (north, northeast, eaat, etc.), the four shipboard directions (port, starboard, fore and aft), and the special directions in, out, up, down. In any room you can specify whether compass directions or shipboard directions are allowed<a href='room.htm#allowedDirections'></a>. You can also <a href='room.htm#directions'>define additional directions</a> (e.g., northnortheast, or left and right) if you need them in your game.</p>

<a name='connectors'><h3>Connectors and Barriers</h3></a>
<p>While travel connections can be made directly between rooms, they can also be made via various kinds of <a href='travel.htm'>TravelConnector</a>. In addition to providing travel connections between locations, TravelConnectors can carry out the side-effects of travel, such as displaying a message describing it, or impose conditional <a href='travel.htm#travelbarrier'>barriers </a>
to travel. The base TravelConnector is one way (RoomA to RoomB but not back) but there is also a two-way <a href='extra.htm#dstravelcon'>DSTravelConnector</a>. Various types of physical travel connector are described immediately below.</p>

<a name='doors'><h3>Doors, Passages and Stairs</h3></a>
<p>Doors, passages and stairs are types of TravelConnector that have physical presence in the game world.</p>
<p>A <a href='door.htm'>Door</a> can be open and closed, and optionally <a href='thing.htm#lockability'>lockable</a>, with or without a matching <a href='key.htm'>Key</a>. If the two sides of a door are substantially different you can define the two sides of the door using a linked pair of Door objects. If they are reasonably similar you can define the door as a single <a href='door.htm#dsdoor'>DSDoor</a> object. A <a href='extra.htm#secretdoor'>SecretDoor</a> is a Door that only acts like a Door when it's open. When it's closed it's either totally invisible, or it appears to be something else, such as a bookcase or a panel.</p>

<p><A <a href='extra.htm#travelconn'>Passage</a> represents a physical object (such as a passage, corridor or archway) through which an actor must pass to get from one location to another. A <a href='extra.htm#travelconn'>PathPassage</a> is a special kind of Passage that can be used to implement something like a path, track or road that a playey might try to FOLLOW, or GO DOWN or TAKE as synonyms for going through. A <a href='extra.htm#travelconn'>stairway</a> is something the player character can go up (StairwayUp) or down (StairwayDown), typically a flight of stairs but also any other climbable object such as a mast, tree or hillside. </p>
<p>Like doors, the Passage, PathPassage and StairwayUp/Stairway down classes define only one side of the travel connection. For their two-way equivalents use the <a href='extra.htm#ds'>DSPassage</a>, DSPathPassage and DSStairway classess. While all these classes implement two-way connections, they don't automate the connection back (for example, if you define the east property of the hall as pointing to a DSDoor that leads to the study, you still have to define the west property of the study as pointing to the same DSDoor. If you want two-way connectors that automate the setting up of reverse connections, you can use the <a href='../../extensions/docs/symconn.htm'>SymConnector</a> extension.</p>

<p>An <a href='extra.htm#enterable'>Enterable</a> is a fixture representing an object that can be entered, such as a house, hut or forest. The library mostly takes care of any <a href='pathfind.htm#proxy'>pathfinding issues</a> (the use of the GO TO command to navigate round the map) issues that might otherwise arise with Enterables that share a name with the location to which they lead.</p>

<a name='pathfind'><h3>Pathfinding</h3></a>
<p>Adv3Lite provides <a href='pathfind.htm'>pathfinding</a> as standard in the main library. This enables the player/player character to travel round the map using the GO TO command (provided the player character has already traversed the route). Pathfinding can also be used to control the movement of NPCs (non-player characters).</p>

<a name='roomdesc'><h3>Room Descriptions</h3></a>
<p>The basic description of a Room is defined on its desc property. The <a href = "room.htm#otherroomprops">roomFirstDesc</a>  property can be used to describe a room for the first time, and darkDesc to describe it in the absence of <a href='#light'>light</a>.  Although not strictly part of the business of laying out the map, now might be a convenient point to mention that several ways exist to customize how the contents of rooms are <a href='roomdesc.htm'>described</a>. If two or more rooms are in the same SenseRegion you can also customize how item are listed and described <a href='senseregion.htm#descriptions'>remotely</a>.

<br><br><a href='#top'>Back to top</a>.
<a name='populating'><h2>Populating the Map</h2></a>
<a name='thing'><h3>Portable Objects - Things</h3></a>
<p>All physical objects (including rooms) defined in an Adv3Lite game are either a <a href='thing.htm'>Thing</a> or of class that descends from Thing.</p>
<p>The <a href='thing.htm#basicprops'>basic properties</a> you need to define for a Thing in adv3Lite are its name, the vocabulary used to describe it, and its description.</p>
<p>The vocabulary (which defines how the player can refer to the object) is defined on the <a href='thing.htm#vocab'>vocab</a> property. Although this normally remains fixed during the course of play, there are ways of <a href='thing.htm#manipulatevocab'>changing</a>
it during a game. More control over what is matched by a Thing's vocab (e.g. to distinguish the green bottle from the dark green bottle, or the broad green bean from the green broad bean, when one set of words is a subset of the other or the same words are used but in a different order), you can use <a href='thing.htm#phrase'>Phrase Matching</a>.</p>

<p>By default all objects defined with the base Thing class are portable (that is, they can be picked up and carried around by the player character and other actors in the game). This can be changed by overriding isFixed to true on the Thing in question but is more usual to use one of the Fixture classes discussed <a href='#fixtures'>below</a>.

<a name='containment'><h3>Containment and Containers</h3></a>
<p>The  <a href='thing.htm#containment'>containment</a>  model allows things to be put in, on, under, or behind under things. This can be defined using various containment properties on Thing. The type of containment can be defined using the <a href='thing.htm#defining_containment'>contType</a> property, but is more usually dealt with by using one of the <a href='extra.htm#shallow'>Container</a> sublasses of Thing.</p>
<p>How much can be put in, on, under, or behind something is usually controlled by the <a href='thing.htm#bulk'>bulk and bulkCapacity</a> properties of the objects concerned. If you also want to model weight and weight capacity, this can be done using the <a href="..\..\extensions\docs\weight.htm">weight</a> extension.</p>
<p>If you want your container to have door (a cupboard door or safe door, for example), you can use the <a href='extra.htm#containerdoor'>ContainerDoor</a> class to implement it.</p>
<p>If you simply want to hide things in, under, and behind other things that wouldn't normally contain them, you can do so using the properties <a href='thing.htm#hidden'>hiddenIn</a>, hiddenUnder and hiddenBehind.</p>
<p>With that exception, each Thing can normally only implement one kind of containment (in or on or under or behind); you can, however, model multiple types of containing on the same object by using the <a href='thing.htm#remapxxx'>remapXXX</a> properties.</p>
<p>You can test for containment (what's in what and what contains what) using the relevant <a href='thing.htm#containmentprops'>properties</a> of Thing.<p>
<p>Usually (as you might expect), objects can only be in one place at a time &mdash; only one object can contain them at a time. You can however use the <a href='multiloc.htm'>MultiLoc</a> class to create objects that are in several places (usually rooms) at once. This can be useful for objects on the border of two different rooms, or for distant objects like the sun that are visible from multiple locations, or effectively identical decorations that occur across several rooms, such as trees in a forest.</p>
<p>For a short sample game illustrating various types of container see the <a href='../learning/exercise 13.t'>Kitchen</a>  sample game.

<br><br><a href='#top'>Back to top</a>

<a name='fixtures'><h3>Fixtures, Fittings, and Furniture</h3></a>
<p>Non-portable items are usually defined using the <a href='extra.htm#shallow'>Fixture</a> class, or its close relative, the Heavy class, the former being used for items that are fixed in place and the latter for those that are too heavy to lift.</p>
<p>Your game may contain a number of objects referred to in room descriptions, or in descrptions of other objects, or simply likely to be present (the sky in an outdoor location or trees in a forest) which the player may try to refer to but doesn't in fact need to interact with. These can be implemented using the <strong>Decoration</strong> class or its subclass <strong>Distant</strong> (used to model objects that are too far away for the player character to do anything but look at. These are normally very simple objects but you may occasionally want to apply some <a href='thing.htm#decoration'>customization</a>. By default the only commands Decoration objects respond to beyond saying "The whatever is not important" are EXAMINE and GOTO, but you can vary this in their <a href='thing.htm#decoration'>decorationActions</a> property. You may also want to tweak whether or not Decorations (or indeed other objects) are included in the list of objects acted on when the player types a command acting on ALL (e.g., EXAMINE ALL or TAKE ALL). This can be done with <a href='extra.htm#hidefromall'>the hideFromAll()</a> method. 
<p>If your game contains a lot of decorations, you can create set of decoration objects more succinctly using the <a href='scenery.htm'>Scenery</a> class.

<p>An <a href='extra.htm#enterable'>Enterable</a> is a fixture representing an object that can be entered, such as a house, hut or forest. The library mostly takes care of any <a href='pathfind.htm#proxy'>pathfinding issues</a> (the use of the GO TO command to navigate round the map) issues that might otherwise arise with Enterables that share a name with the location to which they lead.</p>


<p>Furniture (not least in the sense of things that the player character can get in or on) may or may not be fixed-in-place or too heavy to lift (it may often be, but some chairs could be readily portable, for instance). If the player is meant to be able to get in or on a piece of furniture it will need to be defined as a Booth or a Platform. You may then wish to define the <a href='thing.htm#reaching'>reachability</a> behaviour of such objects (controlling whether an actor located in a Booth or Platform can reach an object located outside it and whether and under what conditions one can reach an object or its contents). Adv3Lite does not keep track of actors' postures (standing, sitting, or lying), unless you include the <a href='../../extensions/docs/postures.htm'>postures</a> extension, but does provide <a href='thing.htm#posture'>pseudo-postural</a> properties that let you define which objects can be sat on, stood on, or laid on.</p>
<p>For an example of a sample game demonstrating various types of furniture and reachability, see the <a href='../learning/exercise 18.t'>Bedsitterland</a> sample game.</p>
<br><br><a href='#top'>Back to top</a>.
<a name='locks'><h3>Locks and Keys</h3></a>
<p><a href='door.htm'>Doors</a> and Containers may be made lockable by defining their <a href='thing.htm#lockability'>lockability</a> property. If a door or container is defined to be lockableWithKey, it is likely to require one or more matching <a href='key.htm'>keys</a>. You can use the <a href='extra.htm#shallow'>KeyedContainer</a> class to define an OpenableContainer that can be locked or unlocked with a key. See <a href='../learning/exercise 19.t'>Exercise 19</a> for a brief example game implementing various kinds of lock.</p>

<a name='gadgets'><h3>Gadgets, Controls and Devices</h3></a>
<p>The adv3Lite library defines a number of <a href='gadget.htm'>controls and gadgets</a> that can be used for a variety of purposes, including <a href='gadget.htm#button-iddx'>Button</a>, <a href='gadget.htm#lever-idx'>Lever</a>, <a href='gadget.htm#settables'>Settables and Dials</a>, <a href='extra.htm#shallow'>Switch</a> and <a href='extra.htm#misc'>Flashlight</a>, the last of which being any kind of light source that can be turned on and off, but never runs out of fuel or battery power. To implement a Flashlight or other device that can run out of power you can use the FueledLightSource mix-in class from the <a href='../../extensions/docs/fueled.htm'>Fueled Light Source</a> extension. <a href='../learning/exercise 19.t'>Exercise 19</a> also contains examples of many of these classes in the context of a small sample game.</p>
<p>For a computer the player character can look things up on (or book to look things up in) you can use the <a href='topicentry.htm'>Consultable</a> class (together with associated TopicEntries). For a mobile phone or computer with video chat software that can be used for the player character to talk to actors in remote locations, you can use <a href='query.htm#commlink'>commLink</a>. For a CCTV or window overlooking a remote location, you can use the <a href='../../extensions/docs/viewport.htm'>Viewport</a> extension.</p>

<a name='vehicle'><h3>Vehicles and PushTravelers</h3></a>
<p>A <b>Vehicle</b> is an object that an actor get in or on and which then moves around carrying the actor in response to movement commands (such as GO NORTH). To create a vehicle, first define an object of the <a href='extra.htm#shallow'>Booth or Platform</a> class and the set its <a href='thing.htm#vehicle'>isVehicle</a> property to true.</p>

<p>A <a href='thing.htm#pushing'>PushTraveler</a> is an object that can be pushed or pulled from place to place. To create a PushTraveler create an object of the appropiate class, such as <a href='extra.htm#shallow'>Heavy</a>, and set its <a href='thing.htm#pushing'>canPushTravel</a> to true.</p>

<p>The sample game <a href='../learning/Exercise 11.t'>Exercise 11</a> contains examples of both a vehicle (a bike) and a PushTraveler (a trolley).</p>

<a name='attach'><h3>Attachables and Attachments</h3></a>
<p>An <a href='attachable.htm'>Attachable</a> is something that can be attached to something else or have other things attached to it, in either case with the possibility that the objects might become detached again at some point. For something that's permamently attached to its parent object, it's usually better to use the <a href='extra.htm#shallow'>Component</a> class. For examples of Attachables see the <a href='../learning/Exercise 22.t'>Attachment</a> sample game.</p>

<a name='unthing'><h3>Unthings and MinorItems</h3></a>
<p>An <a href='extra.htm#unthing'>Unthing</a> can be used to report the <i>absence</i> of something, either something that's just been reported as leaving the area or going missing (like a key dropped down the drain or a ship that's just sailed out of sight), or possibly something that the player might expect to be there but it isn't (the moon when it's new on a cloudy night, for instance).</p>

<p>A <a href='extra.htm#minoritem'>MinorItem</a> is an unobtrusive and possibly unimportant portable object (minor item) that's worth implementing in the game but sufficiently minor as to be not worth mentioning in response to X or FOO ALL unless it's either directly held by the player character or directly in the enclosing room or directly in the actor's location. Note that this is different from a <a href='extra.htm#shallow'>Decoration</a>, which is normally fixed in place and can only be examined.</p>

<a name='collective'><h3>CollectiveGroups and Collectives</h3></a>
<p>A <a href='extra.htm#collective'>CollectiveGroup</a> can be used to represent a collection of objects for certain actions (usually just examined), such as a row of buttons or bank of switches, each of which is implemented separately, but which you'd like to summarize into a single description in response to X BUTTONS or X SWITCHES. The CollectiveGroup class should only be used for things that are fixed in place. For a portable collective group use the <a href='../../extensions/docs/mobilecollectivegroup.htm'>MobileCollectiveGroup</a> extension.</p>

<p>A Collective, on the other hand, means one object (such as a bunch of grapes) from which you might take one or more individual objects (in this case, grapes), which could lead to all sorts of disambiguation issues. For this situation you can use the Collective and or DispensingCollective class implemented in the <a href='../../extensions/docs/collective.htm'>Collective</a> extension.
</p>

<br><br><a href='#top'>Back to top</a>

<a name='sense'><h2>Sense, Sensing, and Sensory Connections</h2></a>
<a name='senses'><h3>Senses in Adv3Lite</h3></a>
<p>AdvLite makes provision for five senses: sight, sound, smell, taste and touch, with by far the bulk of the attention given to the first of these. At the most basic, the other four are catered for through the <a href='thing.htm#sensory'>Sensory Properties</a> of the Thing class (and hence all its descendent classes), which provide simple responses to LISTEN TO, SMELL, TASTE or TOUCH whatever.</p>
<p>The standard library also provides basic <a href='extra.htm#emanation'>Sensory Emanation Classes</a> called <b>Noise</b> and <b>Odor</b> to represented sounds and smells. If your game needs a more sophisticated handling of sounds and smells than these classes offer, you may want to consider including the <a href="../../extensions/docs/sensory.htm">Sensory</a> extension.</p>

<a name='senseconn'><h3>Sensory Scope and Sensory Connections</h3></a>
<p>By default, the player character can only sense what is in the same room in which he/she/it is currently located. In addition, the player character cannot see through a closed container, unless it has been declared to be <a href='thing.htm#sensory'>transparent</a>  (by defining isTransparent=true on the container).</p>
<p>To allow the player character (and other actors) to see, hear and smell objects in neighbouring location, the rooms need to be grouped together in a <a href='senseregion.htm'>SenseRegion</a>. This class also lets you control what can be perceived through which sense and how it is to be <a href='senseregion.htm#descriptions'>described from a remote point of view</a>.</p>

<p>For a mobile phone or computer that can be used for the player character to talk to (or videoconference with) actors in remote locations, you can use <a href='query.htm#commlink'>commLink</a>. For a CCTV or window overlooking a remote location, you can use the <a href='../../extensions/docs/viewport.htm'>Viewport</a> extension.</p>

<p>The sample game <a href='../learning/Exercise 21.t'>Sense and Sensibility</a> contains a number of examples of senses, sensing and sense regions.</p>

<a name='light'><h3>Light and Darkness</h3></a>
<p>In adv3Lite rooms are either light (isLit = true) or dark (isLit = nil). An object can also be made into a light source by defining or changing its isLit property to true. If the room or any visible object in the room is lit, then everything in the room can be seen and described (provided it's not hidden in a closed container or the like). If the room is dark and there is no light source, then by default nothing can be seen at all.</p>

<p>Adv3Lite also has some provision for semi-darkness. A room that is in near-darkness might still have some barely discernible features; the room class provides a number of <a href='room.htm#otherroomprops'>properties</a> that can be used to define what the room is called and how it is described in the dark, and what happens when the player character attempts travel in the dark, along with methods to test whether the room is illuminated. The Thing class provides a pair of properties for items that might be dimly discerned in a dark room: <a href='thing.htm#sensory'>visibleInDark and inDarkDesc</a>.

<p>If you need to model a greater range of light levels than this (total darkness, near total darkness, and full light) you can use the <a href='../../extensions/docs/brightness.htm'>Brightness</a> extension, which you can use to implement as many different lighting levels as you like.</p>

<p>To provide lightsources in your game, you can create objects whose isLit property is always or conditionally true. For a switchable light source use the <a href='extra.htm#misc'>Flashlight</a> class, which implements  any kind of light source that can be turned on and off, but never runs out of fuel or battery power. To implement a Flashlight or other device that can run out of power you can use the FueledLightSource mix-in class from the <a href='../../extensions/docs/fueled.htm'>Fueled Light Source</a> extension. <a href='../learning/exercise 17.t'>Light Sources</a> is a small sample game that contains examples of several of these classes along with a number of dark locations.</p>

<br><br><a href='#top'>Back to top</a>

</div><hr class="navb"><div class="navb"><i>adv3Lite Library Manual</i><br><a class="nav" href="toc.htm">Table of Contents</a> | <a class="nav" href="final.htm">Final Moves</a> &gt; Task Topical Guide<br><span class="navnp"><a class="nav" href="manual_idx.html"><i>Prev:</i>  Alphabetical Index</a></span></div></body></html>

