<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Final Moves &mdash; Lists and Listers</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="final.htm">Final Moves</a> &gt; 
Lists and Listers
<br><span class="navnp"><a class="nav" href="utility.htm"><i>Prev:</i> Utility Functions</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="webui.htm"><i>Next:</i> The Web UI</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">
<h1>Lists and Listers</h1>
 
<p>Works of Interactive Fiction often need to display lists. Typically these may be lists of objects visible in a room or a container, or a list of items held in the player character's inventory. There are generally two stages involved in displaying a list:</p> 
 
<ol>
<li>Generating the list of items (usually objects) that need to be displayed.</li>
<li>Formatting the list and displaying it on the screen. This stage may also include further filtering of the list.</li>
</ol> 
 
<p>The first stage is generally carried out by a method such as <span class="code">listContents()</span> or <span class="code">listSubcontentsOf()</span>, defined on Thing, or else a method define on the appropriate Action object, such as the <span class="code">execAction()</span> method of the Inventory action. More will be said about such methods <a href="#generating">below</a>. The second stage is carried out by a Lister, and it is Listers that we shall look at next.</p> 
<br>

<a name="listers" id="listers"></a> 
<h2>Listers</h2> 
<p>The purpose of a Lister is to format and display a list. The various types of lister all descend from the <span class="code">Lister</span> class, which defines the following methods:</p> 
 
<ul>
<li><strong>show(lst, paraCnt, paraBrk = true)</strong>: Show a list of objects.  <em>lst</em> is the list of objects to show; <em>paraCnt</em> is the number of paragraph-style descriptions that we've already shown as part of this description. Note, however, that many specific listers replace the <em>paraCnt</em> parameter with a more useful <em>parent</em> parameter, containing the identity of the object whose contents are being listed. If the optional <em>paraBrk</em> parameter is supplied it determines whether or not a paragraph break is added at the end of the list (if this parameter is not specified it defaults to true). The actual work of formatting and displaying the list of items (as opposed to the prefix and suffix text surrounding it) is carried out by a <strong>showList()</strong> method defined in the language-specific part of the library.</li>
<li><strong>showListPrefix(lst, pl, paraCnt)</strong>: Display the list prefix, that is the text that introduces a list (e.g. "In the oven you can see "). The <em>pl</em> parameter defines whether the list should be treated as singular or plural (so that any verb used can agree in number, e.g. "In the oven is/are "). many specific listers replace the <em>paraCnt</em> parameter with a more useful <em>parent</em> parameter, containing the identity of the object whose contents are being listed.</li>
<li><strong>showListSuffix(lst, pl, paraCnt)</strong>: Display the list suffix, that is the text that concludes a list (often that may simply be a full-stop/period, but it may be a longer piece of text if the list is displayed as a sentence with the list itself as the subject, e.g. "A ball, a pencil and a diamond are in the blue box. " where the suffix would be " are in the blue box. ")</li>
<li><strong>showListEmpty(paraCnt)</strong>: The text to display when the list of items to be displayed is empty (e.g. "The oven is empty. " or "You see nothing of interest in the red box. ")
</li>
<li><strong>listed(obj)</strong>: Determine whether <em>obj</em> should be listed in this list. Returns true if so, nil if not. By default, we list any object whose <span class="code">listed</span> property is true.</li>
<li><strong>listOrder(obj)</strong>: Get an item's sorting order.  This returns an integer that gives the relative position in the list; we order the list in ascending order of this value.  By default, we return the <span class="code">listOrder</span> property of the object.</li>
<li><strong>buildList(lst)</strong>:  Returns a string containing what this lister would display, minus the terminating paragraph break.</li>
</ul>

<p>From this you can able to see that the <span class="code">show()</span> and <span class="code">buildList() </span>methods are for use with an existing Lister (to make it display a list, or else return the list it would display in a single-quoted string), while all the rest are used when defining a Lister.</p> 
 
<a name="itemlister" id="itemlister"></a> 
<h3>ItemLister</h3>
<p>Many of the Listers actually used in a game are based on a subclass of Lister called <strong>ItemLister</strong>. This is base class of all the Listers used to list physical objects in a game. Several of the features of this Lister are defined in the language-specific part of the library, but the principal way in which an <span class="code">ItemLister</span> customizes the base <span class="code">Lister</span> class are as follows:</p> 

<ul>
<li><strong>show(lst, parent, paraBrk = true)</strong>: On the <span class="code">ItemLister</span> class the <em>paraCnt</em> parameter of the <span class="code">show()</span> method is replaced with a more useful <em>parent</em> parameter, which refers to the items whose contents are being listed. On ItemLister this method also marks every item in the list as <em>mentioned</em> (so that it won't get mentioned again in the same list) and notes that and where the player character has seen it.</li>
<li><strong>contentsListedProp</strong>: This property should contain a property pointer (the default value is <em>&amp;contentsListed</em>) that determines whether an item listed by this lister should have its contents listed in turn. Note that is it actually the Thing method <span class="code">listSubcontentsOf()</span> that makes use of this property when it is constructing a list of items to pass to a lister.</li>
<li><strong>listRecursively</strong>: flag, should the contents of items listed by this lister also be listed? This is true by default except on the <span class="code">openingContentsLister</span>, where it is nil, to suppress the (arguably intrusive) recursive listing of contents of contents when an openable container is opened.</li>
</ul>
 
<p>The language-specific part of the library in english.t defines the following additional methods on <span class="code">ItemLister</span>:</p> 
 
<ul>
<li><strong>showList(lst, pl, parent)</strong>: This method actually displays the body of the list (e.g. "a ball, a pencil and a diamond"). It is used by the <span class="code">showList()</span> method and in turn (by default) calls the <span class="code">andList()</span> function (see below) to format the list.</li>
<li><strong>listName(o)</strong>: This method is used to define how the name of an individual item should be shown in the list (e.g. "a ball"). This is more complex than it seems since this method is also responsible for displaying further status-related information about in item, such as '(being worn)' or a list of the item's contents (e.g. "a small red box (in which is a tie-pin and a paperclip)").</li>
<li><strong>showAdditionalInfo</strong>: flag - do we want to show additional information (such as 'providing light') after the name of items in this list. The default value is true.</li>
<li><strong>showWornInfo</strong>: flag - do we want to show '(being worn)' after the names of items in this list that are being worn. By default we use the value of <span class="code">showAdditionalInfo</span>. Note that the text ' (being worn)' can be customized by using a <a href="message.htm#custmessage_idx">CustomMessages</a> object to change the text of the <span class="code">being worn</span> BMsg.</li>
<li><strong>showSubListing</strong>: flag - do we want to show the contents of items listed in inventory (in parentheses after the name, e.g. 'a bag (in which is a blue ball)'). The default value on ItemLister is true but <span class="code">lookLister</span>, <span class="code">descContentsLister</span>, <span class="code">lookContentsLister</span>, <span class="code">lookInLister</span> and <span class="code">simpleAttachmentLister</span> all take the value of this property from <span class="code">gameMain.useParentheticalListing</span>.</li>
</ul> 
 
<a name="lister-types" id="lister-types"></a> 
<h3>Types of Lister</h3> 
 
<p>The adv3Lite defines a number of different types of Lister for various specific purposes. The definition of these listers is split between lister.t (which defines the base functionality) and english.t (which defines the language-specific aspects). The lister modifications in english.t generally do not use the BMsg()/DMsg() mechanism to generate text, since such indirection would be superfluous in a part of the library which is in any case language-specific and where modification may be more simply achieved by overriding the relevant methods such as <span class="code">showList()</span>, <span class="code">showListPrefix()</span>, <span class="code">showListSuffix()</span> and <span class="code">showListEmpty()</span>. </p> 

<p>The specific kinds of Lister defined in the library are:</p>
 
<ul>
<li><strong>lookLister</strong>: displays a list of top-level miscellaneous objects (i.e. those without a <span class="code">specialDesc</span> or <span class="code">initSpecialDesc</span>) in a room description.</li>
<li><strong>lookContentsLister</strong>: displays a list of the contents of objects in a room description (e.g. if the room description mentions a box, the <span class="code">lookContentsLister</span> would be used to list the contents of that box in the room description).</li>
<li><strong>remoteRoomContentsLister</strong>: the default Lister for listing miscellaneous objects in a remote location.</li>
<li><strong>inventoryLister</strong>: displays an inventory listing (i.e. a list of objects carried by the player character, or perhaps by an NPC).</li>
<li><strong>inventoryListerTall</strong>: displays an inventory listing in TALL (i.e. columnar) format.</li>
<li><strong>wornLister</strong>: displays a list of items being worn (usually by the player character).</li>

<li><strong>descContentsLister</strong>: displays a list of the miscellaneous contents (items without a <span class="code">specialDesc</span> or <span class="code">initSpecialDesc</span>) of an object that is being examined. Note that if the item being examined is an openable container this lister also reports whether it is open or closed, even if it doesn't contain anything, unless the item's <strong>openStatusReportable</strong> property is nil.</li>
<li><strong>openingContentsLister</strong>: displays the contents of an openable container when it is first opened. Note that in the English-specific part of the library (english.t) this lister is also responsible for reporting that the item has been opened when it is empty.</li>
<li><strong>lookInLister</strong>: lists the contents of an object in response to LOOK IN/UNDER/BEHIND.</li>
<li><strong>simpleAttachmentLister</strong>: lists the items attached to a <a href="attachable.htm">SimpleAttachable</a>.</li>
<li><strong>plugAttachableLister</strong>: lists the items plugged into a <a href="attachable.htm#plug">PlugAttachable</a>.</li>
<li><strong>CustomRoomLister</strong>:  A lister that can be readily customized to tailor the text before and after the list of miscellaneous items in a room description. For further details see the chapter on <a href="roomdesc.htm#customroomlister">Room Descriptions</a>.</li>
<li><strong>subLister</strong>: The subLister is used by other listers such as <span class="code">inventoryLister</span> and <span class="code">wornLister</span> to show the contents of listed items in parentheses (e.g. '(in which is a pen, a pencil and a piece of paper)'). The depth of nesting is limited by the subLister's <strong>maxNestingDepth</strong> property (which defaults to 1). Note that this lister is defined in english.t, not lister.t.</li>
<li><strong>remoteSubContentsLister</strong>:  the default Lister for listing the miscellaneous contents of objects in a remote location.</li>
<li><strong>finishOptionsLister</strong>: The lister used to list the options from which the player can choose when the game comes to an end. Note that this is defined in english.t, not lister.t, and that it descends from Lister but not ItemLister.</li>
</ul> 
<p>Note that all but the last of the above descend from ItemLister.</p>
 
<a name="custom" id="custom"></a> 
<h3>Customizing Listers</h3> 

<p>Customizing a lister is basically a matter of overriding one or more of the methods and properties described above. Most typically you might want to change the way a list is introduced or concluded by overriding <span class="code">showListPrefix()</span> or <span class="code">showListSuffix()</span>. You might want to do this globally, in which case you can just modify the lister concerned, for example:</p>

 <p><div class="code"><pre>
 modify lookLister
    showListPrefix(lst, pl, parent)
    {
        "Lying on the floor &lt;&lt;if pl&gt;&gt;are&lt;&lt;else&gt;&gt;is&lt;&lt;end&gt;&gt; ";
    }
    
    showListSuffix(lst, pl, parent)
    {
        ". ";
    }    
; 
 </pre></div>
 
<p>This would then affect the way in which miscellaneous items were listed in every room in the game. More typically, though, we might want to affect the way things are listed in a particular room or on a particular object, in which case we can override the appropriate property of Thing to point to a custom Lister object:</p> 
 
<ul>
<li><strong>roomContentsLister</strong>: The contents lister to use for listing this room's miscellaneous contents. By default we use the standard <span class="code">lookLister</span> but this can be overridden to use a CustomRoomLister (say) to provide just about any wording we like.</li>
<li><strong>remoteContentsLister</strong>: The contents lister to use for listing this room's miscellaneous contents when viewed from a remote location. By default we use <span class="code">remoteRoomContentsLister</span>.</li>
<li><strong>examineLister</strong>: The lister to use to list this item's contents when it's examined. By default we use <span class="code">descContentsLister</span>.</li>
<li><strong>myOpeningContentsLister</strong>:  The lister to use when listing this item's contents when it's opened. By default we use the <span class="code">openingContentsLister</span>.</li>
<li><strong>myLookInLister</strong>:  The lister to use when listing the objects inside this item in response to a LOOK IN or SEARCH command. By default we use the <span class="code">lookInLister</span>.</li>
<li><strong>myLookUnderLister</strong>: The lister to use when listing the objects under this item in response to a LOOK UNDER command. By default we use the <span class="code">lookInLister</span> (note this is not an error; the default lookInLister uses whatever preposition is appropriate to the item).</li>
<li><strong>myLookBehindLister</strong>: The lister to use when listing the objects behind this item in response to a LOOK BEHIND command. By default we use the <span class="code">lookInLister</span> (note this is not an error; the default lookInLister uses whatever preposition is appropriate to the item).</li>
<li><strong>myInventoryLister</strong>: The lister to use when listing this object's inventory. By default we use <span class="code">inventoryLister</span>.</li>
<li><strong>myWornLister</strong>: The lister to use when listing what this object is wearing. By default we use <span class="code">wornLister</span>.</li>
<li><strong>attachmentLister</strong>: The lister to use when listing what is attached to a <span class="code">SimpleAttachable</span>. By default we use <span class="code">simpleAttachmentLister</span>. On a <span class="code">PlugAttachable</span> we instead use <span class="code">plugAttachableLister</span>.</li> 
</ul> 
 
<p>To make use of these properties, you'd typically define your own custom lister based on the appropriate one from the library, and then attach it to the relevant property, probably as an anonymous object (unless you wanted to use the same custom lister on a number of different objects). For example, to customize the lister used when opening or looking in a box you could do something like this:</p> 
 
 <p><div class="code"><pre>
 + largeBox: OpenableContainer 'large box'
    
    myOpeningContentsLister: openingContentsLister
    {
        showListPrefix(lst, pl, parent)
        {
            "On ripping open the box {i} discover{s/ed} ";
        }
    }
    
    myLookInLister: lookInLister
    {
        showListPrefix(lst, pl, parent)
        {
            "Lurking inside the box &lt;&lt;if pl&gt;&gt;are&lt;&lt;else&gt;&gt;is&lt;&lt;end&gt;&gt; ";
        }
    }
;
 </pre></div> 
 
<p>For more information on customizing the way items are listed in room descriptions, see the chapters on <a href="roomdesc.htm">Room Descriptions</a> and (for remote rooms) <a href="senseregion.htm#descriptions">SenseRegions</a>. </p>
<br>
<a name="generating" id="generating"></a>
<h2>Generating Lists</h2> 
 
<p>So far we have been looking at techniques for formatting lists once we have a list of objects to format. The other part of the process is generating the list of objects in the first place. This happens in various places in the library. It will not be appropriate to go into all of them in too much detail here. Instead we shall simply give an overview and refer the interested reader to the relevant parts of the <a target=_blank href="../libref/index.html">Library Reference Manual</a> for the nitty-gritty low-level detail.</p> 
 
<p>The top-level method used to generate lists of objects for a room description is the Thing method <strong>listContents()</strong>. This has to generate not one but three lists: the list of items with specialDescs to show before the miscellaneous items, the list of miscellaneous items, and the list of items with specialDescs to show after the list of miscellaneous items. For items with specialDescs the method then just runs through each of the two lists showing the appropriate specialDesc or initSpecialDesc, having sorted the list in order of the <strong>specialDescOrder</strong> property. The list of miscellaneous items is displayed in between the two lists of items with specialDescs using the lister passed as a parameter to <span class="code">listContents(lister</span>), which defaults to <span class="code">roomContentsLister</span> (itself a property of Thing, which in turn defaults to <span class="code">lookLister</span>, the actual Lister object employed, as noted <a href="#custom">above</a>).</p> 
 
<p>The <span class="code">listContents()</span> method is further complicated by a number of other tasks it needs to perform, such as listing the contents of the player character's immediate location first, if the player character is in a nested room, ensuring that hidden items are excluded from the list, listing the contents of any remote locations if the senseRegion.t module is present, noting that any items listed have been seen by the player character, and listing any visible contents of any of the items just listed that want their contents listed (for which it calls the <span class="code">listSubContentsOf()</span> method). From this it can be seen that listContents() has a complex and specialized task to perform, and is used only to generate the lists of items to be shown in a room description.</p> 

<a name="subcontents" id="subcontents"></a>
<p>The Thing method <strong>listSubcontentsOf(contList, lister)</strong> is, as just mentioned, used to list the subcontents of the top-level contents of a room, but is used elsewhere in the library as well and could conceivably be called directly from game code. The <em>contList</em> parameter is supplied as a list of items (or a singleton item) whose contents are in turn to be listed. The optional <em>lister</em> parameter is the Lister object to be used to list the subcontents; if this parameter is not explicitly supplied it defaults to <span class="code">examineLister</span> (which is in turn a property of Thing which defaults to the <span class="code">descContentsLister</span> Lister objected, as noted <a href="#custom">above</a>). The listSubContentsOf() method sorts the list passed to it in <span class="code">listOrder</span> order and then excludes certain items from the list (those that are hidden, carried by an actor, impossible to see inside, or empty). It then goes through each item than remains in the list and divides it contents into objects with specialDescs to be listed before miscellaneous contents, the miscellaneous contents, and objects with specialDescs to be listed after the miscellaneous contents, excluding all objects that are hidden or already mentioned. Those items with specialDescs thus have their specialDescs shown, while any miscellaneous items are listed using the lister that was passed as the second parameter to <span class="code">listSubcontentsOf()</span>. Finally, the contents of all these items are then listed with a recursive call to <span class="code">listSubContentsOf()</span>. This may sound quite complicated, but the effect is to produce a complete list of everything that should be listed arranged in the correct order with specialDescs uses as appropriate and the listing carried on to the depth of nesting needed to list every visible object within the containment hierarchy of the list originally passed to <span class="code">listSubContentsOf()</span>. In short, <span class="code">listSubcontentsOf()</span> is the method to use to list the complete contents of anything (or a list of anything) that isn't a room.</p>

<p>In addition to being called from <span class="code">listContents()</span>, <span class="code">listSubcontentsOf()</span> is the method used to list the relevant contents of objects in response to an EXAMINE command (via the <strong>examineStatus()</strong> method), an OPEN command (when opening a container reveals its contents) and a LOOK IN, LOOK UNDER or LOOK BEHIND command. In the case of these last four commands, <span class="code">listSubcontentsOf()</span> is called from the action() section of the relevant <span class="code">dobjFor()</span> block. </p>
 
<p>Analogous methods are used to generate lists of items visible in remote locations when showing a room description. In particular the Thing method <strong>listRemoteContents(lst, lister, pov)</strong> overridden in senseRegion.t is used to list a set of items in <em>lst</em> from the point of view of an actor <em>pov</em> using the Lister <em>lister</em>. In essence it does much the same job for a remote location as <span class="code">listContents()</span> does for the player character's immediate location, but is only relevant when two or more locations are connected by sight within a <a href="senseregion.htm">SenseRegion</a>.</p> 

<p>Lists are also generated and/or used at various other places in the library, such as in the definition of the <span class="code">Inventory</span> action, the <strong>processOptions(lst)</strong> function used to display a list of options at the end of the game, a couple of places in actor.t that show lists of suggested topics, the <span class="code">examineStatus()</span> method of the <span class="code">SimpleAttachable</span> class and its subclasses (to list the attached objects), and the <span class="code">showFullScore()</span> method of the <span class="code">libScore</span> object (used to show a list of <a href="score.htm">achievements</a>). Interested readers are referred to the Library Reference Manual for details.</p>
 
<br>
<a name="functions" id="functions"></a> 
<h2>List-Related Functions</h2> 
 
<p>The language-specific part of the library (in english.t) defines a number of list-related functions that are used by the library and are also available to user code:</p> 
 
<ul>
<li><strong>makeListStr(objList, nameProp = &amp;aName, conjunction = 'and')</strong>: Takes a list of objects supplied in <em>objList</em> and return a formatted list in a single quoted string, having first sorted the items in <em>objList</em> in the order of their <span class="code">listOrder</span> property. If the <em>nameProp</em> parameter is supplied, we'll use that property for the name of every item in the list; otherwise we use the <span class="code">aName</span> property by default. By default the last two items in the list are separated by 'and', but we can choose a different conjunction by supplying the <em>conjunction</em> parameter. </li>
<li><strong>orList(lst)</strong>:  Returns a printable list of strings separated by "or" conjunctions (e.g. if <em>lst</em> is supplied as ['a duck', 'a rabbit', 'a partridge'] the function will return 'a duck, a rabbit and a partridge'). Note that the <em>lst</em> parameter should be supplied as a list of <em>strings</em>, not object, and the function returns a single string.</li>
<li><strong>andList(lst)</strong>: this is similar to <span class="code">orList()</span>, except that it returns a printable list of strings separated by "and" conjunctions.</li>
<li><strong>genList(lst, conj)</strong>: the general list constructor used by <span class="code">orList()</span> and <span class="code">andList()</span>; <em>lst</em> is the list of strings to be formatted into a single list, and <em>conj</em> is the oonjunction to use, supplied as a single-quoted string.</li>
<li><strong>mergeDuplicates(lst)</strong>: service function used by <span class="code">genList(</span>); takes a list of strings of the form ['a book', 'a cat', 'a book'] and merges the duplicate items to return a list of the form ['two books', 'a cat'].</li>
<li><strong>makeCountedPlural(str, num)</strong>: service function used by <span class="code">mergeDuplicates()</span>;  takes the string representation of a name (<em>str</em>) and a number (<em>num</em>) and returns a string with the number spelled out and the name pluralised, e.g. <span class="code">makeCountPlural('a cat', 3)</span> -&gt; 'three cats'. Also deals with the more complex cases such as <span class="code">makeCountedPlural('(taking the coin)'), 3)</span> -&gt; '(taking three coins)'; i.e. the function substitutes the number for the first occurrence of an article, if there is one.</li>
<li><strong>stripArticle(txt)</strong>: service function used by <span class="code">makeCountedPlural()</span>;  removes any definite or indefinite article that occurs at the beginning of
<em>txt</em>, and returns the resultant string in lower case.</li>
</ul> 
 
 
 
</div>
<hr class="navb"><div class="navb">
<i>adv3Lite Library Manual</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="final.htm">Final Moves</a> &gt; 
Lists and Listers
<br><span class="navnp"><a class="nav" href="utility.htm"><i>Prev:</i> Utility Functions</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="webui.htm"><i>Next:</i> The Web UI</a> &nbsp;&nbsp;&nbsp; </span>




</div>
</body>
</html>