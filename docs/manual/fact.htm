<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Optional Modules &mdash; Facts</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="optional.htm">Optional Modules</a> &gt; 
Facts
<br><span class="navnp"><a class="nav" href="extra.htm"><i>Prev:</i> Extras</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="gadget.htm"><i>Next:</i> Gadgets</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">
<h1>Facts</h1>
<h2>Overview</h2>
<p>Using <span class='code'>&lt;.reveal&gt;</span> and <span class='code'>&lt;.inform&gt;</span> tags helps keep track of what the player character and other NPCs know, but in a game of any size in which substantial amounts of information are exchanged it can be tricky to keep track of just what has been communicated to whom. For example, if in an exchange with Bob the tag <span class='code'>&lt;.reveal troubles&gt;</span> is used in Bob's response to a question about the lighthouse, and then an <span class='code'>&lt;.inform troubles&gt;</span> tag is used in part of what the player character tells Janet, just what has Bob told the player character about the troubles, and is it the same as what the player character goes on to tell Janet? As our game grows larger and we make increasing use of such tags, it can become increasingly hard to ensure we're using them consistently not only in our <span class='code'>&lt;.reveal&gt;</span> and <span class='code'>&lt;.inform&gt;</span> tags  but also our <span class='code'>isActive = gRevealed('tag')</span> conditions on TopicEntries. The Facts module offers a framework that can help impose order on the potential confusion and help automate a number of knowledge-related tasks. Its functionality can be extended, if needed, by also including the <a href="../../extensions/docs/factrelation.htm">Fact Relations</a> extension.
</p>


<p>The Facts module extends the adv3Lite knowledge system by allowing game authors to define Fact objects that encapsulate (and help to track and use) the information associated with &lt;.reveal&gt; and &lt;.inform&gt; tags, so for example there can be Fact object called 'rain-tomorrow' that encapsulates what information has been revealed by a <span class='code'>&lt;.reveal rain-tomorrow&gt;</span> tag and who knows about it and what game objects or topics it concerns. Note that in this context a Fact is something that has been asserted to be true by some person or object (e.g. book) in the game; not something that is necessarily in fact true.</p>

<p>Note that if the facts.t module is present in your game, your game must also include actor.t, topicEntry.t and thoughts.t.</p>

<p>The Facts module defines the following new classes and objects:</p>

<ul>
<li><a href='#factclass'><b>Fact</b></a>: objects of this class encapsulate facts along associated with the objects they concern and the people that know about them.</li>
<li><b><a href='#factmanager'>factManager</a></b>: the object that keeps track of which Fact is associated with which tag and provides several service methods.</li>
<li><b><a href='#facthelper'>FactHelper</a></b>: a mix-in class to provide additional Fact-related functionality to various kinds of TopicEntry.</li>
<li><b><a href='#fctopic'>FactConsultTopic</a></b>: A ConsultTopic incorporating the additional functionality provided by FactHelper.</li>
<li><b><a href='#factthought'>FactThought</a></b>: A Thought incorporating the additional functionality provided by FactHelper.</li>
</ul>

<p>In addition, this module adds a number of fact-related methods to the TopicEntry and ActorTopicEntry classes to facilitate the uses of Facts in <a href='#conversation'>conversation</a>.</p>

<p>These various classes enable the contents of Facts to be listed in response to commands like THINK ABOUT and LOOK UP under suitable conditions as well as keeping track of who has told the player character what, provided they are all used together in the correct way. This will all be explained in more detail below.</p>

<a name='factclass'></a>
<h2>The Fact Class</h2>
<p>A Fact encapsulates something that has been asserted as true (even if it may not be so); it does not necessarily correspond to what anyone believes to be the case. Indeed, a game might contain Facts that make contradictory assertions. See the section on <a href='knowledge.htm#belief'>Knowledge, Truth and Belief</a> for how to associate a character's evaluation of a fact with the fact in question.</p>
<p>The Fact class provides the following properties and methods for use by game authors:</p>

<ul>
<li><b>name</b>: A single-quoted string containing the name of this Fact, which must correspond with the <i>name</i> in any <span class='code'>&lt;.reveal <i>name</i>&gt;</span> or <span class='code'>&lt;.inform <i>name</i>&gt;</span> tag and the like that references this fact.</li>
<li><b>desc</b>: A description of what this Fact asserts, as a single-quoted string that could follow the word 'that', without any closing punctuation, e.g. 'it will rain tomorrow' or 'the capital of Spain is Madrid' or 'King Richard III was killed at the Battle of Bosworth in 1485'. If developments in your game make it appropriate to change the description of a fact, you can do so with the <b>redescFact(<i>name</i>, <i>newdesc</i>)</b> function, where <i>name</i> is the name of the Fact whose desc you want to change and <i>newdesc</i> is its new description.<//li>
<li><b>qualifiedDesc(source, topic, sender)</b>: an alternative description of what this Fact asserts when it is asserted by <i>source</i> and/or in relation to <i>topic</i>, although this alternative description must say essentially the same thing as <span class='code'>desc</span> (which is returned by default). For example, if the topic were 'Madrid' rather than 'Spain', qualifiedDesc might return 'Spain is the capital of Madrid' rather than 'the capital of Madrid is Spain'. The <i>sender</i> parameter gives the identity of the object that called this method, which can be used to help contextualize the text we wantit to display.</li>
<li><b>topics</b>: The list of topics (Topics and Things, i.e. game objects) that this Fact relates to. One use of this is to cause this Fact to be listed in response to THINK ABOUT <i>topic</i> or LOOK UP <i>topic</i> IN <i>whatever</i>.</li>
<li><b>initiallyKnownBy</b>: The list of actors and other objects - typically Consultables - that start the game knowing this Fact. For Facts, it is preferable to define this on the Fact rather than the objects' <span class='code'>initiallyKnowsAbout</span> property.</li>
<li><b>currentlyKnownBy</b>: returns a list of game objects (typically actors and Consultables) who currently know this Fact.</li>
<li><b>priority</b>: A measure of the importance of this Fact. The higher the priority, the earlier it will be listed in any list of Facts. The default priority is 100.</b>
<li><b>listOrder</b>: An alternative or additional way of determining the order in which Facts are listed. The lower the listOrder, the earlier in any list this Fact with appear.</li>
<li><b>adjustedPriority</b>: The number that's actually used to sort the listing order of Facts; by default it's defined as <span class='code'>priority - listOrder</span>. So, for example, you could set priority in multiples of 100 to band Facts by relative importance and use smaller integer values of listOrder to order those Facts within their priority bands.</li>
<li><b>getSources()</b>: returns a list of the actors and/or Consultables who have imparted this fact to the current player character.</li>
<li><b>getTargets()</b>: returns a list of the actors and/or Consultables (notebooks, perhaps?) to whom the current player character has imparted this fact.</li>
<li><b>pcComment</b>, <b>getPcComment(source, topic)</b> and <b>setPcComment(actor, txt)</b> will be explained below in relation to <a href='#comment'>FactThought</a>.</li>
<li><b>defaultTruthValue</b>: the truth value that most characters in this game who know of this fact are likely to give it. The default is true. Other possible values are likely, dubious, unlikely and untrue. This can be overridden for individual actors in our <span class='code'>initiallyKnownBy</span> list
by using a two-element list for them in place of just the actor, e.g. <span class='code'>[thomas, dubious]</span> instead of just <span class='code'>thomas</span>.
<li><b>relevant</b>: flag; is this Fact still relevant? By default this is true for all Facts, but it could be set to nil on a Fact that has ceased to be relevant due to developments in the game; you could, for example, define this property as an expression that changes from true to nil when a condition is met that renders the Fact obsolete. This is principally for use with <a href='#factthought'>FactThought</a>.</li>
</ul>
<p>The most commonly defined properties of any Fact are its name, topics, desc, and initiallyKnownBy properties. The library accordingly defines the following Template to facilitate Fact object definitions:</p>


<p><div class="code"><pre>
Fact template 'name' [topics]? 'desc' [initiallyKnownBy]?;
</pre></div></p>

<p>So a simple Fact might be defined like the following example:</o

<p><div class="code"><pre>
Fact 'madrid-capital' [tSpain, tMadrid]
   desc = 'the capital of Spain is Madrid'
   [me, travelBook]
;
</pre></div></p>
<p>Note that we don't need to give a Fact a programmatic name; it's known by its name property, and can be retrieved by calling <span class='code'>factManager.getFact(<i>name</i>)</span> or just <span class='code'>gFact(<i>name</i></span>). This example assumes that the player character object is called me, and that travelBook is a Consultable defined elsewhere in the game along with the Topics tSpain and tMadrid. We use me rather than gPlayerChar here, since if the player character changed during the course of the game, it would still be me to whom this Fact was initially known rather than the new player character, and this makes it clearer.</p>

<a name='factmanager'>
<h2>The factManager Object</h2>
<p>The purpose of the factManager object is to store a reference to every Fact defined in the game at preinit, and then provide a number of methods to allow Facts to be retrieved by their (single-quoted string) name. The most important factManager methods for game authors are:</p>

<ul>
<li><b>getFact(<i>name</i>)</b>: this returns the Fact object whose name is <i>name</i>.</li>
<li><b>getFactDesc(<i>name</i>)</b>: this returns the desc (fact description) of the Fact object whose name is <i>name</i>.</li>   
<li><b>getQualifiedFactDesc(<i>actor</i>, <i>tag</i>, <i>topic</i>, <i>sender</i>)</b>: this returns the qualifiedDesc of the Fact object whose name is <i>name</i> when the source or actor that imparted the fact to the player character is <i>actor</i> and the description has been requested in conjunction with <i>topic</i>, e.g. THINK ABOUT SPAIN. The <i>sender</i> argument will normally <span class='code'>self</span>y</li> 
<li><b>getPcComment(tag, topic)</b> and <b>setPcComment(tag, txt)</b> will be explained below in relation to <a href='#comment'>FactThought </a>
</li>
</ul>

<p>This should all become clearer with some examples of use when we put everything together below.</p>
<p>Note that <span class='code'>factManager.getFact(<i>name</i>)</span> can be abbreviated to the macro <b>gFact(<i>name</i>)</b> and <span class='code'>factManager.getFactDesc(<i>name</i>)</span> to the macro <b>gFactDesc(<i>name</i>)</b>.

<a name='facthelper'>
<h2>The FactHelper Mix-In Class</h2>
<p>The FactHelper class is provided to be mixed in with TopicEntries to give them additional functionality in connection with Facts, and in particular to allow the topicResponse methods of such TopicEntries to automatically list the known Facts related to the object the TopicEntry matched on. This will be most useful with ConsultTopics and Thoughts, resulting in the <a href='#fctopic'>FactConsultTopic</a> and FactThought classes which are discussed further below. Here we shall simply run through the methods and properties common to both these classes via FactHelper, before explaining their use on Thoughts and Consultables below.</p>

<ul>
<li><b>addLineBreaks</b>: Do we want to add line breaks between each Fact listed by our topicResponse() method, so that each Fact is listed on a new line (rather than all the Facts being listed in a single sentence). By default we do on FactThought but not on FactConsultTopic, where the single continuous sentence format may look more natural. Note that if we have only Fact to display we ise the single sentence format in any case.</li>
<li><b>listSources</b>: Do we want to report the sources of information for the Facts we list in our topicResponse()? By default we do on FactThought, where it may be important to the player to be reminded where the player character got the information from, but not on a FactConsultTopic, where it's obvious that the Consultable the FactConsultTopic belongs to (e.g., the book that the player character is looking something up in) is the source of the information.</li>
<li><b>updateSources</b>: Do we want our topicResponse() method to update the list of sources on the Facts it lists? We probably if we're mixed in with a ConsultTopic (to note the corresponding Consultable as the source of information) but not if we're mixed in with a Thought (since the Player Character must already effecitvely be a potential source of the information they're recalling).</li>
<li><b>matchObj</b>: FactHelper overrides this to <span class='code'>[Thing, Topic]</span> so that our TopicEntry will match anything.</li>
<li><b>prefix</b>: A single-quoted string containing the prefix to our list of facts, such as 'You recall' or 'The book informs me'.</li>
<li><b>factIntro</b>: A single-quoted string used to introduce every fact in our list. In English this is simply 'that'. We separate if from the <span class='code'>prefix</span> so it can be used to introduce every fact in the list; in the event that we have only one fact to display the <span class='code'>factIntro</span> will immediately follow the prefix and immediately precede the description of the fact.</li>
<li><b>suffix</b>: A single-quoted string that comes at the end of our list of facts (if they're all listed in one sentence) or at the end of each fact (if we list each one separately). By default we define this simply as '. '.</li>
<li><b>noFactsMsg</b>:  A single-quoted string containing the message to display if we don't find any matching facts. </li>
<li><b>knewFactAlreadyMsg</b>: A single-quoted string containing the parenthetical message to append to a listed fact if the player character has been informed of something they already knew, e.g. '(but you already knew that)'.</li>
<li><b>alreadyKnewMsg(fact)</b>: Method that returns <span class='code'>knewFactAlreadyMsg</span> if the player character started out knowing it from the beginning of the game or an empty string otherwise.</li>
<li><b>getFacts( )</b>: Method that returns a sorted list of the facts known to our actor that are associated with the topic matched by our TopicEntry.</li>
<li><b>topicResponse</b>: The topicResponse to be provided by the TopicEntry we're mixed-in with. This performs the main purpose of the FactHelper mix-in class by providing an automated suitably-formatted list of the facts (and possibly their sources) associated with the topic matched by our TopicEntry. This can be used to automate the response to THINK ABOUT X or LOOK UP X IN WHATEVER, provided Facts have been used elsewhere to provide previous responses.</li>
</ul>

<p>At first sight this may seem a rather daunting profusion of properties and methods, but for the most part you can accept the defaults defined on <a href='#factthought'>FactThought</a> and <a href='#fctopic'>FactConsultTopic</a>, which then become very easy to define and use, although you may of course want to customize the <span class='code'>prefix</span>, <span class='code'>noFactsMsg</span> and <span class='code'>knewFactAlreadyMsg</span> properties to provide your own messages.</p>

<a name='fctopic'>
<h2>FactConsultTopic</h2>
<p>A <b>FactConsultTopic</b> is simply a <span class='code'>FactHelper</span> mixed in with a <span class='code'>ConsultTopic</span> which can potentially handle all LOOK UP commands aimed at the Consultable. If we don't need to customize any of the FactConsultTopic's default messages, then defining a Consultable that can respond to a range of queries could be almost as simple as defining the Consultable object itself plus a single FactConsultTopic:</p>

<p><div class="code"><pre>
+ book: Consultable 'big red book'
    "It's a book full of miscelleanous wisdom. "        
;

++ FactConsultTopic
;
</pre></div></p>
<p>LOOK UP X IN BIG RED BOOK will then produce a sentence listing all the facts the book 'knows' about X (if it 'knows' any), or a message saying the big red book doesn't have any information on that subject if it doesn't, and that's our big red book more or less taken care of.</p>

<p>Except of course, we also have to define the Facts (and topics) we want out big red book to provide answers on, for example:</p>

<p><div class="code"><pre>
Fact 'spain-in-europe' [tSpain]
    'Spain is a country in Europe'
    [book]
;

Fact 'madrid-capital' [tSpain, tMadrid]
    'the capital city of Spain is Madrid'
    [book]
    
    qualifiedDesc(source, topic, narrator?)
    {
        if(topic == tMadrid)
            return 'Madrid is the capital city of Spain';
        else
            return desc;
            
    }
;

Fact 'europe-location' [tEurope]
    'Europe is a continent north of Africa, west of Asia, and east of the Atlantic. '
	[book]
;
</pre></div></p>
<p>And presumably a whole lot more. Note that the <span class='code'>[book]</span> at the end of every Fact definition is setting its <span class='code'>initiallyKnownBy</span> property; we're saying these three Facts are 'known by' (i.e. contained somewhere in the pages of) the big red book, which is therefore about to provide them. Note also that the 'madrid-capital' Fact will present the same fact slightly differently according to whether the player types ASK BOOK ABOUT SPAIN or ASK BOOK ABOUT MADRID; the latter will give the response 'Madrid is the capital of Spain.'</p>

<p>Note also that the FactConsultTopic also takes care of adding the Facts the player character looks up to the list of Facts the player knows about, so there's no need to include any <span class='code'>&lt;.reveal&gt;</span> tags here; it's taken care of automatically.</p>

<p>In addition, the FactConsultTopic also takes care of any enquiries the big red book doesn't 'know' about, by reporting that the big red book has no information on that topic, so there's no need to define any <span class='code'>DefaultConsultTopic</span> here.</p>

<p>Consultables such as books normally contain a fixed store of facts, but if we're implementing a notebook the player character can add information to or a computer database, we can expand its store of knowledge by calling its <b>setInformed()</b> method, e.g., <span class='code'>setInformed('rain-in-spain')</span> if we'd defined a 'rain-in-spain' Fact.</p>

<p>Finally, note that using a FactConsultTopic doesn't prevent our also populating our Consultable object with ordinary ConsultTopics as well. These will normally take precedence over our FactConsultTopic, since a FactConsultTopic has a matchscore of 50 while a regular ConsultTopic has a default matchscore of 100. You can that use ordinary ConsultTopics to field queries on topics you don't want to include in the Facts framework (though you may find it easier and more consistent to use the Facts framework for your Consultable throughout.</p>

<p>You may be wondering whether using a FactConsultTopic really saves you all that much work compared with using a series of ConsultTopics, since with the former you then have to define all the relevant Facts. The real gain from using a FactConsultTopic and related Facts comes when you use the same Facts elsewhere in your game (as we shall be illustrating below), since the Facts framework enables Facts to be consistently described in the different places they may be used, and helps you to keep track of what information each Fact encapsulates and of who needs what, without having to define lots of <span class='code'>isActive</span> properties on various TopicEntries and having to co-ordinate them all.</p>

<p>ConsultTopic referencing a Fact can also be defined as <a href='topicentry.htm#short'>Short-Form ConsultTopics</a> by using the fact's name string in place of the normal response string in a list of responses on the Consultable's <span class='code'>topicEntryList</span>. For example, you might have:</p>

<p><div class="code"><pre>
++ book: Consultable 'big red book'
    "It's a book full of miscelleanous wisdom. "
    bulk = 2
    
    topicEntryList = [
        ['weather', 'The weather can be difficult to predict. '],
        ['life', 'Life is generally to be preferred to the alternative. '],
        [tStairs, 'stairs-useful' ],
        [tEconomics, 'A dark art practised by sorcerers. '],        
        ['europe', 'europe-location'],
        [me, '''If you're looking for flattery you're doomed to disappointment. ''']   
    ]    
;

Fact 'europe-location' [tEurope]
    'Europe is a continent north of Africa, west of Asia, and east of the Atlantic'    
;

Fact 'stairs-useful' [tStairs, mainStairs]
    'stairs can be quite useful for connecting floors'
    pcComment = '(talk about telling you the bleeding obvious)'
;

</pre></div></p>

<p>In this case, the responses to LOOK UP WEATHER/LIFE/ECONOMICS/ME IN BOOK would simply be the strings defined as the second entry in each sub-list (e.g., "The weather can be quite difficult to predict."), whereas the responses to LOOK UP STAIRS/EUROPE IN BOOK would the desc property of the matching Fact (with name 'stairs-useful' or 'europe-location'), with the first character raised to upper case, and a full stop appended along with an appropriate <span class='code'>&lt;.reveal&gt;</span> tag, e.g., <span class='code'>&lt;.reveal europe-location&gt;</span>. This might then generate an exchange such as the following:</p>

<p><div class="cmdline"><pre>
<b>Hall</b>
From here stairs lead up to the floor above while the front door iies to the south. A passage leads north, and another room lies just to the east. 

You can see a wallet, a hat, an umbrella, a mobile phone, and a small table here.

On the small table you see a big red book.

<b>&gt;think about europe</b>
Nothing relevant comes to mind. 

<b>&gt;think about stairs</b>
Nothing relevant comes to mind. 

<b>&gt;look up europe in book</b>
Europe is a continent north of Africa, west of Asia, and east of the Atlantic. 

<b>&gt;look up stairs in book</b>
Stairs can be quite useful for connecting floors. 

<b>&gt;think about europe</b>
It comes to mind that the big red book told you that Europe is a continent north of Africa, west of Asia, and east of the Atlantic. 

<b>&gt;think about stairs</b>
It comes to mind that the big red book told you that stairs can be quite useful for connecting floors (talk about telling you the bleeding obvious). 

<b>&gt;look up life in book</b>
Life is generally to be preferred to the alternative. 
</pre></div></p>

<p>We'll say more about where such THINK ABOUT responses coeme from immediately <a href='#factthought'>below</a>. In the meantime you may be wondering how the gamne knows whether the second string element in each <span class='code'>topicEntryList</span> sublist is to be treated as literal text to be displayed or as the name of a Fact. The answer is it's treated as the latter if there's a Fact in the game with a name corresponding to the string, and the former otherwise.</p>

<a name='factthought'>
<h2>FactThought</h2>
<p>A <b>FactThought</b> is a FactHelper mixed-in with a Thought, with some of its properties suitably overridden to give useful responses to commands like THINK ABOUT SPAIN (or whatever). Such commands will then list all the Facts the player character knows about the relevant topic, together with the sources of that information and (if any such sources are listed) if the player character also  started out knowing about that topic in any case. A FactThought does not, however, update the player character's state of knowledge, since it's assumed that thinking about something the player character already knows does not alter what s/he knows.</p>

<p>Just for the sake of illustration, suppose the only thing our Player Character starts out 'knowing' about Spain (or the weather) comes from one of the songs in <q>My Fair Lady</q>:

<p><div class="code"><pre>
Fact 'rain-in-spain' [tWeather, tSpain]    
    'the rain in Spain stays mainly in the plain'    
    [me]    
    
    priority = 110
;
</pre></div></p>

<p>Suppose next we define a <a href='thought.htm'>ThoughtManager </a> (to hold the player character's thoughts) and we define just one regular Thought plus a FsctThought:</p>

<p><div class="code"><pre>
myThoughts: ThoughtManager;

+ Thought 'life'
    "You've always considered it preferable to the alternative. "
;

+ FactThought
;

</pre></div></p>

<p>Suppose finally that our player character is carrying the big red book we used to illustrate the use of <a href='#fctopic'>FactConsultTopic</a>. We might then get the following transcript from our minimally implemented game:</p>

<p><div class="cmdline"><pre>
<b>&gt;think about life</b>
You&rsquo;ve always considered it preferable to the alternative. 

<b>&gt;think about bananas</b>
Nothing relevant comes to mind. 

<b>&gt;think about spain</b>
It comes to mind that the rain in Spain stays mainly in the plain. 

<b>&gt;think about weather</b>
It comes to mind that the rain in Spain stays mainly in the plain. 

<b>&gt;think about madrid</b>
Nothing relevant comes to mind. 

<b>&gt;look up spain in book</b>
The big red book informs you that the capital city of Spain is Madrid and that Spain is a country in Europe. 

<b>&gt;think about spain</b>
It comes to mind that:
The rain in Spain stays mainly in the plain.
The big red book told you that the capital city of Spain is Madrid.
The big red book told you that Spain is a country in Europe.

<b>&gt;think about madrid</b>
It comes to mind that the big red book told you that Madrid is the capital city of Spain. 

<b>&gt;think about europe</b>
Nothing relevant comes to mind. 
</pre></div></p>

<p>This is just a toy example, of course, but it illustrates what can be done with a <span class='code'>FactThought</span> and also the potential saving of effort once different parts of the Facts framework start to be used together. In the previous section we defined a Consultable and small collection of Facts it can provide information on. With that done, we have very little work to do to enable the player character to recall what s/he has learned from the Consultable; the single FactThought has pretty much done all the work for us.</p>

<p>There are, however, a few more points to note here:</p>
<ul>
<li>Any regular <span class='code'>Thought</span> (such as the one about life in our example) takes precedence over our 
<span class='code'>FactThought</span> (since a <span class='code'>FactThought</span> has a <span class='code'>matchScore</span> of 50 rather than the default 100.</li>
<li>Since some if not many of the player character's thoughts may be about things other than facts they know or have learned, such as plans, feelings, opinions, suspicions and the like, you may well need to implement a number of <span class='code'>Thought</span> objects as well as the <span class='code'>FactThought</span> that deals with the factual topics (as well as acting as catch-all default for topics that haven't been implemented).</li>
<li>You may, of course, wish to tailor the catch-all default response (by overriding the <span class='code'>noFactsMsg</span> on the <span class='code'>FactThought</span>), but it's best not to do so with any response implying the player character's ignorance of the topic (otherwise you risk getting incongruous responses to commands like THINK ABOUT YOUR MOTHER or THINK ABOUT YESTERDAY).</li>
<li>Dont't forget that you have considerable control over how a <span class='code'>FactThought</span> presents its responses through the various properties defined on <a href='#facthelper'>FactHelper</a>. If you don't want it to list the sources of information, or to list each fact on a separate line, or you'd rather the facts were introduced by 'It occurs to you that' rather 'You recall that', these are all things you can customize.</li>
<li>It's possible that developments in a game/work of IF render some Facts no longer relevant; e.g., if the response to THINK ABOUT MAVIS includes 'Mavis wants you to retrieve a letter', it could well seem redundant to list this once the letter has been retrieved. One way to deal with this would be to set <b>relevant</b> to nil on the Fact in question (or define its <span class='code'>relevant property</span> to evaluate to nil once Mavis is in possession of the letter. The other is to change the description of the fact by using the <b>redescFact(tag, newdesc)</b> function e.g., <span class='code'>redescFact('retrieve-letter', '[mavis] needed you to retrieve a letter, but you\'ve done that now')</span>.</li>

</ul>

<a name ='comment'></a>
<h3>The Player Character's Comments on Facts</h3>
<p>The FactThought does a good job of listing what the player character knows about a given topic, but there's one more customization we can make if we wish, and that is to append the player's comments on any fact which a FactThought list, so that, for example, instead of:</p>

<p><div class="cmdline"><pre>
<b>&gt;think about spain</b>
It comes to mind that:
The rain in Spain stays mainly in the plain.
The big red book told you that the capital city of Spain is Madrid.
The big red book told you that Spain is a country in Europe.
</pre></div></p>

<p>You could get:</p>

<p><div class="cmdline"><pre>
<b>&gt;think about spain</b>
It comes to mind that:
The rain in Spain stays mainly in the plain &mdash; or so the song goes.
The big red book told you that the capital city of Spain is Madrid.
The big red book told you that Spain is a country in Europe &mdash; not that you’ve ever been to Europe.
</pre></div></p>

<p>To facilitate setting this up, the following additional properties/methods are defined on <b>Fact</b>:</p>
<ul>
<li><b>pcComment</b>: A single-quoted string containing the initial player character's initial comment or thought on this
     Fact; this can be left at nil if the PC doesn't have one. This will be appended to the
     description of this Fact when listed by a Thought, so should be a sentence fragment
     starting with a lower case letter (or some form of parenthetic punctuation) and without a
     full stop at the end.</li> 
	 
<li><b>getPcComment(source, topic)</b>: Get the current player character's comment on this Fact; source is the source from which
     the PC learned the Fact and topic is the topic the Player Character is thinking about. By
     default this method returns different results for different player characters, but game
     code will need to override this method to return different comments for different sources
     and/or topics.</li>
<li><b>setPcComment(actor, txt)</b>: Set actor's comment on this fact; normally actor will be the current player character; txt
     is a single-quoted string containing the comment, which will usually be appended to the
     description of the fact.</li>
</ul>

<p>Note that in some circumstances the library may append a comment if you don't define one yourself. In particular if the player character regarda a Fact not as probable, dubious, improbable or untrue the FactHelper class will append a notice to that effect.</p>

<p>And on <b>factManager</b>:</p>
<ul>
<li><b>getPcComment(tag, topic)</b>: Get the player character's comment on the fact whose name is tag when it is retrieved in
     relation to topic (typically by a THINK ABOUT topic commannd).</li>
<li><b>setPcComment(tag, txt)</b>: Set the current player character's comment on the Fact identified by tag; txt is a
    single-quote string containing the comment.</li>
</ul>

<p>The <span class='code'>factManager</span> methods merely call the equivalent methods on the relevant <span class='code'>Fact</span>. They are provided so that Player Character comments can be set or retrieved in one statement instead of first having to call <span class='code'>gFact(tag)</a> to retrieve the fact, then checking that the retrieved fact is not nil, and then calling the appropriate method on that fact.</p>

<p>To achieve the results in the example above, we'd simply define the initial player character's initial comments on the relevant facts:</p>

<p><div class="code"><pre>
Fact 'rain-in-spain' [tWeather, tSpain]    
    'the rain in Spain stays mainly in the plain'    
    [me]    
    
    pcComment = '--- or so the song goes'
;

Fact 'spain-in-europe' [tSpain]
    'Spain is a country in Europe'
    [book]
    
    pcComment = '--- not that you\'ve ever been to Europe'
;

</pre></div></p>

<p>If the player character's thoughts on any given fact subsequently change, they can be set (or reset) using <span class='code'>factManager.setPcComment(tag, txt)</span> or calling the fact's <span class='code'>setPcComment(actor, txt)</span> method. These methods can also be used to set the comments of a new player character should the player character change in the course of the game.</p>

<a name='conversation'>
<h2>Facts and Conversation</h2>
<p>While you're free to experiment with mixing in the FactHelper class with various kinds of <a href='actortopicentry.htm'>ActorTopicEntry</a>,  and this may be fine if the NPC is meant to be a robot (or someone with a peculiarly robotic personality), it is likely to come over as rather too wooden for most human NPCs. The Facts module therefore provides various modifications to the <span class='code'>TopicEntry</span> and <span class='code'>ActorTopicEntry</span> classes to allow them to be used with Facts in a more flexible way more suited to the flow of a conversation. The former set of modifications can be used for games where the author wants the flexibility of using Facts to provide (part of) the text of conversational responses without having to worry about which Facts are known by which NPCs or which topics any given Fact is associated (after all, an NPC might choose to respond to an enquiry about one subject by citing a fact about some completely different subject. The latter set can be used for games where you're happy to keep track of NPC knowledge (including what NPCs start out by knowing) and to keep discussion of facts strictly confined to the topics they relate to, in return for the library doing a bit more of the other work for you. Yo are, of course, free to mix and match both approaches in your game if that works for you.</p>

<p>The additional methods defined on <b>TopicEntry</b> are:
<ul>
<li><b>revealFact(tag, msg?)</b>: This method displays the desc of the Fact referenced by <i>tag</i> as described by the NPC the player character is in conversation with in relation to the topic matched, adds the PC's conversation partner to the list of sources for this fact, and adds the fact's name tag to the list of topics the Player Character knows about. Note that it does not check whether the PC's current interlocutor knows this Fact or whether this Fact is related to the current topic of conversation.</li>
<li><b>informFact(tag, <span class='comment'>[actor]</span>, msg?)</b>: This method displays the description of the Fact referenced by <i>tag</i> as described by <i>actor</i> in relation to the topic matched, adds the PC's conversation partner to the list of targets for this fact, and adds the fact's name tag to the list of topics <i>actor</i> knows about. Note that it does not check whether the Player Character knows this Fact or whether this Fact is related to the current topic of conversation. The second, <ii>actor</i> parameter is optional and defaults to the player character's current interlocutor (the normal case) if not supplied.</li>
<li><b>factText(tag, <span class='comment'>[actor]</span>)</b>: This method simply displays the described of the Fact referenced by <i>tag</i> as described by <i>actor</i> in relation to the topic matched. The second, <ii>actor</i> parameter is optional and defaults to the player character's current interlocutor (the normal case) if not supplied. </li>
</ul>
<p>The function of the optional <i>msg</i> parameter will be discussed below, in the context of explaining how the use of Facts in conjunction with TopicEntries can be made more <a href='#flexibility'>flexible</a>.

<p>For example, using the first and last of these methods, we could define a TopicEntry thus:</p>

<p><div class="code"><pre>
+ AskTopic, StopEventList @tWeather    
    [
       '&lt;q&gt;\^&lt;&lt;revealFact('rain-tomorrow')&gt;&gt;&lt;/q&gt; Bob warns you. ',        
       'Bob has already told you &lt;&lt;factText('rain-tomorrow')&gt;&gt;. '        
    ]       
;
</pre></div></p>
<a name='addmeth'></a>
<p>The additional methods defined on <b>ActorTopicEntry</b> are:</p>
<ul>
<li><b>aTag</b>: the knowledge tag (fact name string) associated with this ActorTopicEntry when the player character is asking the NPC something (i.e. on an <a href='asktell.htm'>AskTopic</a> or <a href='specialTopic.htm#querytopic'>QueryTopic</a>). The ActorTopicEntry will then match the topics associated with this fact, but will only be active (and hence accessible) if the current interlocutor knows the fact in question. Note that we can still override the TopicEntry's matchObj to match some other topic or list of topics if we wish, although this may risk defeated the object.</li>
<li><b>tTag</b>: the knowledge tag (fact name string) associated with this ActorTopicEntry when the playerChar is telling the NPC something (i.e. on a <a href='asktell.htm'>TellTopic</a> or <a href='specialtopic.htm#saytopic'>SayTopic</a>). The ActorTopicEntry will then match the topics associated with this fact, but will only be active (and hence accessible) if the current interlocutor knows the fact in question. Note that we can still override the TopicEntry's matchObj to match some other topic or list of topics if we wish, although this may risk defeated the object. Note also that it makes no sense to define both aTag and tTag on the same TopicEntry; if aTag is non-nil tTag will be ignored.</li>
<li><b>revTag(msg?)</b>: calls <span class='code'>revealFact(aTag)</span> --- for which see above --- and returns its return value, which can then be used to construct this ActorTopicEntry's topicResponse. This would typically be used on an AskTopic or QueryTopic</li>
<li><b>infTag(msg?)</b>: calls <span class='code'>informFact(tTag)</span> --- for which see above --- and returns its return value, which can then be used to construct this ActorTopicEntry's topicResponse. This would typically be used on a TellTopic or SayTopic<</li>
<li><b>fText()</b>: returns the value of <span class='code'>factText(aTag ?? tTag)</span>, in other words <span class='code'>factText(aTag)</span> if <span class='code'>aTag</span> is not nil and <span class='code'>factText(tTag)</span> otherwise. </li>
</ul>

<p>(The names <b>aTag</b> and <b>tTag</b> were chosen to suggest <b>a</b>sking and <b>t</b>elling, but if you prefer you can use the names <b>rTag</b> and <b>iTag</b> respectively to suggest <b>r</b>eveal and <b>i</b>nform, thus matching the names of the <span class='code'>revTag()</span> and <span class='code'>infTag()</span> methods; <span class='code'>rTag</span> and <span class='code'>iTag</span> are simply macros which translate to <span class='code'>aTag</span> and <span class='code'>tTag</span> respectively.)</p> 

<p>Armed with these additional resources we could implement the previous example thus:</p>

<p><div class="code"><pre>
+ AskTopic, StopEventList   
    [
        '&lt;q&gt;\^&lt;&lt;revTag(),&gt;&gt;&lt;/q&gt; Bob warns you. ',
        'Bob has already told you &lt;&lt;fText()&gt;&gt;. '
        
    ]
    aTag = 'rain-tomorrow'
;
</pre></div></p>

<p>Suppose that in addition to the previous example Facts, and an actor called Bob, we have also defined:</p>

<p><div class="code"><pre>
Fact 'rain-tomorrow' [tWeather]
    'it will rain tomorrow'    
    [bob]
    
    qualifiedDesc(source, topic, narrator?)
    {
        if(source == bob)
            return 'it\'ll rain tomorrow';
        else
            return desc;;            
    }
;
</pre></div></p>

<br>

<p>Then, with the AskTopic as defined above (plus a suitable HelloTopic on Bob) we should get:</p>

<p><div class="cmdline"><pre>
<b>&gt;think about weather</b>
You recall that the rain in Spain stays mainly in the plain &mdash; or so the song goes. 

<b>&gt;ask bob about weather</b>
&ldquo;Hello, Bob,&rdquo; you say.

&ldquo;Hello, you,&rdquo; he replies. 
&ldquo;It&rsquo;ll rain tomorrow,&rdquo; Bob warns you. 

<b>&gt;think about weather</b>
You recall that:
The rain in Spain stays mainly in the plain &mdash; or so the song goes.
Bob told you that it will rain tomorrow.
</pre></div></p>

<a name='saytopic'>
<p>One kind of ActorTopicEntry the Facts module makes special provision for is the <a href='specialtopic.htm#saytopic'>SayTopic</a>. The standard way of using a SayTopic is illustrated in the following example:</p>

<p><div class="code"><pre>
+ SayTopic 'you\'re not afraid of the dark tower; you are i\'m i am'
  "&lt;q&gt;I'm not afraid of the dark tower, you know,&lt;/q&gt; you boast.\b
   &lt;q&gt;Well, you should be,&lt;/q&gt; Bob warns you. "
;
</pre></div>

<p>Now suppose we'd like to enapsulate 'you're not afraid of the dark tower' into a Fact which Bob is informed of when this SayTopic is triggered:</p>

<p><div class="code"><pre>
Fact 'not-afraid' [tTower]
    'you\'re not afraid of the dark tower'
    [me]	
    qualifiedDesc(source, topic, narrator?)
    {
        if(narrator == speaker)
            return 'i\'m not afraid of the dark tower';
        else 
            return desc;
        
    }
;
</pre></div>

<p>We could then re-write our SayTopic as:</p>

<p><div class="code"><pre>
+ SayTopic 'not-afraid' 'you are i\'m i am'    
    &quot;&lt;q&gt;\^&lt;&lt;infTag()&gt;&gt;, you know, &lt;/q&gt; you boast.\b
     &lt;q&gt;Well, you should be,&lt;/q&gt; Bob warns you. &quot;
;
</pre></div>

<p>The template we're employing here is:</p>

<p><div class="code"><pre>
SayTopic template
    +matchScore?
    'tTag' 'extraVocab'
    "topicResponse" | [eventList] ?;

</pre></div>

<p>So in our example, 'not-afraid' is the fact tag for the Fact we want to use and 'you are i\'m i am' is the extraVocab we need so that our SayTopic will match commands like I AM NOT AFRAID as well as SAY YOU'RE NOT AFRAID. If you use this template, this second element <i>must</i> be present, even if it's only the empty string '' (otherwise the compiler won't know which template it's meant to be matching). What happens here is that at preinit, our SayTopic sets its name to <span class='code'>gFact(tTag)</span> and then adds <span class='code'>'; ' + extraVocab</span> to the name to create the vocab the SayTopic matches.</p>


<a name='initiate'></a>
<p>The Facts module also makes a small change to <b>InitiateTopic</b> to allow TopicEntries of this class to match fact name tags (as well as Things, Topics and matchPatterns). This would allow us to define an InitiateTopic such as the following:</p>

<p><div class="code"><pre>
+ InitiateTopic 'jumping-silly'
    topicResponse()
    {
        &quot;&lt;q&gt;\^&lt;&lt;revTag()&gt;&gt;,&lt;/q&gt; says Bob. ";
    }
;

Fact 'jumping-silly' [tJumping]
    'jumping is silly'
    [bob]
;
</pre></div></p>

<p>We can then trigger this response with a call to <span class='code'>bob.initiaeTopic('jumping-silly')</span>, for example:</p>

<p><div class="code"><pre>
bob: Actor 'Bob;;;him' @lounge
    actorAfterAction()
    {
        if(gActionIs(Jump))
            initiateTopic('jumping-silly');
    }
;
</pre></div></p>

<p>If the <b>revealing</b> property of such an InitiateTopic is true (as it is by default), its <span class='code'>aTag</span> property will be set to the fact name just matched, so that we can use the <span class='code'>revTag()</span> method as in the example above. The thinking here is that setting <span class='code'>revealing</span> to true implies that the InitiateTopic is stating a Fact which is accordingly revealed to the player character. If, however, the InitiateTopic is asking a question, we should set <span class='code'>revealing</span> to nil, since asking a question does not convey any facts (in the sense of this Fact module). Whether <span class='code'>revealing</span> is true or nil, providing that there is a fact name corresponding to the string the InitiateTopic matches, its <span class='code'>topicMatched</span> property will be set to that corresponding fact.</p>
<br>
<h2>Contextualising qualifiedDesc</h2>

<p>We have already seen how we can use the <span class='code'>qualifiedDesc()</span> method to adjust the description of a fact to its context, but there is one common case the library's definition of <span class='code'>qualifiedDesc()</span> can handle for us, provided we define our desc in a way that makes it clear what we want it to do.</p>

<p>Suppose we have defined a Fact such as the following:</p>

<p><div class="code"><pre>
Fact 'bob-likes-cousin' [tCousin]
    'Bob likes his cousin'
    [bob]
;
</pre></div></p>

<p>Together with an AskTopic for bob such as:</p>

<p><div class="code"><pre>
++ AskTopic @tCousin
    "&lt;q&gt;&lt;&lt;revealFact('bob-likes-cousin')&gt;&gt;,&lt;/q&gt; Bob tells you. "
    
    name = 'his cousin'    
;
</pre></div></p>

<p>Without any further adaptation, this would give us:</p>

<p><div class="cmdline"><pre>
<b>&gt;ask bob about cousin</b>
“Bob likes his cousin,” Bob tells you.

<b>&gt;think about cousin</b>
You recall that Bob told you that Bob likes his cousin.
</pre></div></p>

<p>Which probably isn't what we want. But rather than diving into qualifiedDesc() to try to arm-wrestle it into producing something more appropriate, we can instead leave qualifiedDesc() as it is and instead change the way we write our Fact's desc:</p>


<p><div class="code"><pre>
Fact 'bob-likes-cousin' [tCousin]
    '[bob] like{s/d} [his] cousin'
    [bob]
;
</pre></div></p>

<p>We'll then get:</p>

<p><div class="cmdline"><pre>
<b>&gt;ask bob about cousin</b>
“I like my cousin” Bob tells you.

<b>&gt;think about cousin,</b>
You recall that Bob told you that he likes his cousin.
</pre></div></p>

<p>Tbis works by means of qualifiedDesc() working out the context of the utterance (e.g., whether it's the subject of the sentence, here Bob, who's speaking or whether what's being reported is what he told you before, e.g. 'Bob told you that') and then replaces the square-bracketed text (here '[bob]' and '[his'] with the <a href='message.htm#parameter'>message parameter</a> needed to produce the text we want. We don't need to know the details of how this works to use it. The important points to remember are:</p>
<ol>
<li>The first square-bracketted expression you use must be the globalParamName of the Actor in question in square brackets, e.g. '[bob]'. Note that the library automatically assigns the programmatic name of an Actor to its globalParamName name unless you decide to give it different one, so unless you change it, the globalParamName of <span class='code'>bob</span> will be 'bob'.</li>
<li>Any subsequent square-bracktted text you use should be one of the <a href='message.htm#parameter'>message parameters</a> listed later in this manual, minus the <i>obj</i> part, e.g. '[his]' rather than '[his bob]' or '[his obj']; the qualifiedDesc method will then work out what to supply here.</li>
<li>To secure subject-verb agreement you should use an ordinary <a href='message.htm#parameter'>message parameters</a>, e.g. 'like{s/d}' rather than just 'likes'.</li>
</ol>

<a name='flexibility'>
<h2>Some More Flexible Ways of Using Facts with TopicEntries</h2>
<p>The ways of using Facts in conjunction with TopicEntries we have seen so far require Fact objects to be defined separately from the TopicEntries that use them. Since these Facts may well be used for other purposes as well, such as supplying responses to THINK ABOUT commands, this may seem fair enough, and some game authors may welcome the clean separation of function here. But others may prefer to be able to customize conversational responses entirely on the relevant TopicEntries rather than also having to tweak code on any Fact object they reference, and some may even find it neater and easier not to have to define the Fact separately from the TopicEntry that references it, especially if the Fact is relevant specifically to that conversational exchange. Adv3Lite therefore makes it possible to customize how a Fact is articulated from within a TopicEntry and to create a new Fact on the fly from within a TopicEntry.</p>

<p>You may recall that several of the TopicEntry and ActorTopicEntry methods described above have an optional <b>msg</b> parameter; this can be used to customize how the description of the Fact is displayed in the context of the TopicEntry's response. The methods in question are:</p>

<ul>
<li><b>revealFact(tag, msg?)</b>: This method displays the desc of the Fact referenced by <i>tag</i> as described by the NPC the player character is in conversation with in relation to the topic matched, adds the PC's conversation partner to the list of sources for this fact, and adds the fact's name tag to the list of topics the Player Character knows about. Note that it does not check whether the PC's current interlocutor knows this Fact or whether this Fact is related to the current topic of conversation.</li>
<li><b>informFact(tag, <span class='comment'>[actor]</span>, msg?)</b>: This method displays the description of the Fact referenced by <i>tag</i> as described by <i>actor</i> in relation to the topic matched, adds the PC's conversation partner to the list of targets for this fact, and adds the fact's name tag to the list of topics <i>actor</i> knows about. Note that it does not check whether the Player Character knows this Fact or whether this Fact is related to the current topic of conversation. The second, <ii>actor</i> parameter is optional and defaults to the player character's current interlocutor (the normal case) if not supplied. It can be omitted even if <i>msg</i> is supplied; in other words it's perfectly fine to call this method as <span class='code'>informFact(tag, msg)</span></li>
<li><b>revTag(msg?)</b>: calls <span class='code'>revealFact(aTag, msg)</span> --- for which see above --- and returns its return value, which can then be used to construct this ActorTopicEntry's topicResponse. This would typically be used on an AskTopic or QueryTopic</li>
<li><b>infTag(msg?)</b>: calls <span class='code'>informFact(tTag, msg)</span> --- for which see above --- and returns its return value, which can then be used to construct this ActorTopicEntry's topicResponse. This would typically be used on a TellTopic or SayTopic.</li>
</ul>

<p>In turn, the <b>msg</b> parameter can be one of:</p>
<ol>
<li>A single-quoted string (to be used as a description of the fact).</li>
<li>An integer (indexing the fact's factDescs list)</li>
<li>A property pointer, in which case the corresponding method will be called on the fact with self as argument. The method should return a single-quoted string which will be used as the fact's description.</li>
<li>A function pointer, in which case the function will be executed with self as an argument. The function should return a single-quoted string which will be used as the fact's description.</li>
</ol>

<p>The first of these is probably the most straightforward, and along with the fourth, which is provided for more elaborate cases, allows the definition of what's displayed by the TopicEntry to be kept within the definition of the TopicEntry. The second and third uses of the msg parameter conversely allow how the Fact is described to be kept along with the definition of the Fact. Both methods have their advantages and disadvantages so it is us to game authors to decide which they prefer.</p>
<a name='rnf'></a>
<p>Some game authors might quite reasonably prefer to define everything in one place rather than having to define Facts separately from the TopicEntries that reference them. You can do this through the following pair of TopicEntry methods:</p>

<ul>
<li><b>revealNewFact(name, desc, msg?, topics?, initiallyKnownBy?)</b>: Creates a new Fact defined by the <i>name</i>, <i>desc</i>, <i>topics</i> and <i>initiallyKnownBy</i> parameters and reveals it to the player character. </li>
<li><b>informNewFact(name, desc, msg?, topics?, initiallyKnownBy?, actor?)</b>: Creates a new Fact defined by the <i>name</i>, <i>desc</i>, <i>topics</i> and <i>initiallyKnownBy</i> parameters and informs <i>actor</i> of it. </li>
</ul>

<p>Here the <i>name</i>, <i>desc</i>, <i>topics</i> and <i>initiallyKnownBy</i> parameters refer to the corresponding properties on the new Fact being created. If not explicitly supplied, <i>topics</i> defaults to the matchObj of the TopicEntry on which one or other of these methors is called. <i>initiallyKnownBy</i> defaults to <span class='code'>getActor()</span> (i.e. the actor whose TopicEntry this is) in the case of <span class='code'>revealNewFact()</span> and <span class='code'>gPlayerChar</span> in the case of <span class='code'>informNewFact()</span>. The <i>actor</i> parameter also defaults to getActor, while the <i>msg</i> paramenter has the same meaning as just described above. Note that if any of the optional parameters is supplied, all those to the left of it must be also be supplied, so, for example, if you wish to speficy the <i>topics</i> parameter you must also supply the <i>msg</i> parameter, which can just be <span class='code'>nil</span> if you don't wish to use it.</p>

<p>If you prefer brevity to explicit clarity in using these methods on TopicEntries you can abbreviate <span class='code'>informNewFact()</span> to <b>INF()</b> and <span class='code'>revealNewFact()</span> to <b>RNF()</b>.

<p>What these two methods do is first check whether a Fact corresponding to <i>name</i> already exists and, if not, calls the Fact constructor to create the new Fact defined by the parameters supplied (amongst other things, this makes it safe to call <span class='code'>INF()</span> or <span class='code'>RNF()</span> more than once even it may potentally refer to the same Fact). Then, whether or not a new Fact has just been created, <span class='code'>INF()</span> goes on to call <span class='code'>informFact(name, actor, msg)</span> and <span class='code'>RNF()</span> to call <span class='code'>revealFact(name, msg)</span>.

<p>The Fact constructor just referred to is defined on the Fact class as <b>construct(name_, desc_, topics_, initiallyKnownBy_)</b>. It creates a new Fact object and sets the corresponding properties, initializes the new Fact and then adds it to the table of Facts on the <span class='code'>factManager</span> object. This ensures that a reference to the new Fact continues to exist; the new Fact can then be retrieved/referenced using <span class='code'>gFact(<i>name</i>)</span>, and will show up in response to the LIST FACTS and FACT INFO commands described <a href='#debug'>below</a>.

<p>So, for example, if we were creating some TopicEntries for a subsequent conversation between the player character and Mavis, assuming we give Mavis an ActorState for this conversation we might define:</p>

<p><div class="code"><pre>
++ TellTopic @tSpain
    "&lt;q&gt;You know, they say &lt;&lt;informFact('rain-in-spain', 'the wet stuff falling from Spanish
        skies tends to end up on the plain')&gt;&gt;,&lt;/q&gt; you say.\b
    &lt;q&gt;That doesn't set to music so well as the original,&lt;/q&gt; she complains. "
;

++ AskTopic @tMadrid
    "&lt;q&gt;What do you think of Madrid?&lt;/q&gt; you ask.\b
    &lt;q&gt;&lt;&lt;RNF('madrid-ok', 'Madrid\'s okay', 'It\'s okay')&gt;&gt;, I guess,&lt;/q&gt; she replies. "
    autoName = true
;
</pre></div></p>


<p>Which could then lead to the following exchange></p>

<p><div class="cmdline"><pre>
</a>&gt;t spain
“You know, they say the wet stuff falling from Spanish skies tends to end up on the plain,” you say.

“That doesn’t set to music so well as the original,” she complains.

<b>&gt;a madrid</b>
“What do you think of Madrid?” you ask.

“It’s okay, I guess,” she replies.

<b>&gt;think about madrid</b>
You recall that Mavis told you that Madrid’s okay.
</pre></div></p>

<p>Alterrnatively, we could customise the rain-in-spain quip on the Fact object and reference it from the TopicEntry in one of two ways. The first uses the <i>msg</i> parameter to index the factDescs property on the Fact:</p>

<p><div class="code"><pre>
++ TellTopic @tSpain
    "&lt;q&gt;You know, they say &lt;&lt;informFact('rain-in-spain', 1)&gt;&gt;,&lt;/q&gt; you say.\b
    &lt;q&gt;That doesn't set to music so well as the original,&lt;/q&gt; she complains. "
;

Fact 'rain-in-spain' [tWeather, tSpain]    
    'the rain in Spain stays mainly in the plain'    
    [me, bob]    
    
     priority = 110
    
    factDescs = ['Spanish rain descends principally on level places']   
;
</pre></div></p>

<p>The second uses the <i>msg</i> parameter to call a method on the Fact object:</p>

<p><div class="code"><pre>
++ TellTopic @tSpain
    "&lt;q&gt;You know, they say &lt;&lt;informFact('rain-in-spain', &amp;altDesc)&gt;&gt;,&lt;/q&gt; you say.\b
    &lt;q&gt;That doesn't set to music so well as the original,&lt;/q&gt; she complains. "
;

Fact 'rain-in-spain' [tWeather, tSpain]    
    'the rain in Spain stays mainly in the plain'    
    [me, bob]    
    
    pcComment = '--- or so the song goes'
    
    priority = 110
       
    altDesc(sender)
    {
        return 'rain south of the Pyrenees gets deposited on low-lying ground';
    }
;
</pre></div></p>

<p>The method you call here doesn't have to be called <span class='code'>altDesc</span>; it can be called anything you like. Its <i>sender</i> parameter is the TopicEntry from which it was called, whose various properties (such as <span class='code'>matchObj</span>, <span class='code'>topicMatched</span>, <span class='code'>getActor</span> and <span class='code'>narrator</span> (the actor imparting the fact) can be queried to tailor the response to the context. While you could achieve the same result by overriding <span class='code'>qualifiedDesc()</span>, you may find it easier to keep your customization separate from the libary's definition of <span class='code'>qualifiedDesc()</span>, which, as we have seen, provides its own means of adapting the Fact's description to its context.</p>

<a name='debug'></a>
<h2>Debugging Commands</h2>
<p>The Facts module provided a couple of debugging commands which are available when your game has been compliled for debugging.</p>

<p>LIST FACTS displays a list of all the facts in the game, showing their (string) name and their desc, sorted in alphabetical order of name.On an HMTL-enabled interpreter that fact names will be hyperlinked, so that clicking on one of them will execute the FACT INFO command for that Fact.</p>

<p>FACT INFO <i>name</i> displays information about the Fact identified by <i>name</i>, e.g.,:

<p><div class="cmdline"><pre>
&gt;<b>fact info rain-in-spain</b>
Name = 'rain-in-spain'
Desc = 'the rain in Spain stays mainly in the plain'
Topics = [tWeather, tSpain]
Initially Known By = [me, bob]
Currently Known By = [mavis, me, bob]
Adjusted Priority = 109
pcComment = '— or so the song goes'
Targets = [mavis]
FactDescs = ['Spanish rain descends principally on level places']
</pre></div></p>

</div>
<hr class="navb"><div class="navb">
<i>adv3Lite Library Manual</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="optional.htm">Optional Modules</a> &gt; 
Facts
<br><span class="navnp"><a class="nav" href="extra.htm"><i>Prev:</i> Extras</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="gadget.htm"><i>Next:</i>Gadgets </a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>