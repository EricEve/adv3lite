<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>The Core Library &mdash; Doors</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="core.htm">The Core Library</a> &gt; 
Doors
<br><span class="navnp"><a class="nav" href="roomdesc.htm"><i>Prev:</i>Room Descriptions</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="travel.htm"><i>Next:</i> TravelConnectors and Barriers</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">
<h1>Doors</h1>

<p>A Door is an object that can be attached to the direction property of a Room, and which can be open and closed and optionally locked and unlocked, and which has to be open to allow an actor to pass through it. As in the adv3 library, so also in adv3Lite a physical door is represented by two game objects, each representing one side of the door (in each of the two locations connected by the door). To create a door, then, it is necessary to define a Door object in each location attached to the appropriate direction property; to let the library know that these are two sides of the same door it is further necessary to set the otherSide property of each Door object to point to the other Door object, for example:</p>

<p><div class=code><pre>
hall: Room 'Hall' 'hall'
   "The front door lies to the west. "
   west = frontDoor
;

+ frontDoor: Door 'front door; solid oak' 
    "It's a solid oak front door, strong enough to resist a siege. "
    
    otherSide = frontDoorOutside
    lockability = lockableWithKey
    isLocked = true    
;


drive: Room 'Front Drive' 'front drive'
    "The front drive sweeps round from the northwest and comes to an end just in
    front of the house, which stands directly to the east. A narrow path runs
    round the side of the house to the southeast. "
    
    east = frontDoorOutside
;

+ frontDoorOutside: Door 'front door'    
    otherSide = frontDoor
    lockability = lockableWithKey
    isLocked = true
;
</div></pre>

<p>Note that as in the above example, to make a door lockable we define its lockability property just as we would on any other Thing.</p>

<p>Another point to note is that in order to keep everything in sync we defined the <b>otherSide</b> property on both sides of the Door and <span class=code><a name="doorlocked_idx">isLocked</a> = true</span> on both sides of the Door. While this is good practice, it is not absolutely necessary, however, since if we forget to do it the library will attempt to correct it for us. In particular, if we are compiling for debugging, the library will warn us at the start of the game if it finds any Doors with an otherSide of nil, and whether or not we're compiling for debugging it will attempt to correct mismatched otherSide and isLocked properties (with isLocked = true taking precedence over isLocked = nil). Note, however, that there is no need for the lockability properties of both sides of the same door to be the same. It is quite in order for each side of a door to have a different locking mechanism (e.g. a key on one side and a keypad on the other) or for only one side of the door to be lockable (and hence unlockable).</p>

<p>The library takes care of a few other details for us besides, in particular:</p>
<ul>
<li>A Door is defined as being fixed in place and not listed (isFixed = true and isListed = nil) by default, since these settings apply to virtually all Doors.</li>
<li>A Door is defined as being visible in the dark (i.e. visibleInDark becomes true) if the room on its other side is illuminated (this allows the player character to travel from a dark room to an illuminated room through a Door, so is usually the desired behaviour).</li>
<li>The <b>makeOpen(stat)</b> and <b>makeLocked(stat)</b> of a Door automatically keep both sides of a door synchronized (i.e. calling these methods on one side of a Door automatically updates the appropriate property &mdash; isOpen or isLocked &mdash; on both sides of the Door).</li>
<li>When the player character passes through a door the isDestinationKnown property is set to true on both sides of the door (mainly to allow subsequent pathfinding through the door).</li>

</ul>

</div>
<hr class="navb"><div class="navb">
<i>adv3Lite Library Manual</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="core.htm">The Core Library</a> &gt; 
Doors
<br><span class="navnp"><a class="nav" href="roomdesc.htm"><i>Prev:</i> Room Descriptions</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="travel.htm"><i>Next:</i> TravelConnectors and Barriers</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>