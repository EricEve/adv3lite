<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Final Moves &mdash; Change Log</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="final.htm">Change Log</a> &gt; 
Change Log
<br><span class="navnp"><a class="nav" href="conclusion.htm"><i>Prev:</i> Conclusion</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">
<h1>Change Log</h1>
<ul>
<li><a href="#v0.6">Version 0.6</a></li>
<li><a href="#v0.5">Version 0.5</a></li>
<li><a href="#v0.4">Version 0.4</a></li>
<li><a href="#v0.3">Version 0.3</a></li>
<li><a href="#v0.2">Version 0.2</a></li>

</ul>

<h2><a name="v0.6">Version 0.6</a></h2>
<p><strong>Risk of incompatibity:</strong> The long form of remap (using <span class="code">remapTo()</span> or <span class="code">maybeRemapTo()</span> or a list defined on a remap property) has been withdrawn. This feature was deprecated from the first, and we said we might withdraw it all along. The same functionality is better implemented using a Doer (see below on the new Doer <span class="code">doInstead()</span> method).</p>
<p>Note that the short form of remap (where remap simply evaluates to another object that replaces the current object in the same command) remains unaffected. The short form remap will remain a permanent part of the library.</p>
<hr>
<p><strong>Risk of incompatibity:</strong> The Doer method <strong>travel()</strong> has been withdrawn, as it is no longer needed. Use the new <strong>doInstead()</strong> method with the new <strong>Go</strong> action instead (see below), e.g. <span class="code">doInstead(Go, northDir)</span>.</p>
<hr>
<p><strong>Risk of incompatibity:</strong> Some isXXXable properties have been renamed as canXXXMe properties where XXX contains a preposition and the isXXXable form looks too barbarous: e.g. isJumpOffable has been changed to canJumpOffMe.</p>
<hr>
<p><strong>Slight risk of incompatibity:</strong> The <strong>touchObj</strong> PreCondition has been reconfigured to make use of the new Query method <strong>reachProblem(a, b)</strong>. This ensures that almost the entire logic of checking for reachability is handled by the Query object, rather than duplicated between the Query object and the touchObj PreCondition, so that if a Special wants to enforce different reachability rules these will be respected by touchObj without game authors needing to modify touchObj.</p>

<p>The <span class="code">reachProblem()</span> method must return either an empty list (meaning that there's no difficulty with A reaching B) or a list of one or more <strong>ReachProblem</strong> objects. A ReachProblem object must define a <span class="code">verify()</span> method and a <span class="code">check(allowImplicit)</span> method (which can be called by touchObj.verifyPreCondition and touchObj.checkPreCondition respectively). The <span class="code">verify</span> method must either do nothing, or else use the same macros (<span class="code">inaccessible</span>, <span class="code">illogical</span>, <span class="code">implausible</span>, etc.) that are used elsewhere in verify routines. The <span class="code">check</span> method should return true to allow the action to proceed or nil to fail it at the check stage; if it returns nil it should display a message explaining the problem. The check method may optionally also attempt to rectify the problem by carrying out an implicit action.</p>
<p>The <span class="code">reachProblem()</span> on QDefaults carries out the same checks that were formerly coded directly on <span class="code">touchObj</span>, so game behaviour should not be altered in any way unless your game modifies touchObj.</p>
<p><span class="code">QDefault.canReach(a, b)</span> now returns true if <span class="code">Q.reachProblem(a, b)</span> returns an empty list.</p>
<hr>
<p><strong>Slight risk of incompatibity:</strong> Previously an implicit SAY command (text interpreted as a SAY command during a conversation when the player's command did not explicitly start with SAY) would attempt to mask an AskTopic or a TellTopic if it failed to match a SayTopic. This is probably needlessly complex, and may not be altogether intuitive to players. The handling of implicit SAY commands has thus been changed so that the game will only attempt to match SayTopics (including DefaultTopic types that include SayTopics).</p>
<hr>
<p><strong>Slight risk of incompatibity:</strong> The Action methods <strong>getDobj()</strong> and <strong>getIobj()</strong> have been removed. Since all they did was to return <span class="code">curDobj</span> and <span class="code">curIobj</span> respectively, they seemed an unnecessary piece of indirection. It is unlikely that game code would call these methods directly, but if it does, just use <span class="code">curDobj</span> (or <span class="code">gDobj</span>) and <span class="code">curIobj</span> (or <span class="code">gIobj</span>) instead.</p>
<hr>
<p><strong>Slight risk of incompatibity:</strong> A few message properties (particularly relating to scoring) have been moved off the libMessages object and replaced with DMsg/BMsg constructs. The intention is to complete this process in the next release.</p>
<hr>
<p><strong>Very slight risk of incompatibity:</strong> The action handling for a TI action now adds the direct object of a command to it actionList even if the action is dealt with on the indirect object. This is probably better behaviour that what was there before, and means that <span class="code">gActionListStr</span> returns a useful value for report() methods (usually defined on the direct object) even when the action handling has taken place on the indirect object (as may sometimes be more appropriate).</p>
<hr>
<p><strong>Very slight risk of incompatibity:</strong> The action handling for PutIn, PutOn, PutUnder and PutBehind has been moved from the direct object to the indirect object of the action, since game code is more likely to want to customize the effects of the action there (for example, a Container is more likely to behave in a non-standard way to having things inserted in it than the things being inserted in it are).</p>


<hr>
<p><strong>Very slight risk of incompatibity:</strong> The action handling for a number of actions on Thing and one or two other classes has been tweaked to produce a more consistent scheme. Wherever possible, actions that need to be blocked are blocked at the verify stage rather than the check stage, and actions are reported on at the report stage rather than the action stage. This scheme was more or less followed before, but not quite as consistently as it might have been.</p>

<p>Note that there are still some exceptions where (in the first case) it still seems appropriate to perform some additional checks at the check stage and perhaps rule an action out there and (in the second case) where the main point of an action (e.g. EXAMINE, LOOK IN) is the output it produces, which is then best left at the action stage.</p>
<hr>
<p><strong>Very slight risk of incompatibity:</strong> The <strong>scoreObjects()</strong> method of Action now multiplies the verify score by 100 when calculating the overall score for each object in its matchList. This is to allow other scoreObject() methods along the way to tweak the scores of particular objects by small amounts to allow fine tuning of the parser's choice of object while giving priority to the verify results.</p>

<hr>

<p><span class="code">replaceAction()</span> and <span class="code">nestedAction()</span> are now functions, not macros, although they still do exactly the same thing. They are joined by two new functions <span class="code">replaceActorAction()</span> and <span class="code">nestedActorAction()</span>, which can be used when you wish to specify the actor. Game authors are, however, encouraged to use the new methods <span class="code">doInstead()</span> and <span class="code">doNested(</span>) (see below) in place of <span class="code">replaceAction()</span> and <span class="code">nestedAction()</span> since these provide greater functionality and a more consistent interface.</p>
<hr>
<p>Doer, Action, Thing and ActorTopicEntry all define two methods, <strong>doInstead()</strong> and <strong>doNested()</strong> which can be used to divert one action to another (in the first case) or to execute one action in the course of another (in the second case), e.g. <span class="code">doInstead(PutIn, redBall, greenBox)</span> or <span class="code">doNested(Drop, gDobj)</span>. See the discussion on <a href="doer.htm">Doer</a> for details.</p>
<p>Note that the existing Doer method <span class="code">redirect()</span> still exists and works as before, but is now a service method used by <span class="code">doInstead()</span>. Existing code that uses <span class="code">redirect()</span> will still work, but game authors are encouraged to use <span class="code">doInstead()</span> instead.</p>
<hr>
<p>There is now a new <strong>Go</strong> action to make it easier to synthesize travel commands. This action is never triggered directly by a player command, but can be used in doInstead(), doNested, replaceAction(), replaceActorAction, nestedAction() and nestedActorAction() in the form <span class="code">doInstead(Go, northDir)</span>.</p>

<p>If you prefer, you can use the new macros <strong>goInstead()</strong> and <strong>goNested()</strong> instead. For example, <span class="code">goInstead(north)</span> would be exactly equivalent to <span class="code">doInstead(Go, northDir)</span>.</p>
<hr>
<p>A new macro <strong>gActionListObj</strong> has been added for use in report() methods. It evaluates to an object that can be used in situations where we want gActionListStr to be the subject of a sentence (so that any verbs need to agree with it in number depending on whether gReportList represents one or more objects). Consult the section on the <a href="actres.htm#report">Report</a> phase of Actions Results for further details.</p>

<hr>
<p>Two new verification macros have been added: <strong>dangerous</strong> and <strong>nonObvious</strong>. Both of these allow the action to go ahead unless it's an implicit action, but <span class="code">nonObvious</span> is given the same logical rank as <span class="code">illogical</span>. For further details see the <a href="actres.htm#verify">Verify</a> section of the Action Results article.</p>

<p>To allow these two new verification results to work, parts of the verification and implicit action handling have had to be tweaked along with the checkPreCondition methods of most PreConditions. As things stood before it was possible to create a VerifyResult with <span class="code">allowImplicit = nil</span>, but nothing took any notice of this value.</p>

<hr>
<p>A new function <strong>askMissingObject(action, role)</strong> has been added, which may be called via the new macros <strong>askForDobj(action)</strong> and <strong>askForIobj(action)</strong>. This function (or the macros that translate to it) causes the player to be prompted to supply the missing object for <em>action</em> (unless it can find the object for itself, see below), and the input is then parsed in the normal way, as if the query had arisen from the parser; meaning that if the player supplies a valid object <em>action</em> will be executed with that object.</p>

<p>The <span class="code">askMissingObject()</span> function first attempts to find the missing object before prompting the player to supply one. It does so by finding the highest scoring object in scope for the requested role in the requested action. It uses this object if and only if (a) no other object it finds has so high a score and (b) if the action were tried with the object found it would pass the verify stage and would be allowed as an implicitAction (so we don't pick an object with a <span class="code">dangerous</span> or <span class="code">nonObvious</span> verify result, for example). If these conditions are met the requested action is executed with the best match object in the request role without the player being prompted to supply an object.</p>

<hr>
<p>The behaviour of the <strong>Lock</strong> and <strong>Unlock</strong> actions (LOCK DOOR or UNLOCK DOOR without specifying a key) has been altered slightly to take advantage of <span class="code">askForDobj()</span>. Now if the player attempts to lock or unlock something without specifying a key and the player character isn't holding an appropriate key the player is asked to specify a key; previous s/he was told the player character wasn't holding an appropriate key. This seems better behaviour in general, but also in particular when a puzzle requires using something unobvious to unlock (or lock) something with.</p>
<hr>
<p>The behaviour of several other actions  have also been tweaked to take advantage of <span class="code">askMissingObject()</span>, namely Sit, Lie (as in Lie down), Write, Type, and Look up (as in Consult).</p>

<hr>
<p>A number of new actions have now been implemented (more or less completing the set envisaged in the Mercury version of grammar.t apart from some system actions that are being left out on purpose as probably not needed). The new actions include <strong>Lie</strong> (as in lie down, not as in tell an untruth), <strong>PlugIn</strong>, <strong>PlugInto</strong>, <strong>Unplug</strong> and <strong>UnplugFrom</strong>, together with the rest of the PushTravel actions: <strong>PushTravelThrough</strong>, <strong>PushTravelEnter</strong>, <strong>PushTravelGetOutOf</strong>, <strong>PushTravelClimbUp</strong> and <strong>PushTravelClimbDown</strong>.</p>
<hr>
<p>In order to facilitate the implementation of the <span class="code">Plug</span> set of actions a new <strong>PlugAttachable</strong> mix-in class has been added. For details see the appropriate part of the <a href="attachable.htm#plug">Attachables</a> section.</p>
<p>In order to facilitate the implementation of the <span class="code">PlugAttachable</span> class there has been some tweaking of the <span class="code">SimpleAttachable</span> and <span class="code">NearbyAttachable</span> classes, including some changes to the NearbyAttachable class that now make it usable (it was fundamentally broken before).</p>
<hr>
<p>Two new macros <strong>asDobjWithoutVerifyFor()</strong> and <strong>asIobjWithoutVerifyFor()</strong> have been added, which do what they say, namely make one set of action handling routines behave like those of another on the same object, apart from the verify stage.</p>

<p>The main purpose of these new macros is to facilitate a slight tweak in the way the <strong>SitOn</strong>, <strong>StandOn</strong> and <strong>LieOn</strong> actions are implemented. Previously these were treated as synonyms of <span class="code">Board</span>. They still are, except at the verify stage, so that game authors have more control over which items actors can apparently sit, stand or lie on (although there is no difference in the end result). For details see the new paragraph on <a href="thing.htm#posture">Pseudo-Postural Properties</a> in the section on Thing. </p>

<hr>
<p>Four methods have been added to the LMentionable class in the English-specific library to facilitate the manipulation of the vocabulary that can be used to refer to objects (and optionally the name as well): <strong>replaceVocab(voc)</strong>, <strong>addVocab(voc)</strong>, <strong>removeVocabWord(word, matchFlags?)</strong> and <strong>addVocabWord(word, matchFlags)</strong>. For details see the paragraph on <a href="thing.htm#manipulatevocab">Manipulating vocab at run-time</a> in the section on Thing.</p>

<hr>
<p>It's now possible to specify a <strong>matchPhrase</strong> (and, if desired, a separate <strong>disambigMatchPhrase</strong>) that the player's input must match in order to refer to a particular object. For example, if an object with vocab 'dark green bottle; glass' is given a <span class="code">matchPhrase</span> of 'dark green', then it will match DARK GREEN BOTTLE but not just GREEN BOTTLE. For the full story see the paragraph on <a href="thing.htm#phrase">Phrase Matching</a> in the section on Thing.</p>
<hr>

<p>The new Thing property <strong>vocabLikelihood</strong> can be used to make the parser prefer one object over another, other things (notably verify results) being equal. It is recommended that the value given to this property (if it is used at all) be relatively small, say in the range 0 to 10, to ensure that verify results take precedence.</p>

<hr>
<p>There is now a <strong>SecretDoor</strong> class. A SecretDoor is a kind of Door that only acts as a Door when it's open. For details see the <a href="extra.htm#secretdoor">Extras</a> section.</p>

<hr>
<p>Two new classes have been added to the conversation system: <a href="topicgroup.htm">TopicGroup</a> and <a href="convnode.htm#convnode">ConvNode</a> These don't enable game authors to do anything that couldn't be done before, but they may make it more convenient, especially when definining Conversation Nodes.</p>
<hr>
<p>Four new types of DefaultTopic have been added to the conversation system: <strong>DefaultSayTellTopic</strong>, <strong>DefaultTalkTellTopic</strong>, <strong>DefaultSayTellTalkTopic</strong> and <strong>DefaultAskQueryTopic</strong>, since these seem natural groupings for DefaultTopics responding to attempts to impart information or ask questions respectively.</p>
<hr>
<p>Sections of the vocab property can now be selectively inherited from superclasses. For details, see the explanation of the <a href="thing.htm#inherit">vocab</a> property in the Thing section of the manual.</p>
<hr>
<p>The new gameMain option <strong>againRepeatsParse</strong> controls how the AGAIN command is interpreted. If it is nil AGAIN repeats the resolved command, that is, the command as it was interpreted on the previous turn, with the same objects. If it is true (the default), then the text of the previous command is reparsed, which may result in a different interpretation involving different objects. For example, suppose there are two coins on the floor. If <span class="code">againRepeatsParse</span> is nil then TAKE COIN followed by AGAIN will result in one of the coins beingtaken, followed by an attempt to take the <em>same coin</em> again (which will fail with a message that you're already holding the coin. If <span class="code">againRepeatsParse</span> is true, however, than TAKE COIN followed by AGAIN will result in one coin being taken, and then the other, just as if the player had typed TAKE COIN twice. Which is the better behaviour depends on context; while in the coin example the second interpretation seems better, if a player were to type EXAMINE BOOK and be prompted to say which one, the second interpretation would result in the disambiguation prompt being repeated, which might seem perverse.</p>

<p>There is thus an additional gameMain option <strong>autoSwitchAgain</strong> which tries to give the player the best of both worlds by switching <span class="code">againRepeatsParse</span> between true and nil depending on whether the command to be repeated is the kind of command it would make sense to repeat with the same objects (if it isn't, the command is reparsed in the hope of finding a more sensible match). This is far from absolutely foolproof, and should be regarded as experimental. It is true (switched on) by default, but game authors may wish to set it to nil if it proves troublesome.</p>
<hr>
<p>The new Thing method <strong>fluidName</strong> makes it easier to produce satisfactory messages relating to objects doing duty both as fluid containers and the fluid they contain (e.g. an oilcan notionally containing oil). Library messages referring to drinking and pouring now use the new <span class="code">fluidName</span> property to refer to the direct object of such actions rather than the <span class="code">theName</span> property (although <span class="code">fluidName</span> is set to <span class="code">theName</span> by default).</p>
<hr>
<p>There is now an additional debugging command, DEBUG DOER, which shows which doer (identified by its cmd string) is being executed.</p>
<hr>
<p>The query type and topic vocab of a QueryTopic may now be given together in a single single-quoted string (in the QueryTopic template), e.g. 'where he was born' as an alternative to 'where' 'he was born'.</p>
<hr>
<p>The behaviour of the FOLLOW command with an actor as its target has now been enhanced. If the command FOLLOW X is issued and X is not in sight, but the player character is in the location from where s/he last saw X depart, the FOLLOW X command will cause the player character to take the same exit that the player character saw X leave by (i.e. the player character will follow X's last known move). Otherwise, if FOLLOW X is issued when the player character is in the same room as X, then the player character will follow X if X subsequently moves on the same turn.</p>
<hr>
<p>The new function <strong>senseSay(val, obj, prop=&amp;canSee)</strong> can be used to output text only when <em>obj</em> is visible to the player character. This may be particularly useful when reporting the movements and other actions of NPCs who may or may not be visible to the player character.</p>

<p>The new AgendaItem method <strong>report(msg)</strong> simply calls <span class="code">senseSay(msg, getActor)</span>, thereby saving a bit of typing in this commonly useful case. If required <em>report()</em> can pass a property pointer as a second optional parameter (e.g. &amp;canHear) to use a different sense from sight.</p>
<hr>
<p>The draft <a href="../tutorial/toc.htm">Tutorial</a> has now been completed.</p>
<hr>
<p>Work has begun on an <a href="actionref.htm">Action Reference</a>. This is currently still work in progress, but once it is complete it will list all the actions defined in the library referenced by an alphabetical list of the commands used to invoke those actions. Eventually it will also contain summary information about key properties relating to each action and links to further information.</p>
<hr>

<p>Bug fixed whereby the command GO TO X could cause a run-time error when X was last seen in the current location but was no longer there.</p>
<hr>
<p>Bug fixed whereby using an implicit ASK FOR, SHOW or GIVE command (e.g. ASK FOR HELP or SHOW TICKET, without specifiying the addressee) could cause a run-time error: the problem was that no implicit ask for, give to or show to actions had been defined; this has now been remedied.</p>
<hr>
<p>Bug fixed in conversation method Actor.showSuggestions(explicit, tag), where the tag parameter wasn't handled property (leading to bugs and possible run-time errors in handling a TOPICS command).</p>
<hr>
<p>Bug fixed whereby an implicit TOPICS command (e.g. from TALK TO SO-AND-SO) didn't respect the value of the suggestionKey property.</p>
<hr>
<p>Bug fixed whereby a word ending "'s" (apostrophe-S) in the vocab of a Topic would never be matched, because the tokenizer separates the apostrophe-S into a separate token, while the initVocab() routine suppresses it altogether. TopicPhrase now strips any apostrophe-S out of the player's input for the purposes of matching it to a topic so that it doesn't cause a mismatch.</p>
<hr>
<p>Bug fixed whereby trying to UNDOing a SAY command entered without an explicit SAY would undo a previous command instead (since the implicit form of SAY didn't set a savepoint).</p>
<hr>
<p>Bug fixed whereby an AskTopic or TellTopic might be preferred to a SayTopic with the implicit form of the SAY command where the vocabulary overlapped, because only the strongest vocab match was being obtained (which is not necessarily the appropriate behaviour for Topic matches).</p>
<hr>
<p>Bug fixed whereby TopicEntries corresponding to the actors activeKeys list weren't prioritized when the Actor's current ActorState was non-nil.</p>
<hr>
<p>Bug fixed whereby certain forms of Give and Show had the wrong PreConditions. Now GIVE (or GIVE TO) always has an objHeld PreCondition on its direct object, while SHOW and SHOW TO enforce objHeld on portable objects and objVisible on fixed ones.</p>
<hr>
<p>Bug fixed whereby finishOptionScore and finishOptionFullScore weren't causing a display of the final score, but finishOptionScore was generating a spurious additional comma in the list of post-game options.</p>
<hr>
<p>Bug fixed whereby the TAKE FROM command might result in an object being taken even if it was fixed in place.</p>
<hr>

<br>
<h2><a name="v0.5">Version 0.5</a> (16 January 2013)</h2>
<p>Several changes have been made to the <a href="multiloc.htm">MultiLoc</a> class, partly to fix a bug, and partly to enhance its flexibility.</p>
<p>The problem was that the locationList property was being used for slightly conflicting purposes: both as way to set the initial list of locations in which the MultiLoc should start out and to keep track of the list of locations in which the MultiLoc currently resides. The conflict arose from the fact that it made sense to allow Regions in the list for the first purpose, but not for the second, one slightly obscure consequence of which being that the isDirectlyIn(loc) and isIn(loc) methods behaved unreliably when loc was nil.</p>
<p>MultiLoc now defines a separate <strong>initialLocationList</strong> property for specifying the initial list of locations in which a MultiLoc starts out (which can include Regions), and reserves the locationList property for keeping track of the MultiLoc's current list of locations (rooms and/or objects within rooms, but not Regions; i.e. any Regions specified in the initialLocationList are expanded into their consituent rooms in locationList). However, to maintain backward compatibility and ease of use it is still legal to define an initial list of locations (including Regions) on the locationList property. If the library finds that initialLocationList is empty when it initializes a MultiLoc, it will simply copy the locationList to the initialLocationList before proceeding.</p>
<p>MultiLoc now also defines an <strong>initialLocationClass</strong> property and an <strong>isInitiallyIn(obj)</strong> method, which are intended to work together. If <span class="code">initialLocationClass</span> is not nil then every instance of that class will be added to the MultiLoc's locationList provided <span class="code">isInitiallyIn(obj)</span> returns true for that instance (where <em>obj</em> is the instance in question). This introduces an existing adv3 feature into adv3Lite; the main reason for doing so at this stage is to facilitate the implementation of the new <span class="code">Floor</span> class (see below).</p>
<p>Note that any locations added to the location list via <span class="code">initialLocationClass</span> will be in addition to those defined on <span class="code">initialLocationList</span>, and that any locations defined in the exceptions list will be removed from the location list after those defined in both <span class="code">initialLocationList</span> and <span class="code">initialLocationClass</span> have been added. </p>
<hr>
<p>The <span class="code">addToContents()</span> method of <span class="code">Thing</span> and <span class="code">Region</span> now has a second, optional, parameter <em>vec</em>. This is intended purely for internal use by the library to facilitate initiating the locationList of a MultiLoc from its initialLocationList and initialLocationClass, and shouldn't directly impact on user code.</p>
<hr>
<p>The library now defines a <strong>Floor</strong> class, and one instance of it, <strong>defaultGround</strong>. This is basically a MultiLoc, Decoration that is added into every <a href="room.htm#roomfloor">Room</a>. Its main purpose is to facilitate the parser's ability to disambiguate items by their locations. Formely, if, say, there were two identical coins, one on a table and one directly in the room, the parser would have to ask "Which do you mean, the coin on the table or the coin?", which is unclear and fails to give the player an easy way of selecting the latter. Now the parser can ask "Which do you mean, the coin on the table or the coin on the ground?" and the player can refer to "the coin on the ground" to disambiguate.</p>

<p>The defaultGround object now present in every room does incidentally perform the secondary purpose of allowing players to refer to 'the ground' or 'the floor' which must be implicitly present in nearly every room, but its implementation is deliberately minimalistic to discouraage players from trying to interact with it. The library will translate PUT SOMETHING ON FLOOR or THROW SOMETHING AT FLOOR to DROP SOMETHING, and X GROUND/FLOOR will of course work, as will TAKE X FROM FLOOR, and, in a limited fashion, STAND ON FLOOR or GET ON FLOOR, but that's about it (everything else gets the standard decoration response 'The ground is not important'). STAND ON FLOOR or GET ON FLOOR will either report "You are standing on the floor" (if the player char is in the outermost room) or else be translated into a GetOut action.</p>

<p>If you want to define a custom Floor object for a particular location, or omit it altogether (e.g. for a room at the top of a tree), you can do so by overring the <strong>floorObj</strong> property, either to point to your custom Floor object, or to nil (in the case of a room without a floor). You should do this even if you implement your custom floor object as a Fixture in a single location rather than using the custom Floor class, but you might find it better to use the Floor class even for a custom floor that appears only in one room, since it's designed to facilitate the parser disambiguation just described. If you do decide to define your own Fixture, you'll need to copy most of the methods and properties of the Floor class onto it to make it work properly as a floor.</p>

<hr>
<p>The gameMain option <strong>storeWholeObjectTable</strong> has been removed (and attempting to set it will no longer have any effect). Tests showed that the resources saved by setting this value to nil were negligible. The alternative to storing the whole object table (for use with tags in the conversation system) was always complex and unreliable, and it seemed best just to get rid of it.</p>
<hr>
<p>There are now options to precede the failure messages at produced by check and verify routines with the name of the object they refer to in commands applying to multiple direct objects (e.g. TAKE ALL), in case it isn't clear which objects the messages apply to. These options are controlled by the properties <strong>announceMultiVerify</strong> and <strong>announceMultiCheck</strong>, which can be overridden globally on TAction, or else on individual actions. By default <strong>announceMultiVerify</strong> is nil (most library verify messages make it clear what they refer to) and <strong>announceMultiCheck</strong> is true.</p>
<hr>
<p>Multiple identical verify reports are now suppressed (i.e. only the first is shown). This most commonly pertains when an action applying to multiple direct objects fails the verify test on the indirect object, so that, for example, a command like PUT ALL ON WALLPAPER where the wallpaper is a Decoration would result in multiple displays of "The wallpaper is not important"; clearly the player only needs to see this message once. Note that this repetition suppression only takes place if announceMultiVerify is nil.</p>
<hr>
<p>There is now a DEBUG command that breaks into the debugger, just as it does in adv3. There are also DEBUG ACTIONS, DEBUG MESSAGES and DEBUG SPELLING options. For details see the section in the manual on <a href="debug.htm">Debugging Commands</a>.</p>
<hr>
<p>Thing now has two properties controlling whether you can pour something onto or into the Thing. canPourIntoMe and canPourOntoMe control whether it's possible; by default canPourIntoMe is true if ContType is In and nil otherwise, and canPourOntoMe is true. The properties allowPourIntoMe and allowPourOntoMe control whether you actually want to allow pouring into or onto this object; both are nil by default. This ensures that a game will give a reasonably sensible response where the canPour property of some object has been set to true and there's no other specific handling on objects that might be poured into or onto.</p>
<hr>
<p>The {I} and {me} message parameter substitutions now use the theName and theObjName properties of the actor rather than the name and objName properties; this generally reads more naturally.</p>
<hr>
<p>Bug fixed that caused a run-time error in the GoOut action (the action triggered by EXIT or LEAVE), and in the GoIn action (triggered by ENTER without an object).</p>
<hr>
<p>Bug fixed that caused a run-time when the player attempted to issue an order to an NPC (or even the PC) with the "bob, whatever" syntax.</p>
<hr>
<p>Bug fixed that caused things with <span class="code">visibleInDark = true</span> not to be visible in the dark.</p>
<hr>
<p>Bug fixed that could wrongly suppress action reports at the report() stage when Doer.redirect() was used.</p>
<hr>
<p>Bug fixed that placed the player character's immediate container out of reach of the player character.</p>
<hr>
<p>Bug fixed whereby the actionPhrase() method used to reconstruct the text of a command in a CommandTopic or DefaultCommandTopic failed to use the correct pronouns when one of the objects of the command was either the player character or the actor at whom the command was targeted. These are now rendered as 'me' or 'yourself' respectively, since the text output by actionPhrase() is intended to be used in the representation of the direct speech of the player character to the target actor.</p>
<hr>
<p>Bug fixed whereby a Doer redirect aimed at a specific object would apply to all successive objects on the same command (for example if a Doer redirected TAKE BLUE BALL to the Examine action, TAKE ALL would result in everything processed after the blue ball in the same command being examined as well).</p>
<hr>
<p>Bug fixed whereby detaching an object from another object left it located in the other object (and thus seemingly still attached); the detached object was being move to its own location (which left it where it was) instead of the location of the object it had just been detached from.</p>
<hr>
<p>Bug fixed whereby opening a container would report "Opening the X reveals Y" followed by an unnecessary "You open the X" (due to inappropriate recursive sublisting).</p>
<hr>
<p>Bug fixed whereby trying to drop a fixture would result in the odd message "The whatever is part of you" instead of "You aren't holding the whatever".</p>
<hr>
<p>Bug fixed whereby the message reporting that a particular key wouldn't work on a particular objecty caused a run-time error.</p>
<hr>
<p>Bug fixed whereby the antecedent of a pronoun could become a SubComponent rather than the object of which it is a part. For example the sequence OPEN SUITCASE. TAKE IT. Might mysteriously generate the response "The suitcase is fixed in place" because IT now referred to the SubComponent representing the suitcase's interior rather than the suitcase itself.</p>
<br>

<h2><a name="v0.4">Version 0.4</a> (12 January 2013)</h2>
<p><strong>Risk of incompatibility:</strong> The properties <span class="code">allowPutIn</span>, <span class="code">allowPutUnder</span> and <span class="code">allowPutBehind</span> have been renamed <strong>canPutInMe</strong>, <strong>canPutUnderMe</strong> and <strong>canPutBehindMe</strong> to make these names more consistent with the naming scheme used elsewhere in the library. By default these properties are true if the contType is of the appropriate type (In, Under or Behind respectively). If one of these properties is overridden to true and the contType is not of the appropriate type, any item put in, under or behind the object in question will be stored in its hiddenIn, hiddenUnder or hiddenBehind property and moved into nil. Note that there is no canPutOnMe property, since the hiddenOn property that would then be needed wouldn't make much sense, and it wouldn't make any sense to allow game authors to override the rule that items can be put on an object if and only if its contType is On.</p>
<hr>
<p><strong>Risk of incompatibility:</strong> The Thing property transparent has been renamed <strong>isTransparent</strong> to bring its name into line with similar properties of Thing.</p>
<hr>
<p><strong>Risk of incompatibility:</strong> The default value of the <strong>specialDescBeforeContents</strong> property of Thing has been hanged from true to <span class="code">(location && location.ofKind(Room))</span>. In other words the default is true for an object directly in a room and nil otherwise. This gives more satisfactory results for specialDescs shown as part of the listing of the contents of some other item, where the contents lister for that item may already have introduced the fact that its contents are about to be shown.</p>
<hr>
<p>Correspondingly, the specialDescs of items contained in other objects are now listed (as well as the listing of any other items). Previously this was not the case, which was arguably a bug.</p>
<hr>
<p><strong>Risk of incompatibility:</strong> The handling of KISS and ATTACK on the Actor class has changed. The default behaviour is now to display the actor's shouldNotKissMsg or shouldNotAttackMsg (at the check stage). If you want to use KissTopics and HitTopics (or you want to define your own handling at the action stage), set <span class="code">allowKiss</span> and/or <span class="code">allowAttack</span> to true.</p> 

<p>The reason for this change is that defining a shouldNotKissMsg and/or shouldNotAttackMsg is more straightfoward than having to define a complete KissTopic or HitTopic for the great majority of actors who do not need this kind of fine tuning.</p>
<hr>
<p><strong>Minor risk of incompatibility:</strong> The Thing properties <strong>openingContainerMsg</strong> has been withdrawn, since its function is now performed by <strong>openingContentsLister</strong>. The  <strong>okayOpenMsg</strong> property is now employed at the report() stage of dobjFor(Open) and is intended primarily for doors.</p>

<hr>

<p>An optional parameter, <span class="code">paraBrk</span>, has been added to the show() method of Lister. The default value of this parameter is true, but if it is passed as nil the paragraph break at the end of the list is suppressed. This change has been introduced mainly to facilitate several of the listing changes that follow, and may not have much effect on game code.</p>
<hr>
<p>The Thing method listSubcontentsOf() now takes a second parameter, namely the lister to be used for the listing of any miscellaneous items. The default is examineLister (which is now a property of Thing). Since this method is mainly used internally in the library this changhe may have little direct on game code, but in principle the method is also available to be called from game code.</p>
<hr>
<p>The inventory lister now splits worn items and carried items into two different lists (e.g. "You are wearing an old coat and a silly hat, and you are carrying a walking stick and a pencil.") If you prefer the single listing style, override Inventory.splitListing to nil.</p>
<hr>
<p>The depth of listing contents of contents in inventory listings can now be controlled by the value of <strong>subLister.maxNestingDepth</strong>. The default is 1, which gives results like "You are carrying a glass box (in which is a red box)". A value of 2, for example, would give "You are carrying a glass box (in which is a red box (in which is a battery))."</p>
<hr>
<p>Miscellaneous items in room listings and items that are examined and have visible contents may now list their contents in parentheses immediately after their name to the depth defined in subLister.maxNestingDepth. To enable this style of listing set <strong>gameMain.useParentheticalListing</strong> to true. To change the behaviour of individual listers (examineLister, openableContentsLister and RoomContentsLister) override their showSubListing property to true or nil (rather than having them pick it up from gameMain.useParentheticalListing).</p>
<hr>
<p>Paragraph breaks between the sentences listing the contents of items in a room description can be suppressed by setting <strong>paraBrksBtwnSubcontents</strong> to nil, either on a room-by-room basis or globally on gameMain. For further details on this and the previous change consult the section on <a href="roomdesc.htm#further">Room Descriptions</a>.</p>
<hr>

<p>The room contents listing has been tweaked so that if the actor looking around is not directly in a room, the actor's immediate location is mentioned first (e.g. "You are in a big wooden box") followed by a listing of the location's contents.</p>
<hr>
<p>The listing mechanism has been thoroughly overhauled to make fuller use of Lister objects. A new subclass of Lister, <span class="code">ItemLister</span>, is now used as the base class for several kinds of lister used in room, examine and search listings. The ItemLister class defines a <span class="code">contentsListedProp</span>, the default value of which is <span class="code">&amp;contentsListed</span>; this is the property defined on the object whose contents are to be listed that determines whether that object wishes to allow its contents to be listed.</p>

<p>As a result of these changes the library should now respect the values of the Thing properties <strong>lookListed</strong>, <strong>examineListed</strong>, <strong>searchListed</strong>, <strong>contentsListedInLook</strong>, <strong>contentsListedInExamine</strong> and <strong>contentsListedInSearch</strong>. The first three of these determine whether an item is listed as part of the miscellaneous contents of its parent in response to a LOOK command, or when its parent is EXAMINED, or when its parent is searched (with SEARCH or LOOK IN/UNDER/BEHIND) respectively. The second three determine whether the contents of the item on which it is defined are listed in response to a LOOK, EXAMINE or SEARCH command. By default <span class="code">examineListed</span>, <span class="code">lookListed</span> and <span class="code">searchListed</span> all take their value from the <span class="code">isListed</span> property. The <span class="code">contentsListedInLook</span> and <span class="code">contentsListedInExamine</span> properties both take their default values from the <span class="code">contentsListed</span> property (which is true by default). The default value of <span class="code">contentsListedInSearch</span>, however, is simply <span class="code">true</span>, since it's hard to think of many cases where you wouldn't want an object to reveal its contents when explicitly searched; the property is nevertheless provided for completeness.</p>

<p>The new Thing property <strong>examineLister</strong> defines the lister to be used to list an object's contents when it is examined. The default value is <span class="code">descContentsLister</span>.</p>
<hr>
<p>Perhaps somewhat experimentally, the various listers now attempt two consolidate multiple identical items in a list into a single enumerated occurrence, so that, for example, instead of "You are carrying a gold coin, a gold coin and a gold coin" the game will output "You are carrying three gold coins." I have marked this as experimental in case there are instances where it does not work appropriately.</p>
<hr>
<p>A new function, <strong>makeMentioned(obj)</strong>, has been added that simply makes obj.mentioned true. The obj parameter can also be a list of Things, in which case each item in the list will be marked as mentioned. With a embedded expression the same function can be written as &lt;&lt; exclude obj &gt;&gt;. The purpose of the function is to allow game authors to exclude certain items from room (and other listings), perhaps because they've already mentioned them under another name or description.</p>
<hr>
<p>Two new Thing properties <strong>allowReachOut(obj)</strong> and <strong>autoGetOutToReach</strong> have been added to allow game authors to control what happens when an actor tries to reach one object from within another (e.g. while the actor is on a bed or chair and tries to reach something elsewhere in the room). These properties should be defined on the object the actor is in. If <span class="code">allowReachOut(obj)</span> returns true for the obj the actor is trying to reach (the default), then reaching is allowed. Otherwise, if <span class="code">autoGetOutToReach</span> is true (the default) the actor will try to get out of his/her immediate container to reach the object. Otherwise (if <span class="code">autoGetOutToReach</span> is nil) reaching is prohibited and a message is displayed saying that the actor can't reach the target object from his/her present location.</p>
<hr>

<p>The new Thing method <strong>checkReachIn(actor)</strong> can be used to put the contents of an object out of reach of an actor outside the object (for reasons other than enclosure), e.g. if the object is meant to be out of reach. The default behaviour is to put the contents of an object out of reach if its own <span class="code">checkReach(actor)</span> method puts it out of reach; <span class="code">checkReachIn(actor)</span> simply calls <span class="code">checkReach(actor)</span>. The contents of the object are considered out of reach if its <span class="code">checkReachIn()</span> method dislays anything at all.</p>
<hr>
<p>Thing now defines three new properties, <strong>maxBulkHiddenIn</strong>, <strong>maxBulkHiddenUnder</strong> and <strong>maxBulkHiddenBehind</strong> that limit the amount that can be but in, under or behind an object that ends up in hiddenIn, hiddenUnder or hiddenBehind list. The corresponding methods <span class="code">getBulkHiddenIn</span>, <span class="code">getBulkHiddenUnder</span> and <span class="code">getBulkHiddenBehind</span> return the total bulk of the items currently contained in the corresponding lists.</p>

<hr>
<p>It's now legal to use the name of the lexicalParent instead of its remapIn property when defining the objects a Key locks and unlocks in the plausibleKeyList and actualKeyList properties of a Key. For example, in the following definition the silver key will work as presumably intended:</p>

<p><div class="code"><pre>
cabinet: Fixture 'cabinet'
   remapIn: SubComponent
   {
      lockability = lockableWithKey
      isLocked = true
      isOpenable = true
    }
    
    remapOn: SubComponent {}
;

silverKey: Key 'silver key'
   plausibleLockList = [cabinet]
   actualLockList = [cabinet]
;
</pre></div></p>



<hr>
<p><span class="code">QDefaults.canReach(a, b)</span> has been amended to take account of the checkReach() and checkReachIn() methods of the objects along the containment path from a to b.</p>

<hr>
<p>Room and Region both now define two new methods: <strong>travelerLeaving(traveler, dest)</strong> and <strong>travelerEntering(traveler, dest)</strong>. These are both invoked just before travel actually takes place, the first on the room or region that's about to be left, and the second on the room or region that's about to be entered. The traveler parameter is the actor doing the traveling, while dest is the room that's about to be entered. These methods are only called on regions when the starting room and destination rooms are in one or more regions that are not common to them both.</p>
<hr>

<p>The checkRoomToHold() method (used by the TAKE action to enforce inventory limits) now uses the new method getBulkCarried() instead of getBulkWithin() as before; getBulkCarried() excludes items that are being worn from the total, since these presumably do not contribute to the total bulk carried in an actor's hands. The Doff action therefore now also enforces checkRoomToHold() in its check() method.</p>
<hr>
<p>The default value of <strong>disambigOrder</strong> (a property of Mentionable) has been changed to <span class="code">(listOrder)</span>, and that of <strong>disambigGroup</strong> has been changed from nil to 0 (zero). This means that the default behaviour of the library will be to list items in disambiguation prompts in the order of their listOrder property, which is probably what's most frequently required when a listOrder has been specified. </p>
<hr>
<p>The attempt to implicitly open a closed door before travelling through it has been moved from the travelVia() method to the execTravel() method of the Door class. This means that the before travel notifications are carried out before any attempt is made to open the door, which gives better results when travel via the door is prohibited (by an NPC, for example).</p>
<hr>
<p>The function <span class="code">makeListStr(lst)</span> now sorts the objects in lst in ascending order of their listOrder property before constructing the string version of the list.</p>
<hr>
<p>The handling of the PURLOIN debugging verb has been changed so that it's no longer possible to purloin objects that are fixed in place. Purloining a fixed object causes it to become a component of the player character (which probably isn't what's intended) and risks playing havoc with the world model, so it seems better to rule it out. If authors/testers really need to move fixed objects around this can be done with EVAL obj.moveInto(wherever).</p>
<hr>
<p>The grammar for the EXAMINE verb has been extended so that it will look accept LOOK X or L X as well as LOOK AT X or L AT X (plus the other various valid forms).</p>
<hr>
<p>The Lever class now as an <span class="code">isPushed</span> property as well as an <span class="code">isPulled</span> property. By default isPushed = !isPulled, but the existence of the separate isPushed property makes it easier to decouple the two if you want a lever that can also be in a position between the two extremes (when both isPushed and isPulled would be nil). The verify routine for dobjFor(Push) on the Lever thus now tests for isPushed rather than !isPulled.</p>
<hr>
<p>GameMainDef.newGame() now sets gAction to a new Look action (the action effectively about to be performed just before the first turn) and gActor to the player character. This makes it more likely that any user startup code that assumes the extistence of an action context, such as using <span class="code">gMessageParams()</span> in gameMain.showIntro() or within the initial room description, will work as expected rather than causing a run-time error.</p>
<hr>
<p>The message parameter substitutions {a obj}, {an obj}, {a subj obj} and {an subj obj} have been added; these work just like {the obj} and {the subj obj} but use the indefinite article instead of the definite article (or rather the aName property of obj rather than the theName property).</p>
<hr>
<p>Parser.defaultActions is now nil by default. This means that the parser no longer tries to treat commands it doesn't understand as possible noun phrases referring to the direct object of an EXAMINE command (or a GO TO command for rooms). The behavior during conversations is not affected; any command the parser can't make sense of during a conversation is still taken as a SAY command. The former behaviour (i.e. with FOO treated as EXAMINE FOO) was causing inconsistent behaviour (sometimes reporting 'You see no foo here' and sometimes reporting 'I don't understand that command' with no apparent rhyme or reason). Since it is not normal IF parser behaviour (to treat a command consisting purely as a noun phrase as the target of an unstated EXAMINE or other default command), it seems reasonable to turn this behaviour off by default. Game authors who want this behaviour can restore it by setting Parser.defaultActions to true (or could provide a custom command to allow players to turn it on and off).</p>
<hr>
<p>The <span class="code">StairwayUp</span>, <span class="code">StairwayDown</span> and <span class="code">Passage</span> classes have been amended to respect the values ot the <span class="code">isClimbable</span>, <span class="code">isClimbDownable</span> and <span class="code">isGoThroughable</span> properties respectively (these properties now being true by default for each of these classes in turn). Previously these classes overrid the verify() methods supplied by Thing so that these properties were effectively ignored, which made the behaviour of these classes inconsistent with what users might reasonably expect.</p>
<hr>
<p>Bug fixed in which a dropped object was moved into the actor's outermost room instead of the immediate location. The new Thing property <strong>dropLocation</strong> now defines where an object dropped in a location should land. By default dropLocation is simply self.</p>
<hr>
<p>Bug fixed which could cause a run-time error when the player supplied the missing noun of a command in response to a parser query.</p>
<hr>
<p>The bug that prevented a Doer from always matching a command specification involving specific problems has re-emerged, and has once again been fixed.</p>
<hr>
<p>Bug fixed in which the HTML entities &amp;rdquo; and &amp;ldquo; used to replace double-quote marks in textual outpit lacked the terminating semilcolon.</p>
<hr>
<p>Bug fixed whereby the parser would ask a pointless disambiguation question in response to a command involving one of a number of identical objects; e.g. TAKE COIN would result in the message, "Which to do mean, a coin?".</p>
<hr>
<p>Bug fixed whereby commands involving a specified number of objects would sometimes result in the parser making perverse choices; for example, if there were two coins on the floor and a third being carried by the player, TAKE TWO COINS might be interpreted to mean taking one of the coins on the floor plus the one the player character already holds, instead of the two on the floor as the player presumably intended.</p>
<hr>
<p>Bug fixed whereby commands involving a specified number of objects would result in the wrong error message if more objects were specified than were available; for example TAKE FOUR COINS might result in "You see no four coins here" instead of "There aren't that many available."</p>
<hr>
<p>Various bugs fixed concerning the resolution of the pronouns 'you' and 'your', including the bug that caused a crash when 'your' was used in a command and the failure of the parser to recognize that 'you' and 'your' referred to the player character in contexts where this would be the player's clear intention.</p>
<hr>
<p>Various bugs fixed concerning inappropriate or run-time-error-causing error-messages when a command referred to something by its owner (e.g. X BOB'S COIN when Bob doesn't have a coin).</p>
<hr>
<br>




<h2><a name="v0.3">Version 0.3</a> (18 December 2012)</h2>
<p><strong>Risk of incompatibility:</strong> The Thing property <strong>nothingThroughMsg</strong> has been renamed <strong>lookThroughMsg</strong>, which better reflects its function. The default text of this message remains unchanged.</p>

<p>Similarly nothingInMsg, nothingUnderMsg and nothingBehindMsg have been renamed lookInMsg, lookUnderMsg and lookBehindMsg.</p>
<hr>
<p><strong>Risk of incompatibility:</strong> The Thing properties <strong>autoTakeOnLookUnder</strong> and <strong>autoTakeOnLookBehind</strong> have been abolished, and the behaviour of LOOK BEHIND and LOOK UNDER slightly changed. Two new properties and three new methods have been introduced instead. Tne new <strong>autoTakeOnFindHidden</strong> property determines whether an object may be automatically taken when it's moved from a hiddenXXXX list. The default value of autoTakeOnFindHidden is (isFixed), the idea being that if we look in, under, or behind something fixed (like a pile of junk or a piece of furniture) and there's nowhere else for the objects discovered to go, we'll probably take them, but that if we look under or behind something portable, like a rug or a blanket, we probably move the rug or blanket a little to do so and leave the item discovered where it notionally was all along (in the same location as the portable item we've just looked under/behind). The new property <strong>findHiddenDest</strong> determines where an object is moved to from a hiddenXXXX list (when there's no obvious container for it); by default if autoTakeOnFindHidden is true, then findHiddenDest is gActor (the actor who will take the items discovered), otherwise it's the location of the object that's just been looked in/under/behind. These properties are actually used in the three new methods <strong>findHiddenIn()</strong>, <strong>findHiddenUnder()</strong>, and <strong>findHiddenBehind()</strong>.</p>

<p>The sequence of events with LOOK UNDER X is now as follows:</p>
<ol>
<li>If X has a contType of Under then this is the target object we'll work with.</li>
<li>Otherwise, if it has an associated remapUnder object, we'll work with that.</li>
<li>If the target object has a contType of Under then move everything from the hiddenUnder list to the target object and then list the contents of the target object as being underneath it (or say there's nothing under it if there's nothing there).</li>
<li>Otherwise, if there's anything in the hiddenUnder list, call findHiddenUnder().</li>
<li>Otherwise, say there's nothing there.</li>
</ol>

<p>The findHiddenUnder() method then moves everything from the hiddenUnder list to findHiddenDest and displays an appropriate message.</p>

<p>LOOK IN X and LOOK BEHIND X work in much the same way (except with hiddenIn and hiddenBehind respectively and contTypes of In and Behind respectively).</p>

<p>This may all seem a bit complicated, but it should provide reasonable default behaviour most of the time, while being relatively easy to customize for exceptional cases.</p>

<hr>
<p>A <strong>hiddenIn</strong> property has been added to Thing. It can be used in much the same way as hiddenUnder or hiddenBehind now do. It can be used either for objects in a container that won't be noticed until the container is explicitly searched or for objects hidden in things like piles of junk or haystacks that aren't containers in the normal sense.</p>
<hr>
<p>The action handling for ENTER has been decoupled from that for BOARD (along with the vocabulary used to trigger these actions). ENTER now handles getting inside something that has a contType of In. BOARD handles getting on something that has a contType of On. The new isEnterable flag determines whether an actor can get inside something (the contType must also be In). Note that this does not effect the Enterable class (which is used for things like buildings which can be entered by traveling to a new room representing their interior), but that the Booth class is now defined with isEnterable = true rather than isBoardable = true.</p>
<hr>
<p>A number of methods (such as lookAroundWithin() and methods it calls) have been moved from Room to Thing. This is to allow a Thing (particularly a closed Booth) to describe its interior properly when the player character is contained within it. Since Room inherits from Thing, this should not affect any existing code.</p>
<hr>
<p>In several places getOutermostRoom (in particular gPlayerChar.getOutermostRoom) has been replaced with outermostVisibleParent() (e.g. in the implementation of the LOOK command, and in other places where a look around is performed) to ensure that the right description is presented when looking around from within a closed container (such as a booth).</p>
<hr>
<p>Thing.statusName(actor) has been amended to give sensible results when looking around from within a closed container.</p>
<hr>
<p>A new <strong>interiorDesc</strong> property has been added to Thing. This is used as the room description when looking around from inside a closed container.</p>
<hr>
<p>The touchObj precondition and the QDefaults.canReach() method have been changed so that if the object that one is trying to reach is the object that's blocking the reach path, it's now considered touchable. This is to allow, for example, an actor to open a closed container from the inside (previously you would have got a message like "You can't reach the large wooden box through the large wooden box.")</p>
<hr>
<p>The default value of Thing.isOpen has been changed from nil to (!isOpenable). This makes the definition of a simple container (by adding contType = In) just a little easier and more intuitive, and so is probably the better default case. Note that this doesn't effect the Container class (which already defines isOpen = true) or the OpenableContainer class (which defines isOpen = nil). The isOpen property of Door is now explicitly nil by default to ensure that doors normally start out closed.</p>
<hr>
<p>The handling of the INVENTORY command has been changed to make use of inventoryLister. inventoryLister has been changed to optionally allow the display of additional information (such as 'providing light') after the names of items in an inventory list, and to optionally display the contents of items in an inventory list (e.g. 'You are carrying a big bag (in which is a blue ball). '). To facilitate the latter a new subLister has been created and a new buildList() method added to the Lister class. The buildList(lst) method returns a single-quoted string containing what show(list, 0) would have displayed, minus the terminating paragraph break.</p>
<hr>
<p>Two new properties <strong>isProminentSmell</strong> and <strong>isProminentNoise</strong> have been added to Thing, both true by default. The smellDesc and listenDesc properties of an object are only displayed in response to an <em>intransitive</em> SMELL or LISTEN command respectively if these properties are true. These properties have no effect on the transitive SMELL SOMETHING and LISTEN TO SOMETHING commands. This allows game authors to exclude items being listed in response to an intransitve LISTEN or SMELL while still making them respond to being explicitly listened to or smelled.</p>
<hr>
<p>A number of redundant methods (that aren't actually used anywhere) have been removed, such as Thing.lookAround(pov). These are generally methods that were defined in Mercury or adv3 but which are not needed in adv3Lite, either because they have no function in adv3Lite at all (such as some of the methods and properties relating to senseCache on libGlobal) or because adv3Lite defines its own version to perform the appropriate function (e.g. lookAround(pov) is not needed because adv3Lite defines lookAroundWithin()).</p>
<hr>
<p>The Actor class now defines <span class="code">contType = Carrier</span> by default (as it should have done all along).</p>
<hr>
<p>The Thing class now has a new <span class="code">display(prop)</span> method, where prop is a property pointer. If prop contains a double-quoted string or a method, the display() method simply calls <span class="code">self.(prop)</span>. If prop contains a single-quoted string or integer, display calls <span class="code">say(self.(prop))</span>. This simplifies the creation of code that will display a text property correctly whether it has been defines as a single-quoted string, a double-quoted string and a method, and several routines have been adapted to take advantage of it.</p>
<hr>
<p>It's now possible to prevent the use of ALL (e.g. EXAMINE ALL) with all but basic inventory handling verbs (TAKE, DROP, PUT and DOFF). Some people feel that the use of ALL with all the other verbs (EXAMINE ALL, SHOW ALL TO FRED etc.) allows a bit too much of a blunderbus approach to playing Interactive Fiction. If you wish to disable it, you can define the new <strong>allVerbsAllowAll</strong> property on gameMain to be nil (the default is true). You can also allow and disallow ALL for individual actions by setting their <strong>allowAll</strong> property to true or nil (which takes precedence over the allVerbsAllowAll setting).</p>
<hr>
<p>The library now defines SIT ON and LIE ON actions. The default behaviour is simply to BOARD the object in question, since avd3Lite does not provide any support for postures. Games can override SIT ON and LIE ON to do something different if they need to. STAND IN, SIT IN and LIE IN actions have also been added; by default they're all equivalent to ENTER (although again this can be overridden). If you want SIT ON & SIT IN (or LIE ON and LIE IN) to act equivalently, e.g. for a chair or bed, define the chair or bed as a Surface with <span class="code">isBoardable = true</span>and <span class="code">dobjFor(Enter) asDobjFor(Board)</span>.</p>
<hr>
<p>The library now suppresses the default "You see nothing special about the whatever" description of an object when the object has any state-specific information to add to its description. (This only makes a difference to objects where the author hasn't explicitly defined the desc property).</p>
<hr>
<p>If the actor is in a "NestedRoom" (i.e. a Container or Surface rather than a Room) then the command OUT now takes the actor out of the actor's immediate location; previously it was taken to be a command to leave the Room.</p>
<hr>
<p>Bug fixed whereby at several places in the library the non-existent property isPlural was referenced instead of the correct property, plural. Note however that this may change in a future release where 'is' may be prefixed to several property names (plural, transparent etc.) to provide a more consistent naming scheme across the library.</p>
<hr>
<p>Bug fixed whereby opening a container caused all its contents to be listed, instead of only its listable contents.</p>
<hr>
<p>Bug fixed that could prevent a Doer properly matching certain TI Actions for which resolveIobjFirst = true (since this caused the Doer matching mechanism to see the direct and indirect objects in reverse order).</p>
<hr>
<p>Bug fixed whereby a light source in a closed transparent container failed to illuminate a room.</p>
<hr>
<p>Bug fixed whereby when an action was applied to multiple objects and the name of each object was announced, any implied action reports came before the name of the object instead of after.</p>
<hr>
<p>Bug fixed whereby a run-time error could occur when verifying the second object of a TIAction when the verify routine depended on the first object having been identified but the first object had been selected without any need for disambiguation.</p>
<hr>
<p>Bug fixed whereby an actor getting off something that had an associated container attached (a table with a drawer, say) would cause an implied action opening the associated container.</p>
<hr>
<br>


<h2><a name="v0.2">Version 0.2</a> (November 2012)</h2>

<p>Facilities added to allow better control over the way items are displayed in room descriptions. The <strong>specialDescOrder</strong> property can now be used to control the order in which specialDescs are shown. The <strong>specialDescBeforeContents</strong> property can be used to show whether an item's specialDesc should be shown before or after the listing of miscellaneous items in the the room description. The &lt;&lt;list of&gt;&gt; &lt;&lt;list of is&gt;&gt; and &lt;&lt;is list of&gt;&gt; embedded expressions can be used to customize the way an item's contents are listed in a room description. The &lt;&lt;mention a&gt;&gt; and &lt;&lt;mention the&gt;&gt; embedded expressions can be used to have one item in a room description listing mention another (and thereby suppress the subsequent listing of the same item). For full details see the new section on <a href="roomdesc.htm">Room Descriptions</a>.
<hr>
<p>The new <strong>SenseRegion</strong> class can be used to define regions with sensory connections, that is regions where it is possible to see (and possibly smell and hear) ojects in one room from another. For details see the new <a href="senseregion.htm">SenseRegion</a> section of the manual.</p>
<hr>
<p>It is now possible to compile adv3Lite games for use with the <a href="webui.htm">WebUI</a> (i.e. for playing on-line via a browser).</p>
<hr>
<p>Mainly to support the WebUI, a number of <a href="webui.htm#inputmanager">inputManager</a> methods have been implemented (which are analogous to their adv3 counterparts). It is recommended that you always use these rather than the interpreter console i/o function equivalents. Note that in the adv3Lite version of these methods, there is no need to supply any arguments to inputManager.getInputLine() or inputManager.getKey() (since adv3Lite does not support real-time processing). </p>
<hr>
<p>The Parser's <a href="actionoverview.htm#default">DefaultAction</a> (for a command that consists purely of a noun) has been changed to the new ExamineOrGoToAction. This works exactly like the Examine action unless (a) the noun entered by the player is a room known to the player character; (b) the player character is not already in that room; and (c) the pathfind module is included in the build. If all these three conditions are fulfilled the ExamineOrGoTo action behaves like a GoTo action, thereby allowing the player to navigate the map just by entering the name of the location s/he wants the player character to head towards.</p>
<hr>
<p>The default value of <strong>GameMainDef.storeWholeObjectTable</strong> has been changed to true, since this is the safer option, and the memory requirement of storing the complete object table is unlikely to be an issue on a modern computer. If it is set to nil an additional setting now comes into effect: <strong>objTablePreinit.lookInMethods</strong>. If this is nil (the default), then objTablePreinit won't attempt to execute code (i.e. methods) to find conversation <a href="tags.htm">tags</a> indicating objects it needs to store in the object table; this is the safer option since executing methods out of context at preinit can easily cause run-time errors. For now, lookInMethods can be set to true to restore the previous behaviour, but this should be regarded as provisionally deprecated.</p>
<hr>
<p>The library preinit now marks the player character's immediate contents as known to the player character. This avoids the otherwise seemingly odd situation whereby a player familiar with the game tries to refer to something the player character is holding in conversation and it's not recognized by the parser as a valid topic (because the player has not yet taken inventory or performed any other action that would normally mark what the player character is holding as seen or known).</p>
<hr>
<p>A minor change has been made to the way the <a href="thing.htm#hidden">hiddenUnder and hiddenBehind</a> properties work. The new thing properties <strong>autoTakeOnLookUnder</strong> and <strong>autoTakeOnLookBehind</strong> allow you to specify that anything hidden under or behind the object in question should be taken by the actor when s/he looks under or behind it. If a look behind or look command action results in one or more objects being moved into the location of the object that has just been looked under/behind, then the message displayed now makes it clearer that the objects that have just been moved have been left in plain sight (rather than remaining concealed under or behind something else).</p>
<hr>
<p>An objOpen PreCondition has been added. This isn't (currently) used in the library (which uses containerOpen) but might prove useful to some game code.</p>
<hr>
<p>The documentation of the <a href="thing.htm">Thing</a> class now explains the use of the <strong>owner</strong> and <strong>ownsContents</strong> properties. These properties were present before but weren't previously documented in the manual.</p>
<hr>
<p>The setRevealed(tag) method of conversationManager so that the notification of other actors when a &lt;.revealed&gt; tag now only takes place when there's a respondingActor (i.e., when the &lt;.revealed&gt; tag is used in conversation). This corrects a bug whereby using a &lt;.reveal&gt; tag outside a conversation (e.g. to have an object description set a flag to trigger some other event) would cause a run-time error.</p>
<hr>
<p>The message "You find nothing of interest under the whatever" has been corrected (it did not display correctly before).</p>
<hr>
<p>Bug fixed whereby the player character's enclosing room was declared to be not visible when attempting to examine it.</p>
<hr>
<p>Bug fixed whereby the default action (i.e. entering a noun without a verb as a command) was taken to be a conversational command just after the current interlocutor had gone out of scope. </p>
<hr>
<p>Bug fixed whereby using a &lt;.convnode&gt; tag while a Conversation Node is active leaves the first Conversation Node still active (while activating the second one as well). A &lt;.convnode&gt; tag now overwrites the effect of any &lt;.convnode&gt; tag issued on a previous turn.</p>
<hr>
<p>Bug fixed in which the name of canEndConversation() method of ActorState was mis-spelled, so that ActorStates always tried to prevent conversations ending by default (since the non-existent method was deemed to be returning nil).</p>
<hr>
<p>Bugs fixed whereby a conversational command that triggered an implicit greeting would display a spurious "The x does not respond" message when no HelloTopic was found, or when a conversation was ended implicitly and no ByeTopic was found.</p>
<hr>
<p>Bugs fixed whereby HELLO and BYE commands (not explicitly directed to a specific actor) might either result in no response at all, or the response "The [cobj] does not respond" (where [cobj] should have been the name of the actor in question).</p>
<hr>
<p>Bug fixed in which the condition for deciding whether a SimpleAttachable should be listed separately was the wrong way round.</p>
</div>
<hr class="navb"><div class="navb">
<i>adv3Lite Library Manual</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="final.htm">Final Moves</a> &gt; 
Change Log
<br><span class="navnp"><a class="nav" href="conclusion.htm"><i>Prev:</i> Conclusion</a> &nbsp;&nbsp;&nbsp;  </span>

</div>


</body>
</html>