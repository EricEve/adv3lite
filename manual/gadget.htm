<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Optional Modules &mdash; Gadget</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="optional.htm">Optional Modules</a> &gt; 
Extras
<br><span class="navnp"><a class="nav" href="extra.htm"><i>Prev:</i> Extras</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="menu.htm"><i>Next:</i> Menus</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">
<h1>Gadgets</h1>
<p>Some IF games make use of various gadgets such as buttons, levers and dials to construct devices for the player character to interact with. The basis for a few simple such gadgets is provided in the gadget.t module. If your game doesn't make use of any of these gadgets you can safely exclude gadget.t from the build.</p>

<h2>Buttons and Levers</h2>

<p>A <a name="button-idx">Button</a> is simply a Thing that can be pushed. You can define the effects of pushing it in its <b>makePushed</b> method.</p>

<p>A <a name="lever-idx">Lever</a> is only slightly more complicated in that it has two states and can be pulled or pushed depending on which state it's in. When <b>isPulled</b> is nil the lever can be pulled (which makes isPulled true). When isPulled is true the lever can be pushed back into its original state again. You can override the <b>makePulled(stat)</b> method to carry out any side-effects of pulling and pushing the lever, but remember to call the inherited method (i.e. included a call to <span class=code>inherited(stat)</span> somewhere in your overridden method).</p>

<a name="settables"></a><h2>Settables and Dials</h2>

<p>A <b>Settable</b> is a Thing that can be set to one of a number of values with commands such as SET WHATEVER TO VALUE. To create a SETTABLE you need to define its <b>validSettings</b> property as a list of single-quoted strings defining the values to which it can be set and its <b>curSetting</b> property given as a single-quoted string (to define its initial setting; curSetting is updated each time the player issues a SET command). By default the Settable class converts the setting requested to lower case before checking its validity (e.g. SET SLIDER TO OFF would be treated as a request to set it to 'off'), so you would normally need to define the strings in the validSettings property as lower case. If you want to use upper case or mixed case settings you can override the <b>canonicalizeSetting(val)</b> to do something different  appropriately (either returning val.toUpper or returning val unchanged, for example). To carry out any side-effects of setting the slider (or whatever your SETTABLE represents) you can override <b>makeSetting(val</b>, but rememember to call the inherited method.</p>

<a>A <b>Dial</b> is simply a Settable that responds to TURN WHATEVER TO VALUE in the same way as SET WHATEVER TO VALUE. For example:</p>

<p><div class=code><pre>
+ Dial 'dial'
    "It can be set to 'off', 'slow' or 'fast'; it's currently set to
    &lt;&lt;curSetting&gt;&gt;. "
    
    curSetting = 'off'
    
    validSettings = ['off', 'slow', 'fast']
;

</pre></div>

<p>A <b>NumberedDial</b> is a Dial that can be turned to any (integer) numerical setting between <b>minSetting</b> and <b>maxSetting</b>. Note that minSetting and maxSetting must be defined as numerical values, while curSetting is still a single-quoted string (representing a number). For example to define a dial that can be set to any number between 1 and 50 and starts out set to 2 you might do this:</p>


<p><div class=code><pre>
+ NumberedDial 'dial'
    "It can be set to any number between 1 and 50; it's currently set to
    &lt;&lt;curSetting&gt;&gt;. "
    
    curSetting = '2'
    minSetting = 1
    maxSetting = 50    
;

</pre></div>

<p>Finally, since most buttons, levers, sliders and dials are generally part of or attached to some other object rather than free-standing portable objects in themselves, by default all these classes are defined with isFixed = true (although you can of course override that on your individual gadgets if need be). You will in any case probably want to override <b>cannotTakeMsg</b> to something less generic, such as 'The dial is firmly attached to the safe' or 'The firing stud is an integral part of your trusty blaster.'

</div>
<hr class="navb"><div class="navb">
<i>adv3Lite Library Manual</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="optional.htm">Optional Modules</a> &gt; 
Gadgets
<br><span class="navnp"><a class="nav" href="extra.htm"><i>Prev:</i> Extras</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="menu.htm"><i>Next: </i>Menus </a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>