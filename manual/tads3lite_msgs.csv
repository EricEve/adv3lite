"Type","ID","Message Text","Source File","Definition in Code"
"DMsg","onset of darkness","\n{I} {am} plunged into darkness.","action.t","DMsg(onset of darkness, '\n{I} {am} plunged into darkness. ');"
"DMsg","remap error","<b>ERROR!</b> The long form of remap is no longer available; please use a Doer instead.","action.t","DMsg(remap error, '<b>ERROR!</b> The long form of remap is no longer available; please use a Doer instead. ');"
"DMsg","command not present","<.parser>That command isn&rsquo;t needed in this story.<./parser>","action.t","DMsg(command not present, '<.parser>That command isn&rsquo;t needed in this story.<./parser> ');"
"DMsg","acknowledge notify status","<.parser>Score notifications are now <<stat ? 'on' : 'off'>>.<./parser>","action.t","DMsg(acknowledge notify status, '<.parser>Score notifications are now <<stat ? 'on' : 'off'>>.<./parser> ');"
"DMsg","all not allowed","Sorry; ALL is not allowed with this command.","action.t","DMsg(all not allowed, 'Sorry; ALL is not allowed with this command. ');"
"DMsg","quit query","<.p>Do you really want to quit? (y/n)?\n>","actions.t","DMsg(quit query, '<.p>Do you really want to quit? (y/n)?\n>');"
"DMsg","undo okay","One turn undone: {1}', libGlobal.lastCommandForUndo","actions.t","DMsg(undo okay, 'One turn undone: {1}', libGlobal.lastCommandForUndo);"
"DMsg","undo failed","Undo failed.","actions.t","DMsg(undo failed, 'Undo failed. ');"
"DMsg","restart query","Do you really want to start again from the beginning (y/n)?\n>","actions.t","DMsg(restart query, 'Do you really want to start again from the beginning (y/n)?\n>');"
"DMsg","exit color onoff","Okay, colouring of unvisited exits is now {1}.<.p>', cmd.verbProd.on_","actions.t","DMsg(exit color onoff, 'Okay, colouring of unvisited exits is now {1}.<.p>', cmd.verbProd.on_);"
"DMsg","exit color change","Okay, unvisited exits in the status line will now be shown in {1}. ', cmd.verbProd.colour_","actions.t","DMsg(exit color change, 'Okay, unvisited exits in the status line will now be shown in {1}. ', cmd.verbProd.colour_);"
"DMsg","no exit lister","Sorry, that command is not available in this game, since there\'s no exit lister.","actions.t","DMsg(no exit lister, 'Sorry, that command is not available in this game, since there\'s no exit lister. '); "
"DMsg","score not present","<.parser>This story doesn&rsquo;t use scoring.<./parser>","actions.t","DMsg(score not present, '<.parser>This story doesn&rsquo;t use scoring.<./parser> '); "
"DMsg","show notify status","<.parser>Score notifications are currently <<stat ? 'on' : 'off'>>.<./parser>","actions.t","DMsg(show notify status, '<.parser>Score notifications are currently <<stat ? 'on' : 'off'>>.<./parser> ');"
"DMsg","hints not present","<.parser>Sorry, this story doesn&rsquo;t have any built-in hints.<./parser>","actions.t","DMsg(hints not present, '<.parser>Sorry, this story doesn&rsquo;t have any built-in hints.<./parser> ');"
"DMsg","no hints to disable","<.parser>This game doesn\'t have any hints to turn off.","actions.t","DMsg(no hints to disable, '<.parser>This game doesn\'t have any hints to turn off. ');"
"DMsg","inventory list conjunction",", and \v","actions.t","DMsg(inventory list conjunction, ', and \v');"
"DMsg","wait","Time {dummy} {passes}.","actions.t","DMsg(wait, 'Time {dummy} {passes}. ');"
"DMsg","jump","{I} {jump} on the spot, fruitlessly.","actions.t","DMsg(jump, '{I} {jump} on the spot, fruitlessly. ');"
"DMsg","yell","{I} {shout} very loudly.","actions.t","DMsg(yell, '{I} {shout} very loudly. ');"
"DMsg","smell nothing intransitive","{I} {smell} nothing out of the ordinary.<.p>","actions.t","DMsg(smell nothing intransitive, '{I} {smell} nothing out of the ordinary.<.p>');"
"DMsg","hear nothing listen","{I} hear{s/d} nothing out of the ordinary.<.p>","actions.t","DMsg(hear nothing listen, '{I} hear{s/d} nothing out of the ordinary.<.p>');"
"DMsg","no sleeping","This {dummy} {is} no time for sleeping.","actions.t","DMsg(no sleeping, 'This {dummy} {is} no time for sleeping. ');"
"DMsg","already standing","{I} {am} standing.","actions.t","DMsg(already standing, '{I} {am} standing. ');"
"DMsg","vague travel","Which way do you want to go?","actions.t","DMsg(vague travel, 'Which way do you want to go? '); "
"DMsg","nowhere back","{I} {have} nowhere to go back to.","actions.t","DMsg(nowhere back, '{I} {have} nowhere to go back to. ');"
"DMsg","no way back","There{dummy}{\'s} no way back.","actions.t","DMsg(no way back, 'There{dummy}{\'s} no way back. ');"
"DMsg","already back there","{I}{\'m} already there.","actions.t","DMsg(already back there, '{I}{\'m} already there. ');"
"DMsg","going back dir","(going {1})\n', dir.name","actions.t","DMsg(going back dir, '(going {1})\n', dir.name);"
"DMsg","no journey","{I}{\'m} not going anywhere.","actions.t","DMsg(no journey, '{I}{\'m} not going anywhere. ');"
"DMsg","off route","{I}{\'m} no longer on {my} route. Use the GO TO command to set up a new route.","actions.t","DMsg(off route, '{I}{\'m} no longer on {my} route. Use the GO TO command to set up a new route. ');"
"DMsg","going dir","(going {1})\n', dir.name","actions.t","DMsg(going dir, '(going {1})\n', dir.name);"
"DMsg","no interlocutor","{I}{\'m} not talking to anyone.","actions.t","DMsg(no interlocutor, '{I}{\'m} not talking to anyone. ');"
"DMsg","nothing to take","There{dummy}{\'s} nothing available to take from {1}. ', gCommand.iobj.theName","actions.t","DMsg(nothing to take, 'There{dummy}{\'s} nothing available to take from {1}. ', gCommand.iobj.theName);"
"DMsg","not on anything","{I}{\'m} not on anything.","actions.t","DMsg(not on anything, '{I}{\'m} not on anything. ');"
"DMsg","push travel","{I} {push} {the dobj} into {1}. ', gActor.getOutermostRoom.name != nil ? gActor.getOutermostRoom.theName : 'the area","actions.t","DMsg(push travel, '{I} {push} {the dobj} into {1}. ', gActor.getOutermostRoom.name != nil ? gActor.getOutermostRoom.theName : 'the area');"
"DMsg","not talking","{I}{\'m} not talking to anyone.","actions.t","DMsg(not talking, '{I}{\'m} not talking to anyone. ');"
"DMsg","no one here","There{dummy}{\'s} no one {here} to talk to.","actions.t","DMsg(no one here, 'There{dummy}{\'s} no one {here} to talk to. ');"
"DMsg","already talking","{I}{\'m} already talking to {1}. ', gPlayerChar.currentInterlocutor.theName","actions.t","DMsg(already talking, '{I}{\'m} already talking to {1}. ', gPlayerChar.currentInterlocutor.theName);"
"DMsg","think","{I} {think}, therefore {i} {am}.","actions.t","DMsg(think, '{I} {think}, therefore {i} {am}. ');"
"DMsg","scripting canceled","<.parser>Canceled.<./parser>","actions.t","DMsg(scripting canceled, '<.parser>Canceled.<./parser>'); }"
"DMsg","scripting failed exception","<.parser>Failed; ","actions.t","DMsg(scripting failed exception, '<.parser>Failed; "
"DMsg","scripting failed","<.parser>Failed; an error occurred opening the script file.<./parser>","actions.t","DMsg(scripting failed, '<.parser>Failed; an error occurred opening the script file.<./parser> ');"
"DMsg","script off ignored","<.parser>No script is currently being recorded.<./parser>","actions.t","DMsg(script off ignored, '<.parser>No script is currently being recorded.<./parser>');"
"DMsg","script off okay","<.parser>Scripting ended.<./parser>","actions.t","DMsg(script off okay, '<.parser>Scripting ended.<./parser>');"
"DMsg","recording canceled","<.parser>Canceled.<./parser>","actions.t","DMsg(recording canceled, '<.parser>Canceled.<./parser> '); }"
"DMsg","recording failed exception","<.parser>Failed; ","actions.t","DMsg(recording failed exception, '<.parser>Failed; "
"DMsg","recording failed","<.parser>Failed; an error occurred opening the command recording file.<./parser>","actions.t","DMsg(recording failed, '<.parser>Failed; an error occurred opening the command recording file.<./parser>');"
"DMsg","record off ignored","<.parser>No command recording is currently being made.<./parser>","actions.t","DMsg(record off ignored, '<.parser>No command recording is currently being made.<./parser> ');"
"DMsg","record off okay","<.parser>Command recording ended.<./parser>","actions.t","DMsg(record off okay, '<.parser>Command recording ended.<./parser> ');"
"DMsg","replay canceled","<.parser>Canceled.<./parser>","actions.t","DMsg(replay canceled, '<.parser>Canceled.<./parser> '); }"
"DMsg","input script failed exception","<.parser>Failed; ","actions.t","DMsg(input script failed exception, '<.parser>Failed; "
"DMsg","input script failed","<.parser>Failed; the script input file could not be opened.<./parser>","actions.t","DMsg(input script failed, '<.parser>Failed; the script input file could not be opened.<./parser>');"
"DMsg","input script okay","<.parser>Reading commands from <q><< File.getRootName(fname).htmlify()>></q>...<./parser>\n","actions.t","DMsg(input script okay, '<.parser>Reading commands from <q><< File.getRootName(fname).htmlify()>></q>...<./parser>\n ');"
"DMsg","save cancelled","<.parser>Canceled.<./parser>","actions.t","DMsg(save cancelled, '<.parser>Canceled.<./parser> '); }"
"DMsg","save failed on server","<.parser>Failed, because of a problem accessing the storage server: <<makeSentence(sse.errMsg)>><./parser>","actions.t","DMsg(save failed on server, '<.parser>Failed, because of a problem accessing the storage server: <<makeSentence(sse.errMsg)>><./parser>');"
"DMsg","save failed","<.parser>Failed; your computer might be running low on disk space, or you might not have the necessary permissions to write this file.<./parser>","actions.t","DMsg(save failed, '<.parser>Failed; your computer might be running low on disk space, or you might not have the necessary permissions to write this file.<./parser>'); "
"DMsg","save okay","<.parser>Saved.<./parser>","actions.t","DMsg(save okay, '<.parser>Saved.<./parser> ');"
"DMsg","restore canceled","<.parser>Canceled.<./parser>","actions.t","DMsg(restore canceled, '<.parser>Canceled.<./parser> '); "
"DMsg","restore failed on server","<.parser>Failed, because of a problem accessing the storage server: <<makeSentence(sse.errMsg)>><./parser>","actions.t","DMsg(restore failed on server,'<.parser>Failed, because of a problem accessing the storage server: <<makeSentence(sse.errMsg)>><./parser>'); "
"DMsg","restore invalid file","<.parser>Failed: this is not a valid saved position file.<./parser>","actions.t","DMsg(restore invalid file, '<.parser>Failed: this is not a valid saved position file.<./parser> '); "
"DMsg","restore invalid match","<.parser>Failed: the file was not saved by this story (or was saved by an incompatible version of the story).<./parser>","actions.t","DMsg(restore invalid match, '<.parser>Failed: the file was not saved by this story (or was saved by an incompatible version of the story).<./parser> '); "
"DMsg","restore corrupted file","<.parser>Failed: this saved state file appears to be corrupted. This can occur if the file was modified by another program, or the file was copied between computers in a non-binary transfer mode, or the physical media storing the file were damaged.<./parser>","actions.t","DMsg(restore corrupted file, '<.parser>Failed: this saved state file appears to be corrupted. This can occur if the file was modified by another program, or the file was copied between computers in a non-binary transfer mode, or the physical media storing the file were damaged.<./parser> '); "
"DMsg","restore failed","<.parser>Failed: the position could not be restored.<./parser>","actions.t","DMsg(restore failed, '<.parser>Failed: the position could not be restored.<./parser>'); "
"DMsg","restore okay","<.parser>Restored.<./parser>","actions.t","DMsg(restore okay, '<.parser>Restored.<./parser> ');"
"DMsg","file prompt failed","<.parser>A system error occurred asking for a filename. Your computer might be running low on memory, or might have a configuration problem.<./parser>","actions.t","DMsg(file prompt failed, '<.parser>A system error occurred asking for a filename. Your computer might be running low on memory, or might have a configuration problem.<./parser> ');"
"DMsg","file prompt failed msg","<.parser>Failed: <<makeSentence(msg)>><./parser>","actions.t","DMsg(file prompt failed msg, '<.parser>Failed: <<makeSentence(msg)>><./parser> ');"
"DMsg","no repeat","Sorry, there is no action available to repeat.","actions.t","DMsg(no repeat, 'Sorry, there is no action available to repeat. ');"
"DMsg","cannot command system action","Only the player can carry out that kind of command.","actor.t","DMsg(cannot command system action, 'Only the player can carry out that kind of command. ');"
"DMsg","follow","<.p>{The follower} {follows} behind {me}.","actor.t","DMsg(follow, '<.p>{The follower} {follows} behind {me}. ');"
"DMsg","actor arriving","{The subj traveler} {arrives} in the area.","actor.t","DMsg(actor arriving, '{The subj traveler} {arrives} in the area. ');"
"DMsg","not interlocutor","{I}{\'m} not talking to {1}. ', theName","actor.t","DMsg(not interlocutor, '{I}{\'m} not talking to {1}. ', theName);"
"DMsg","catch okay","{The subj iobj} {catches} {the obj}.","actor.t","DMsg(catch okay, '{The subj iobj} {catches} {the obj}. ');"
"DMsg","drop catch","{The subj iobj} {fails} to catch {the obj}, so that {he obj} {lands} on the ground instead.","actor.t","DMsg(drop catch, '{The subj iobj} {fails} to catch {the obj}, so that {he obj} {lands} on the ground instead. ');"
"DMsg","say head after actor","{I} {head} off {1} after {2}. ', conn.traversalMsg, theName","actor.t","DMsg(say head after actor, '{I} {head} off {1} after {2}. ', conn.traversalMsg, theName);"
"DMsg","state follow","{The follower} {follows} behind {me}.","actor.t","DMsg(state follow, '{The follower} {follows} behind {me}. ');"
"DMsg","nothing to discuss on that topic","{I} {have} nothing to discuss on that topic just {then}.","actor.t","DMsg(nothing to discuss on that topic, '{I} {have} nothing to discuss on that topic just {then}. '); "
"DMsg","waiting for follow","{The subj myactor} {is} waiting for {the pc} to follow {him myactor} {1}. ', nd.departureName","actor.t","DMsg(waiting for follow, '{The subj myactor} {is} waiting for {the pc} to follow {him myactor} {1}. ', nd.departureName);"
"DMsg","actor is here","{The subj myactor} {is} {here}.","actor.t","DMsg(actor is here, '{The subj myactor} {is} {here}. '); "
"DMsg","suggestion list intro","{I} could","actor.t","DMsg(suggestion list intro, '{I} could ');"
"DMsg","nothing in mind","{I} {have} nothing in mind to discuss with {1} just {then}. ', gPlayerChar.currentInterlocutor.theObjName","actor.t","DMsg(nothing in mind, '{I} {have} nothing in mind to discuss with {1} just {then}. ', gPlayerChar.currentInterlocutor.theObjName);"
"DMsg","ask query","ask {him interlocutor}","actor.t","DMsg(ask query, 'ask {him interlocutor} ');"
"DMsg","ask about","ask {him interlocutor} about","actor.t","DMsg(ask about, 'ask {him interlocutor} about ');"
"DMsg","tell about","tell {him interlocutor} about","actor.t","DMsg(tell about, 'tell {him interlocutor} about ');"
"DMsg","talk about","talk about","actor.t","DMsg(talk about, 'talk about ');"
"DMsg","give","give {him interlocutor}","actor.t","DMsg(give, 'give {him interlocutor} ');"
"DMsg","show","show {him interlocutor}","actor.t","DMsg(show, 'show {him interlocutor} ');"
"DMsg","ask for","ask {him interlocutor} for","actor.t","DMsg(ask for, 'ask {him interlocutor} for ');"
"DMsg","tell to","tell {him interlocutor} to","actor.t","DMsg(tell to, 'tell {him interlocutor} to ');"
"DMsg","or"," or","actor.t","DMsg(or, ' or ');"
"DMsg","cannot move while attached","{The subj cobj} {cannot} be moved while {he cobj} {is} attached to {the other}.","attachables.t","DMsg(cannot move while attached, '{The subj cobj} {cannot} be moved while {he cobj} {is} attached to {the other}. '); "
"DMsg","okay plug in","{I} {plug} in {1}. ', gActionListStr","attachables.t","DMsg(okay plug in, '{I} {plug} in {1}. ', gActionListStr); }"
"DMsg","debugger not present","Debugger not present.","debug.t","DMsg(debugger not present, 'Debugger not present. ');"
"DMsg","fiat lux","{I} suddenly {1} glowing. ', gPlayerChar.isLit ? 'start' : 'stop'","debug.t","DMsg(fiat lux, '{I} suddenly {1} glowing. ', gPlayerChar.isLit ? 'start' : 'stop' );"
"DMsg","no test scripts","There are no test scripts defined in this game.","debug.t","DMsg(no test scripts, 'There are no test scripts defined in this game. '); exit; }"
"DMsg","test sequence not found","Test sequence not found.","debug.t","DMsg(test sequence not found, 'Test sequence not found. '); }"
"DMsg","debug test now holding","{I} {am} {now} holding {1}.\n', makeListStr(testHolding, &theName)","debug.t","DMsg(debug test now holding, '{I} {am} {now} holding {1}.\n', makeListStr(testHolding, &theName)); }"
"DMsg","explain exits on off","<.p>Exit Listing can be adjusted with the following commands:\n EXITS ON -- show exits in both the status line and in room descriptions.\n EXITS OFF -- show exits neither in the status line nor in room descriptions.\n EXITS STATUS -- show exits in the status line only.\n EXITS LOOK -- show exits in room descriptions only.\n EXITS COLOR ON -- show unvisited exits in a different colour.\n EXITS COLOR OFF -- don\'t show unvisited exits in a different colour.\n EXITS COLOR RED / BLUE / GREEN / YELLOW -- show unvisted exits in the specified colour. <.p>","exits.t","DMsg(explain exits on off, '<.p>Exit Listing can be adjusted with the following commands:\n EXITS ON -- show exits in both the status line and in room descriptions.\n EXITS OFF -- show exits neither in the status line nor in room descriptions.\n EXITS STATUS -- show exits in the status line only.\n EXITS LOOK -- show exits in room descriptions only.\n EXITS COLOR ON -- show unvisited exits in a different colour.\n EXITS COLOR OFF -- don\'t show unvisited exits in a different colour.\n EXITS COLOR RED / BLUE / GREEN / YELLOW -- show unvisted exits in the specified colour. <.p>'); "
"DMsg","exits on off okay","Okay. Exit listing in the status line is now <<stat ? 'ON' : 'OFF'>>, while exit listing in room descriptions is now <<look ? 'ON' : 'OFF'>>.","exits.t","DMsg(exits on off okay, 'Okay. Exit listing in the status line is now <<stat ? 'ON' : 'OFF'>>, while exit listing in room descriptions is now <<look ? 'ON' : 'OFF'>>. ');"
"DMsg","no exits from here","There {plural} {are} no exits from {here}.","exits.t","DMsg(no exits from here, 'There {plural} {are} no exits from {here}. ');"
"DMsg","no exits","Exits: none.","exits.t","DMsg(no exits, 'Exits: none. ');"
"DMsg","no clear exits","It{dummy}{\'s} not clear where {i} {can} go from {here}.","exits.t","DMsg(no clear exits, 'It{dummy}{\'s} not clear where {i} {can} go from {here}. ');"
"DMsg","exits from here","From {here} {i} could go","exits.t","DMsg(exits from here, 'From {here} {i} could go ');"
"DMsg","current exit settings","Exits are listed <<if(inStatusLine && inRoomDesc)>> both in the status line and in room descriptions. <<else if(inStatusLine && !inRoomDesc)>> in the status line only. <<else if(!inStatusLine && inRoomDesc)>> in room descriptions only. <<else if(!inStatusLine && !inRoomDesc)>> ""neither in the status line nor in room descriptions. <<end>>","exits.t","DMsg(current exit settings, 'Exits are listed <<if(inStatusLine && inRoomDesc)>> both in the status line and in room descriptions. <<else if(inStatusLine && !inRoomDesc)>> in the status line only. <<else if(!inStatusLine && inRoomDesc)>> in room descriptions only. <<else if(!inStatusLine && !inRoomDesc)>> ""neither in the status line nor in room descriptions. <<end>>');"
"DMsg","say departing up stairs","{The subj traveler} {goes} up {1}. ', theName","extras.t","DMsg(say departing up stairs, '{The subj traveler} {goes} up {1}. ', theName);"
"DMsg","say following up staircase","{The subj follower} {follows} {the leader} up {1}. ', theName","extras.t","DMsg(say following up staircase, '{The subj follower} {follows} {the leader} up {1}. ', theName);"
"DMsg","say departing down stairs","{The subj traveler} {goes} down {1}. ', theName","extras.t","DMsg(say departing down stairs, '{The subj traveler} {goes} down {1}. ', theName);"
"DMsg","say following down staircase","{The subj follower} {follows} {the leader} down {1}. ', theName","extras.t","DMsg(say following down staircase, '{The subj follower} {follows} {the leader} down {1}. ', theName);"
"DMsg","click","Click!","gadget.t","DMsg(click, 'Click!'); }"
"DMsg","okay pulled","Done|{I} {pull} {1}', gActionListStr","gadget.t","DMsg(okay pulled, 'Done|{I} {pull} {1}', gActionListStr); }"
"DMsg","okay pushed","Done|{I} {push} {1}', gActionListStr","gadget.t","DMsg(okay pushed, 'Done|{I} {push} {1}', gActionListStr); }"
"DMsg","hints disabled","<.parser>Hints are now disabled.<./parser>","hintsys.t","DMsg(hints disabled, '<.parser>Hints are now disabled.<./parser> ');"
"DMsg","sorry hints disabled","<.parser>Sorry, but hints have been disabled for this session, as you requested. If you&rsquo;ve changed your mind, you&rsquo;ll have to save your current position, exit the TADS interpreter, and start a new interpreter session.<./parser>","hintsys.t","DMsg(sorry hints disabled, '<.parser>Sorry, but hints have been disabled for this session, as you requested. If you&rsquo;ve changed your mind, you&rsquo;ll have to save your current position, exit the TADS interpreter, and start a new interpreter session.<./parser> ');"
"DMsg","currently no hints","<.parser>Sorry, no hints are currently available. Please check back later.<./parser>","hintsys.t","DMsg(currently no hints, '<.parser>Sorry, no hints are currently available. Please check back later.<./parser> ');"
"DMsg","hints done","<.parser>Done.<./parser>","hintsys.t","DMsg(hints done, '<.parser>Done.<./parser> ');"
"DMsg","showHintWarning","<.notification>Warning: Some people don&rsquo;t like built-in hints, since the temptation to ask for help prematurely can become overwhelming when hints are so close at hand. If you&rsquo;re worried that your willpower won&rsquo;t hold up, you can disable hints for the rest of this session by typing <<aHref('hints off', 'HINTS OFF","hintsys.t","DMsg(showHintWarning, '<.notification>Warning: Some people don&rsquo;t like built-in hints, since the temptation to ask for help prematurely can become overwhelming when hints are so close at hand. If you&rsquo;re worried that your willpower won&rsquo;t hold up, you can disable hints for the rest of this session by typing <<aHref('hints off', 'HINTS OFF')"
"DMsg","note with script","Comment recorded.","input.t","DMsg(note with script, 'Comment recorded. ');"
"DMsg","note without script warning","Comment NOT recorded.","input.t","DMsg(note without script warning, 'Comment NOT recorded. ');"
"DMsg","note without script","Comment NOT recorded.","input.t","DMsg(note without script, 'Comment NOT recorded. ');"
"DMsg","note main restore","Game restored.<.p>","misc.t","DMsg(note main restore, 'Game restored.<.p>');"
"DMsg","show finish msg","\b*** {1} ***\b\b', msg","misc.t","DMsg(show finish msg, '\b*** {1} ***\b\b', msg);"
"DMsg","invalid finish option","<q>{1}</q> was not one of the options.<.p>', resp","misc.t","DMsg(invalid finish option, '<q>{1}</q> was not one of the options.<.p>', resp);"
"DMsg","show version","{1} version {2}', nam, ver","modid.t","DMsg(show version, '{1} version {2}', nam, ver); "
"DMsg","token error","I don\'t understand the punctuation {1}', err.curChar_","parser.t","DMsg(token error, 'I don\'t understand the punctuation {1}', err.curChar_);"
"DMsg","empty command line","I beg your pardon?","parser.t","DMsg(empty command line, 'I beg your pardon?');"
"DMsg","not understood","I don\'t understand that command.","parser.t","DMsg(not understood, 'I don\'t understand that command.'); "
"DMsg","unknown word","I don\'t know the word ""{1}"".', badWord","parser.t","DMsg(unknown word, 'I don\'t know the word ""{1}"".', badWord);"
"DMsg","no oops now","Sorry, I\'m not sure what you\'re correcting.","parser.t","DMsg(no oops now, 'Sorry, I\'m not sure what you\'re correcting.');"
"DMsg","unmatched actor","{I} {see} no {1} {here}.', txt","parser.t","DMsg(unmatched actor, '{I} {see} no {1} {here}.', txt);"
"DMsg","unmatched noun","{I} {see} no {2} {here}.', cmd, stripArticle(txt)","parser.t","DMsg(unmatched noun, '{I} {see} no {2} {here}.', cmd, stripArticle(txt));"
"DMsg","no antecedent","I\'m not sure what you mean by ""{1}"".', np.prod.getText()","parser.t","DMsg(no antecedent, 'I\'m not sure what you mean by ""{1}"".', np.prod.getText());"
"DMsg","antecedent out of scope","{I} no longer {see} that {here}.', cmd","parser.t","DMsg(antecedent out of scope, '{I} no longer {see} that {here}.', cmd);"
"DMsg","not enough nouns","{I} {don\'t see} that many {2} {here}.', cmd, txt","parser.t","DMsg(not enough nouns, '{I} {don\'t see} that many {2} {here}.', cmd, txt); "
"DMsg","none in owners","No {2} {dummy}{appears} to have any {3}.', cmd, possQual.prod.getText(), txt","parser.t","DMsg(none in owners, 'No {2} {dummy}{appears} to have any {3}.', cmd, possQual.prod.getText(), txt);"
"DMsg","none in owner","{The subj obj} {doesn\'t appear} to have any {2}.', cmd, txt","parser.t","DMsg(none in owner, '{The subj obj} {doesn\'t appear} to have any {2}.', cmd, txt);"
"DMsg","none in locations","{I} {see} no {2} {3} any {4}.', cmd, txt, locQual.locType.prep, locQual.prod.getText()","parser.t","DMsg(none in locations, '{I} {see} no {2} {3} any {4}.', cmd, txt, locQual.locType.prep, locQual.prod.getText());"
"DMsg","none in location","{I} {see} no {2} {3} {the 4}.', cmd, txt, locQual.locType.prep, locQual.matches[1].obj","parser.t","DMsg(none in location, '{I} {see} no {2} {3} {the 4}.', cmd, txt, locQual.locType.prep, locQual.matches[1].obj);"
"DMsg","none with contents in list","{I} {see} no {2} of {3}.', cmd, txt, contQual.prod.getText()","parser.t","DMsg(none with contents in list, '{I} {see} no {2} of {3}.', cmd, txt, contQual.prod.getText());"
"DMsg","none with contents","{I} {see} no {2} of {3}.', cmd, txt, contQual.matches[1].obj","parser.t","DMsg(none with contents, '{I} {see} no {2} of {3}.', cmd, txt, contQual.matches[1].obj);"
"DMsg","be more specific","I don\'t know which ones you mean. Can you be more specific?","parser.t","DMsg(be more specific, 'I don\'t know which ones you mean. Can you be more specific?');"
"DMsg","ordinal out of range","Sorry, I don\'t see what you\'re referring to.","parser.t","DMsg(ordinal out of range, 'Sorry, I don\'t see what you\'re referring to.');"
"DMsg","container needs to be open","{The subj obj} {needs} to be open for that.","precond.t","DMsg(container needs to be open, '{The subj obj} {needs} to be open for that. ');"
"DMsg","object needs to be open","{The subj obj} {needs} to be open for that.","precond.t","DMsg(object needs to be open, '{The subj obj} {needs} to be open for that. ');"
"DMsg","obj needs to be closed","{The subj obj} {needs} to be closed for that.","precond.t","DMsg(obj needs to be closed, '{The subj obj} {needs} to be closed for that. ');"
"DMsg","need to hold","{I} {need} to be holding {the obj} to do that.","precond.t","DMsg(need to hold, '{I} {need} to be holding {the obj} to do that. ');"
"DMsg","cannot do that while wearing","{I} {can\'t} do that while {he actor}{\'m} wearing {the obj).","precond.t","DMsg(cannot do that while wearing, '{I} {can\'t} do that while {he actor}{\'m} wearing {the obj). ');"
"DMsg","cannot do that while attached","{I} {can\'t} do that while {the subj obj} is attached to {the att).","precond.t","DMsg(cannot do that while attached, '{I} {can\'t} do that while {the subj obj} is attached to {the att). ');"
"DMsg","cannot reach out","{I} {can\'t} reach {the obj} from {the loc}.","query.t","DMsg(cannot reach out, '{I} {can\'t} reach {the obj} from {the loc}. ');"
"DMsg","full score item points","\n <<totalPoints>> point<<totalPoints == 1 ? '' : 's'>> for","score.t","DMsg(full score item points, '\n <<totalPoints>> point<<totalPoints == 1 ? '' : 's'>> for ');"
"DMsg","full score prefix","Your score consists of:","score.t","DMsg(full score prefix, 'Your score consists of:');"
"DMsg","basic score change","''Your <<aHref('full score', 'score', 'Show full score')>> has just <<delta > 0 ? 'in' : 'de'>>creased by <<spellNumber(delta > 0 ? delta : -delta)>> point<<delta is in (1, -1) ? '' : 's'>>. ''","score.t","DMsg(basic score change, '''Your <<aHref('full score', 'score', 'Show full score')>> has just <<delta > 0 ? 'in' : 'de'>>creased by <<spellNumber(delta > 0 ? delta : -delta)>> point<<delta is in (1, -1) ? '' : 's'>>. ''');"
"DMsg","show score","In {1} turn<<turns == 1 ? '' : 's'>> you have scored {2} of a total {3} point<<maxPoints == 1 ? '' : 's'>>. ', turns, points, maxPoints","score.t","DMsg(show score, 'In {1} turn<<turns == 1 ? '' : 's'>> you have scored {2} of a total {3} point<<maxPoints == 1 ? '' : 's'>>. ', turns, points, maxPoints);"
"DMsg","show score no max","In {1} turn<<turns == 1 ? '' : 's'>> you have scored {2} point<<points == 1 ? '' : 's'>>. ', turns, points","score.t","DMsg(show score no max, 'In {1} turn<<turns == 1 ? '' : 's'>> you have scored {2} point<<points == 1 ? '' : 's'>>. ', turns, points);"
"DMsg","show score rank","This makes you {1}. ', msg","score.t","DMsg(show score rank, 'This makes you {1}. ', msg ); "
"DMsg","short notify status","NOTIFY <<isOn ? 'ON' : 'OFF'>>","score.t","DMsg(short notify status, 'NOTIFY <<isOn ? 'ON' : 'OFF'>>');"
"DMsg","remote contents prefix","<.p>\^{1} {i} {see} ', irName","senseRegion.t","DMsg(remote contents prefix, '<.p>\^{1} {i} {see} ', irName); "
"DMsg","remote contents suffix",".","senseRegion.t","DMsg(remote contents suffix, '. '); "
"DMsg","corrected spelling","(<i>{1}</i>)<br>', str","spelling.t","DMsg(corrected spelling, '(<i>{1}</i>)<br>', str);"
"DMsg","dark desc","It{dummy} {is} pitch black; {i} {can\'t} see a thing.","thing.t","DMsg(dark desc, 'It{dummy} {is} pitch black; {i} {can\'t} see a thing. '); "
"DMsg","list immediate container","{I} {am} {in loc}. <.p>","thing.t","DMsg(list immediate container, '{I} {am} {in loc}. <.p>');"
"DMsg","nothing special","{I} {see} nothing special about {1}. ', theName","thing.t","DMsg(nothing special, '{I} {see} nothing special about {1}. ', theName); "
"DMsg","too big","{The subj obj} {is} too big to fit {1} {2}. ', objInPrep, theName","thing.t","DMsg(too big, '{The subj obj} {is} too big to fit {1} {2}. ', objInPrep, theName);"
"DMsg","no room","There {dummy} {is} not enough room {1} {2} for {the obj). ', objInPrep, theName","thing.t","DMsg(no room, 'There {dummy} {is} not enough room {1} {2} for {the obj). ', objInPrep, theName); "
"DMsg","cannot command thing","There{dummy}\'s no point trying to give orders to {1}. ', aName","thing.t","DMsg(cannot command thing, 'There{dummy}\'s no point trying to give orders to {1}. ', aName);"
"DMsg","smell nothing","{I} {smell} nothing out of the ordinary.<.p>","thing.t","DMsg(smell nothing, '{I} {smell} nothing out of the ordinary.<.p>');"
"DMsg","hear nothing listen to","{I} hear{s/d} nothing out of the ordinary.<.p>","thing.t","DMsg(hear nothing listen to, '{I} hear{s/d} nothing out of the ordinary.<.p>');"
"DMsg","taste nothing","{I} taste{s/d} nothing unexpected.<.p>","thing.t","DMsg(taste nothing, '{I} taste{s/d} nothing unexpected.<.p>');"
"DMsg","feel nothing","{I} {feel} nothing unexpected.<.p>","thing.t","DMsg(feel nothing, '{I} {feel} nothing unexpected.<.p>');"
"DMsg","report take","Taken. | {I} {take} {1}. ', gActionListStr","thing.t","DMsg(report take, 'Taken. | {I} {take} {1}. ', gActionListStr);"
"DMsg","too big to carry","{The subj dobj} {is} too big for {me} to carry.","thing.t","DMsg(too big to carry, '{The subj dobj} {is} too big for {me} to carry. ');"
"DMsg","cannot carry any more","{I} {can\'t} carry any more than {i}{\'m} already carrying.","thing.t","DMsg(cannot carry any more, '{I} {can\'t} carry any more than {i}{\'m} already carrying. ');"
"DMsg","report drop","Dropped. |{I} {drop} {1}. ', gActionListStr","thing.t","DMsg(report drop, 'Dropped. |{I} {drop} {1}. ', gActionListStr); "
"DMsg","throw dir","{I} {throw} {the obj} {1}wards and {he obj} {lands}","thing.t","DMsg(throw dir, '{I} {throw} {the obj} {1}wards and {he obj} {lands}"
"DMsg","okay open","okayOpenMsg, gActionListStr","thing.t","DMsg(okay open, okayOpenMsg, gActionListStr);"
"DMsg","report close","Done |{I} {close} <<theName>>.","thing.t","DMsg(report close, 'Done |{I} {close} <<theName>>. ');"
"DMsg","find hidden","\^{1} {the dobj} {i} {find} {2}<<if findHiddenDest == gActor>>, which {i} {take}<<end>>. ', prep.prep, makeListStr(self.(prop))","thing.t","DMsg(find hidden, '\^{1} {the dobj} {i} {find} {2}<<if findHiddenDest == gActor>>, which {i} {take}<<end>>. ', prep.prep, makeListStr(self.(prop)));"
"DMsg","report put on","{I} {put} {1} on {the iobj}. ', gActionListStr","thing.t","DMsg(report put on, '{I} {put} {1} on {the iobj}. ', gActionListStr); "
"DMsg","report put in","{I} {put} {1} in {the iobj}. ', gActionListStr","thing.t","DMsg(report put in, '{I} {put} {1} in {the iobj}. ', gActionListStr); "
"DMsg","no room in","There {dummy}{isn\'t} enough room for {the dobj} in {the iobj}.","thing.t","DMsg(no room in, 'There {dummy}{isn\'t} enough room for {the dobj} in {the iobj}. '); "
"DMsg","report put under","{I} {put} {1} under {the iobj}. ', gActionListStr","thing.t","DMsg(report put under, '{I} {put} {1} under {the iobj}. ', gActionListStr);"
"DMsg","no room under","There {dummy}{isn\'t} enough room for {the dobj} under {the iobj}.","thing.t","DMsg(no room under, 'There {dummy}{isn\'t} enough room for {the dobj} under {the iobj}. '); "
"DMsg","report put behind","{I} {put} {1} behind {the iobj}. ', gActionListStr","thing.t","DMsg(report put behind, '{I} {put} {1} behind {the iobj}. ', gActionListStr);"
"DMsg","no room behind","There {dummy}{isn\'t} enough room for {the dobj} behind {the iobj}.","thing.t","DMsg(no room behind, 'There {dummy}{isn\'t} enough room for {the dobj} behind {the iobj}. '); "
"DMsg","report unlock","okayUnlockMsg, gActionListStr","thing.t","DMsg(report unlock, okayUnlockMsg, gActionListStr);"
"DMsg","report lock","okayLockMsg, gActionListStr","thing.t","DMsg(report lock, okayLockMsg, gActionListStr);"
"DMsg","report turn on","Done.|{I} {turn} on {the dobj}.","thing.t","DMsg(report turn on, 'Done.|{I} {turn} on {the dobj}. ');"
"DMsg","report turn off","Done.|{I} {turn} off {the dobj}.","thing.t","DMsg(report turn off, 'Done.|{I} {turn} off {the dobj}. ');"
"DMsg","report switch","Okay, you turn {1} {the dobj}. ', isOn ? 'on' : 'off","thing.t","DMsg(report switch, 'Okay, you turn {1} {the dobj}. ', isOn ? 'on' : 'off');"
"DMsg","okay wear","Okay, {i}{\'m} now wearing {1}. ', gActionListStr","thing.t","DMsg(okay wear, 'Okay, {i}{\'m} now wearing {1}. ', gActionListStr);"
"DMsg","okay doff","Okay, {I}{\'m} no longer wearing {1}. ', gActionListStr","thing.t","DMsg(okay doff, 'Okay, {I}{\'m} no longer wearing {1}. ', gActionListStr);"
"DMsg","throw","{The subj obj} {sails} through the air and {lands}","thing.t","DMsg(throw, '{The subj obj} {sails} through the air and {lands}"
"DMsg","okay get on","{I} {get} on {1}. ', gActionListStr","thing.t","DMsg(okay get on, '{I} {get} on {1}. ', gActionListStr);"
"DMsg","okay get in","{I} {get} in {1}. ', gActionListStr","thing.t","DMsg(okay get in, '{I} {get} in {1}. ', gActionListStr);"
"DMsg","okay move to","{I} {move} {1} {dummy} to {the iobj}. ', gActionListStr","thing.t","DMsg(okay move to, '{I} {move} {1} {dummy} to {the iobj}. ', gActionListStr);"
"DMsg","okay lit","Done.|{I} {light} {1}. ', gActionListStr","thing.t","DMsg(okay lit,'Done.|{I} {light} {1}. ', gActionListStr);"
"DMsg","extinguish","{I} {put} out {1}. ', gActionListStr","thing.t","DMsg(extinguish, '{I} {put} out {1}. ', gActionListStr);"
"DMsg","eat","{I} {eat} {1}. ', gActionListStr","thing.t","DMsg(eat, '{I} {eat} {1}. ', gActionListStr);"
"DMsg","okay clean","Cleaned|{I} {clean} {1}. ', gActionListStr","thing.t","DMsg(okay clean, 'Cleaned|{I} {clean} {1}. ', gActionListStr)"
"DMsg","throw at","{The subj obj} {strikes} {the iobj} and {lands}","thing.t","DMsg(throw at, '{The subj obj} {strikes} {the iobj} and {lands}"
"DMsg","okay turn to","Okay, {I} {turn} {1} to {2}', gActionListStr, gLiteral","thing.t","DMsg(okay turn to, 'Okay, {I} {turn} {1} to {2}', gActionListStr, gLiteral);"
"DMsg","okay set to","Okay, {i} {set} {1} to {2}', gActionListStr, gLiteral","thing.t","DMsg(okay set to, 'Okay, {i} {set} {1} to {2}', gActionListStr, gLiteral); "
"DMsg","route unknown","{I} {don\'t know} how to get there.","thing.t","DMsg(route unknown, '{I} {don\'t know} how to get there. ');"
"DMsg","destination unknown","{I} {don\'t know} how to reach {him dobj}.'","thing.t","DMsg(destination unknown, '{I} {don\'t know} how to reach {him dobj}.' );"
"DMsg","okay fasten","Done|{I} {fasten} {1}. ', gActionListStr","thing.t","DMsg(okay fasten, 'Done|{I} {fasten} {1}. ', gActionListStr);"
"DMsg","report kiss","Kissing {1} {dummy}{proves} remarkably unrewarding. ', gActionListStr","thing.t","DMsg(report kiss, 'Kissing {1} {dummy}{proves} remarkably unrewarding. ', gActionListStr); "
"DMsg","jump off","{I} {jump} off {1} and {land} on the ground', gActionListStr","thing.t","DMsg(jump off, '{I} {jump} off {1} and {land} on the ground', gActionListStr);"
"DMsg","push travel somewhere","{I} {push} {the dobj} {1} {the iobj}. ', via.prep","thing.t","DMsg(push travel somewhere, '{I} {push} {the dobj} {1} {the iobj}. ', via.prep); "
"DMsg","purloin","{I} suddenly {find} {myself} holding {1}. ', gActionListStr","thing.t","DMsg(purloin, '{I} suddenly {find} {myself} holding {1}. ', gActionListStr );"
"DMsg","gonear","{I} {am} translated in the twinkling of an eye...<.p>","thing.t","DMsg(gonear, '{I} {am} translated in the twinkling of an eye...<.p>');"
"DMsg","okay unlock with","okayUnlockWithMsg, gActionListStr","thing.t","DMsg(okay unlock with, okayUnlockWithMsg, gActionListStr);"
"DMsg","okay lock with","okayLockWithMsg, gActionListStr","thing.t","DMsg(okay lock with, okayLockWithMsg, gActionListStr);"
"DMsg","leads nowhere","Unfortunately {1} {dummy} {does}n\'t lead anywhere. ', theName","travel.t","DMsg(leads nowhere, 'Unfortunately {1} {dummy} {does}n\'t lead anywhere. ', theName);"
"DMsg","say departing through door","{The subj traveler} {leaves} through {1}. ', theName","travel.t","DMsg(say departing through door, '{The subj traveler} {leaves} through {1}. ', theName);"
"DMsg","say following through door","{The subj follower} {follows} {the leader} through {1}. ', theName","travel.t","DMsg(say following through door, '{The subj follower} {follows} {the leader} through {1}. ', theName);"
"DMsg","say departing vague","<.p>{The subj traveler} {leaves} the area.","travel.t","DMsg(say departing vague, '<.p>{The subj traveler} {leaves} the area. ');"
"DMsg","say departing dir","<.p>{The subj traveler} {goes} {1}. ' , depdir.departureName","travel.t","DMsg(say departing dir, '<.p>{The subj traveler} {goes} {1}. ' , depdir.departureName);"
"DMsg","say following vague","<.p>{The subj follower} {follows} {the leader}.","travel.t","DMsg(say following vague, '<.p>{The subj follower} {follows} {the leader}. ');"
"DMsg","say following dir","<.p>{The subj follower} {follows} {the leader} {1}. ', depdir.departureName","travel.t","DMsg(say following dir, '<.p>{The subj follower} {follows} {the leader} {1}. ', depdir.departureName);"
"BMsg","fail check","{I} {cannot} do that (but the author of this game failed to specify why).","action.t","BMsg(fail check, '{I} {cannot} do that (but the author of this game failed to specify why).')"
"BMsg","mention full score","To see your complete list of achievements, use the <<aHref('full score', 'FULL SCORE', 'show full score')>> command. ')","actions.t","BMsg(mention full score, 'To see your complete list of achievements, use the <<aHref('full score', 'FULL SCORE', 'show full score')>> command. '));"
"BMsg","explain continue","To continue the journey use the command <<aHref('Continue','CONTINUE','Continue')>> or C.","actions.t","BMsg(explain continue, 'To continue the journey use the command <<aHref('Continue','CONTINUE','Continue')>> or C. ');"
"BMsg","get scripting prompt","Please select a name for the new script file')","actions.t","BMsg(get scripting prompt, 'Please select a name for the new script file'))"
"BMsg","scripting okay web temp","<.parser>The transcript will be saved. Type <<aHref('script off', 'SCRIPT OFF', 'Turn off scripting')>> to discontinue scripting and download the saved transcript.<./parser>","actions.t","BMsg(scripting okay web temp, '<.parser>The transcript will be saved. Type <<aHref('script off', 'SCRIPT OFF', 'Turn off scripting')>> to discontinue scripting and download the saved transcript.<./parser> ')"
"BMsg","scripting okay","<.parser>The transcript will be saved to the file. Type <<aHref('script off', 'SCRIPT OFF', 'Turn off scripting')>> to discontinue scripting.<./parser>","actions.t","BMsg(scripting okay, '<.parser>The transcript will be saved to the file. Type <<aHref('script off', 'SCRIPT OFF', 'Turn off scripting')>> to discontinue scripting.<./parser> ')"
"BMsg","get recording prompt","Please select a name for the new command log file')","actions.t","BMsg(get recording prompt, 'Please select a name for the new command log file'))"
"BMsg","recording okay","<.parser>Commands will now be recorded. Type <<aHref('record off', 'RECORD OFF', 'Turn off recording')>> to stop recording commands.<.parser> ')","actions.t","BMsg(recording okay, '<.parser>Commands will now be recorded. Type <<aHref('record off', 'RECORD OFF', 'Turn off recording')>> to stop recording commands.<.parser> ')); "
"BMsg","get replay prompt","Please select the command log file to replay')","actions.t","BMsg(get replay prompt, 'Please select the command log file to replay'))"
"BMsg","get save prompt","Save game to file')","actions.t","BMsg(get save prompt, 'Save game to file'))"
"BMsg","get restore prompt","Restore game from file'), InFileOpen, FileTypeT3Save, 0","actions.t","BMsg(get restore prompt, 'Restore game from file'), InFileOpen, FileTypeT3Save, 0);"
"BMsg","cannot take actor","{The subj dobj} {won\'t} let {me}","actor.t","BMsg(cannot take actor, '{The subj dobj} {won\'t} let {me}"
"BMsg","no response","{The subj cobj} {does} not respond.","actor.t","BMsg(no response, '{The subj cobj} {does} not respond. ')"
"BMsg","refuse command","{I} {have} better things to do.","actor.t","BMsg(refuse command, '{I} {have} better things to do. ')"
"BMsg","follow actor","{I} {follow} {1}. ', theName","actor.t","BMsg(follow actor, '{I} {follow} {1}. ', theName)"
"BMsg","actor stays put","{I} {wait} in vain for {1} to go anywhere. ', theName","actor.t","BMsg(actor stays put, '{I} {wait} in vain for {1} to go anywhere. ', theName)"
"BMsg","cannot take from actor","{The subj this} {won\'t} let {me}","actor.t","BMsg(cannot take from actor, '{The subj this} {won\'t} let {me}"
"BMsg","should not kiss","That hardly {dummy} {seems}","actor.t","BMsg(should not kiss, 'That hardly {dummy} {seems}"
"BMsg","kiss response","{The subj dobj} {does}n\'t like that.","actor.t","BMsg(kiss response, '{The subj dobj} {does}n\'t like that. ')"
"BMsg","should not attack","That hardly {dummy} {seems}","actor.t","BMsg(should not attack, 'That hardly {dummy} {seems}"
"BMsg","wait to see","{I} {wait} to see where {he dobj}","actor.t","BMsg(wait to see, '{I} {wait} to see where {he dobj}"
"BMsg","dont know where gone","{I} {don\'t know} where {the subj dobj} {has} gone.","actor.t","BMsg(dont know where gone, '{I} {don\'t know} where {the subj dobj} {has} gone. ')"
"BMsg","cannot start from here","{I}{\'m} not where {i}","actor.t","BMsg(cannot start from here, '{I}{\'m} not where {i}"
"BMsg","cannot follow from here","{I} {can\'t} follow {him dobj} from {here}.","actor.t","BMsg(cannot follow from here, '{I} {can\'t} follow {him dobj} from {here}. ')"
"BMsg","say yes","say yes","actor.t","BMsg(say yes, 'say yes')"
"BMsg","say no","say no","actor.t","BMsg(say no, 'say no')"
"BMsg","say yes or no","say yes or no","actor.t","BMsg(say yes or no, 'say yes or no')"
"BMsg","say prefix","say","actor.t","BMsg(say prefix, 'say ')"
"BMsg","or list separator","; or","actor.t","BMsg(or list separator, '; or ')"
"BMsg","okay attach","{I} {attach} {1} to {the iobj}. ', gActionListStr","attachables.t","BMsg(okay attach, '{I} {attach} {1} to {the iobj}. ', gActionListStr) "
"BMsg","already attached","{The subj dobj} {is} already attached to {1}. ', attachedTo.theName","attachables.t","BMsg(already attached, '{The subj dobj} {is} already attached to {1}. ', attachedTo.theName)"
"BMsg","not attached","{The subj dobj} {is}n\'t attached to anything.","attachables.t","BMsg(not attached, '{The subj dobj} {is}n\'t attached to anything. ')"
"BMsg","okay detach","{I} detach {1}. ', gActionListStr","attachables.t","BMsg(okay detach, '{I} detach {1}. ', gActionListStr)"
"BMsg","okay detach from","{I} {detach} {1} from {the iobj}. ', gActionListStr","attachables.t","BMsg(okay detach from, '{I} {detach} {1} from {the iobj}. ', gActionListStr)"
"BMsg","cannot detach this","{The subj dobj} {cannot} be detached from {1}. ', location.theName","attachables.t","BMsg(cannot detach this, '{The subj dobj} {cannot} be detached from {1}. ', location.theName)"
"BMsg","cannot detach from this ","The {subj dobj}","attachables.t","BMsg(cannot detach from this , 'The {subj dobj}"
"BMsg","not attached to that","{The subj dobj} {isn\'t}","attachables.t","BMsg(not attached to that, '{The subj dobj} {isn\'t}"
"BMsg","nothing attached","There {dummy} {isn\'t} anything attached to {the iobj}.","attachables.t","BMsg(nothing attached, 'There {dummy} {isn\'t} anything attached to {the iobj}. ')"
"BMsg","cannot be attached","{The subj dobj} {cannot} be attached to {the iobj}.","attachables.t","BMsg(cannot be attached, '{The subj dobj} {cannot} be attached to {the iobj}. ')"
"BMsg","cannot take component","{I} {can\'t} have {that dobj}, {he dobj}{\'s} part of {1}. ', location.theName","attachables.t","BMsg(cannot take component, '{I} {can\'t} have {that dobj}, {he dobj}{\'s} part of {1}. ', location.theName) "
"BMsg","okay plug","{I} {plug} {1} into {the iobj}. ', gActionListStr","attachables.t","BMsg(okay plug, '{I} {plug} {1} into {the iobj}. ', gActionListStr) "
"BMsg","already plugged in","{The subj dobj} {is} already plugged into {1}. ', attachedTo.theName","attachables.t","BMsg(already plugged in, '{The subj dobj} {is} already plugged into {1}. ', attachedTo.theName)"
"BMsg","already plugged in vagaue","{The subj {dobj} {is}","attachables.t","BMsg(already plugged in vagaue, '{The subj {dobj} {is}"
"BMsg","cannot plug in any more","{I} {can\'t} plug any more into {the iobj}.","attachables.t","BMsg(cannot plug in any more, '{I} {can\'t} plug any more into {the iobj}. ')"
"BMsg","cannot be plugged in","{The subj dobj} {can\'t}","attachables.t","BMsg(cannot be plugged in, '{The subj dobj} {can\'t}"
"BMsg","okay unplug from","{I} {unplug} {1} from {the iobj}. ', gActionListStr","attachables.t","BMsg(okay unplug from, '{I} {unplug} {1} from {the iobj}. ', gActionListStr)"
"BMsg","not plugged in","{The subj dobj} {isn\'t} plugged into anything.","attachables.t","BMsg(not plugged in, '{The subj dobj} {isn\'t} plugged into anything. ') "
"BMsg","not plugged into that","{The subj dobj} {isn\'t}","attachables.t","BMsg(not plugged into that, '{The subj dobj} {isn\'t}"
"BMsg","okay unplug","{I} {unplug} {1}. ', gActionListStr","attachables.t","BMsg(okay unplug, '{I} {unplug} {1}. ', gActionListStr)"
"BMsg","exits","Exits:","exits.t","BMsg(exits, 'Exits:');"
"BMsg","only smell","{I} {can\'t} do that to a smell.","extras.t","BMsg(only smell, '{I} {can\'t} do that to a smell. ')"
"BMsg","only listen","{I} {can\'t} do that to a sound.","extras.t","BMsg(only listen, '{I} {can\'t} do that to a sound. ')"
"BMsg","distant","{The subj cobj} {is} too far away.","extras.t","BMsg(distant, '{The subj cobj} {is} too far away. ')"
"BMsg","too heavy","{The subj dobj} {is} too heavy to move.","extras.t","BMsg(too heavy, '{The subj dobj} {is} too heavy to move. ')"
"BMsg","cannot take immovable","{I} {cannot} take {the dobj).","extras.t","BMsg(cannot take immovable, '{I} {cannot} take {the dobj). ')"
"BMsg","traverse stairway up","up {1}', theName","extras.t","BMsg(traverse stairway up, 'up {1}', theName)"
"BMsg","traverse stairway down","down {1}', theName","extras.t","BMsg(traverse stairway down, 'down {1}', theName)"
"BMsg","already pulled","{The subj dobj} {is} already in the pulled position.","gadget.t","BMsg(already pulled, '{The subj dobj} {is} already in the pulled position. ')"
"BMsg","already pushed","{The subj dobj} {is} already in the pushed position.","gadget.t","BMsg(already pushed, '{The subj dobj} {is} already in the pushed position. ');"
"BMsg","invalid setting","That {dummy} {is} not a valid setting for {the dobj}.","gadget.t","BMsg(invalid setting, 'That {dummy} {is} not a valid setting for {the dobj}. ')"
"BMsg","okay set","{I} {set} {the dobj} to {1}. ', curSetting","gadget.t","BMsg(okay set, '{I} {set} {the dobj} to {1}. ', curSetting)"
"BMsg","already set","{The subj dobj} {is} already set to {1}. ', curSetting","gadget.t","BMsg(already set, '{The subj dobj} {is} already set to {1}. ', curSetting)"
"BMsg","finish death","YOU HAVE DIED","misc.t","BMsg(finish death, 'YOU HAVE DIED');"
"BMsg","finish victory","YOU HAVE WON","misc.t","BMsg(finish victory,'YOU HAVE WON');"
"BMsg","finish failure","YOU HAVE FAILED","misc.t","BMsg(finish failure, 'YOU HAVE FAILED');"
"BMsg","finish game over","GAME OVER","misc.t","BMsg(finish game over, 'GAME OVER');"
"BMsg","command results prefix","<.p0>","output.t","BMsg(command results prefix, '<.p0>');"
"BMsg","command interuption prefix","<.p>","output.t","BMsg(command interuption prefix, '<.p>');"
"BMsg","command results separator","<.p>","output.t","BMsg(command results separator, '<.p>');"
"BMsg","command results empty","Nothing obvious {dummy}{happens}.<.p>')","output.t","BMsg(command results empty, 'Nothing obvious {dummy}{happens}.<.p>'));"
"BMsg","command results suffix","')","output.t","BMsg(command results suffix, ''));"
"BMsg","cannot see obj","{I} {can\'t} see {1}. ', obj.theName)","precond.t","BMsg(cannot see obj, '{I} {can\'t} see {1}. ', obj.theName));"
"BMsg","too far away to hear obj","{The subj obj} {is} too far away to hear.","precond.t","BMsg(too far away to hear obj, '{The subj obj} {is} too far away to hear. ');"
"BMsg","cannot hear","{I} {can\'t} hear {1} ","precond.t","BMsg(cannot hear, '{I} {can\'t} hear {1} "
"BMsg","too far away","{The subj b} {is} too far away.","query.t","BMsg(too far away, '{The subj b} {is} too far away. ');"
"BMsg","cannot reach","{I} {can\'t} reach {the b} through {the obj}.","query.t","BMsg(cannot reach, '{I} {can\'t} reach {the b} through {the obj}. ');"
"BMsg","in room name","in {1}', theName","senseRegion.t","BMsg(in room name, 'in {1}', theName);"
"BMsg","too far away to see detail","{The subj dobj}","senseRegion.t","BMsg(too far away to see detail, '{The subj dobj}"
"BMsg","too far away to hear","{The subj dobj} {is} too far away to hear.","senseRegion.t","BMsg(too far away to hear, '{The subj dobj} {is} too far away to hear. ')"
"BMsg","too far away to read","{The subj dobj} {is} too far away to read.","senseRegion.t","BMsg(too far away to read, '{The subj dobj} {is} too far away to read. ')"
"BMsg","too far away to smell","{The subj dobj} {is} too far away to smell.","senseRegion.t","BMsg(too far away to smell, '{The subj dobj} {is} too far away to smell. ')"
"BMsg","command look around","look around'), nil, nil, AHREF_Plain","status.t","BMsg(command look around, 'look around'), nil, nil, AHREF_Plain)>>"";"
"BMsg","command full score","full score'), nil, nil, AHREF_Plain","status.t","BMsg(command full score, 'full score'), nil, nil, AHREF_Plain)>>"";"
"BMsg","dark name","In the dark","thing.t","BMsg(dark name, 'In the dark')"
"BMsg","not important","{The subj cobj} {is} not important.","thing.t","BMsg(not important, '{The subj cobj} {is} not important. ')"
"BMsg","too dark to see","It{dummy}{\'s} too dark to see anything.","thing.t","BMsg(too dark to see, 'It{dummy}{\'s} too dark to see anything. ')"
"BMsg","cannot smell","{I} {can\'t} smell {the dobj}.","thing.t","BMsg(cannot smell, '{I} {can\'t} smell {the dobj}. ')"
"BMsg","cannot taste","{The subj dobj} {is} not suitable for tasting.","thing.t","BMsg(cannot taste, '{The subj dobj} {is} not suitable for tasting. ')"
"BMsg","cannot feel","It{\'s} hardly a good idea to try feeling {the dobj}.","thing.t","BMsg(cannot feel, 'It{\'s} hardly a good idea to try feeling {the dobj}. ')"
"BMsg","cannot take","{The subj dobj} {is} fixed in place.","thing.t","BMsg(cannot take, '{The subj dobj} {is} fixed in place. ')"
"BMsg","already holding","{I}{\'m} already holding {the dobj}.","thing.t","BMsg(already holding, '{I}{\'m} already holding {the dobj}. ')"
"BMsg","cannot take my container","{I} {can\'t}","thing.t","BMsg(cannot take my container, '{I} {can\'t}"
"BMsg","cannot take self","{I} {can} hardly take {myself}.","thing.t","BMsg(cannot take self, '{I} {can} hardly take {myself}. ')"
"BMsg","reveal move under","Moving {1} {dummy} {reveals} {2}","thing.t","BMsg(reveal move under,'Moving {1} {dummy} {reveals} {2}"
"BMsg","reveal move behind","Moving {1} {dummy} {reveals} {2}","thing.t","BMsg(reveal move behind,'Moving {1} {dummy} {reveals} {2}"
"BMsg","cannot drop","{The subj dobj} {can\'t} be dropped.","thing.t","BMsg(cannot drop, '{The subj dobj} {can\'t} be dropped. ')"
"BMsg","not holding","{I} {amn\'t} holding {the dobj}.","thing.t","BMsg(not holding, '{I} {amn\'t} holding {the dobj}. ')"
"BMsg","part of me","{The subj dobj} {is} part of {me}.","thing.t","BMsg(part of me, '{The subj dobj} {is} part of {me}. ')"
"BMsg","cannot read","There {dummy} {is} nothing to read on {the dobj}.","thing.t","BMsg(cannot read, 'There {dummy} {is} nothing to read on {the dobj}. ')"
"BMsg","cannot follow","{The subj dobj} {isn\'t} going anywhere.","thing.t","BMsg(cannot follow, '{The subj dobj} {isn\'t} going anywhere. ')"
"BMsg","cannot follow self","{I} {can\'t} follow {myself}.","thing.t","BMsg(cannot follow self, '{I} {can\'t} follow {myself}. ')"
"BMsg","cannot attack","It{dummy}{\'s} best to avoid pointless violence.","thing.t","BMsg(cannot attack, 'It{dummy}{\'s} best to avoid pointless violence. ')"
"BMsg","futile attack","Attacking {1} prove{s/d} futile. ', gActionListStr","thing.t","BMsg(futile attack, 'Attacking {1} prove{s/d} futile. ', gActionListStr)"
"BMsg","cannot attack with self","{I} {can\'t}","thing.t","BMsg(cannot attack with self, '{I} {can\'t}"
"BMsg","cannot attack with","{I} {can\'t} attack anything with {that iobj}.","thing.t","BMsg(cannot attack with, '{I} {can\'t} attack anything with {that iobj}. ')"
"BMsg","cannot break","{The subj dobj} {is} not the sort of thing (i) {can} break.","thing.t","BMsg(cannot break, '{The subj dobj} {is} not the sort of thing (i) {can} break. ')"
"BMsg","dont break","{I} {see} no point in breaking {that dobj}.","thing.t","BMsg(dont break, '{I} {see} no point in breaking {that dobj}. ')"
"BMsg","cannot throw","{I} {can\'t} throw {the dobj} anywhere.","thing.t","BMsg(cannot throw, '{I} {can\'t} throw {the dobj} anywhere. ')"
"BMsg","cannot open","{The subj dobj} {is} not something {i}","thing.t","BMsg(cannot open, '{The subj dobj} {is} not something {i}"
"BMsg","already open","{The subj dobj} {is} already open.","thing.t","BMsg(already open, '{The subj dobj} {is} already open. ')"
"BMsg","locked","{The subj dobj} {is} locked.","thing.t","BMsg(locked, '{The subj dobj} {is} locked. ')"
"BMsg","not closeable","{The subj dobj} {is} not something that {can} be closed.","thing.t","BMsg(not closeable, '{The subj dobj} {is} not something that {can} be closed. ')"
"BMsg","already closed","{The subj dobj} {isn\'t} open.","thing.t","BMsg(already closed,'{The subj dobj} {isn\'t} open. ')"
"BMsg","cannot turn","{The subj dobj} {can\'t} be turned.","thing.t","BMsg(cannot turn, '{The subj dobj} {can\'t} be turned. ')"
"BMsg","turn useless","Turning {1} {dummy} {achieves}","thing.t","BMsg(turn useless, 'Turning {1} {dummy} {achieves}"
"BMsg","cannot turn with","{I} {can\'t} turn anything with {that iobj}.","thing.t","BMsg(cannot turn with, '{I} {can\'t} turn anything with {that iobj}. ')"
"BMsg","turn self","{I} {cannot} turn anything with itself.","thing.t","BMsg(turn self, '{I} {cannot} turn anything with itself. ')"
"BMsg","cannot cut","{I} {can\'t} cut {the dobj}.","thing.t","BMsg(cannot cut, '{I} {can\'t} cut {the dobj}. ')"
"BMsg","cannot cut with","{I} {can\'t} cut anything with {that iobj}.","thing.t","BMsg(cannot cut with, '{I} {can\'t} cut anything with {that iobj}. ')"
"BMsg","cannot cut with self","{I} {cannot} cut anything with itself.","thing.t","BMsg(cannot cut with self, '{I} {cannot} cut anything with itself. ')"
"BMsg","look in","{I} {see} nothing interesting in {the dobj}.","thing.t","BMsg(look in, '{I} {see} nothing interesting in {the dobj}. ')"
"BMsg","cannot look under","{I} {can\'t} look under {that dobj}.","thing.t","BMsg(cannot look under, '{I} {can\'t} look under {that dobj}. ')"
"BMsg","look under","{I} {find} nothing of interest under {the dobj}.","thing.t","BMsg(look under, '{I} {find} nothing of interest under {the dobj}. ')"
"BMsg","cannot look behind","{I} {can\'t} look behind {that dobj}.","thing.t","BMsg(cannot look behind, '{I} {can\'t} look behind {that dobj}. ')"
"BMsg","look behind","{I} {find} nothing behind {the dobj}.","thing.t","BMsg(look behind, '{I} {find} nothing behind {the dobj}. ')"
"BMsg","cannot look through","{I} {can\'t} look through {that dobj}.","thing.t","BMsg(cannot look through, '{I} {can\'t} look through {that dobj}. ')"
"BMsg","look through","{I} {see} nothing through {the dobj}.","thing.t","BMsg(look through, '{I} {see} nothing through {the dobj}. ')"
"BMsg","cannot go through","{I} {can\'t} go through {that dobj}.","thing.t","BMsg(cannot go through,'{I} {can\'t} go through {that dobj}. ')"
"BMsg","cannot push","{There}{\'s} no point trying to push {that dobj}.","thing.t","BMsg(cannot push, '{There}{\'s} no point trying to push {that dobj}. ')"
"BMsg","push no effect","Pushing {1} {dummy} {has} no effect. ', gActionListStr","thing.t","BMsg(push no effect, 'Pushing {1} {dummy} {has} no effect. ', gActionListStr)"
"BMsg","cannot pull","{There}{\'s} no point trying to pull {that dobj}.","thing.t","BMsg(cannot pull, '{There}{\'s} no point trying to pull {that dobj}. ')"
"BMsg","pull no effect","Pulling {1} {dummy} {has} no effect. ', gActionListStr","thing.t","BMsg(pull no effect, 'Pulling {1} {dummy} {has} no effect. ', gActionListStr)"
"BMsg","already in","{The subj dobj} {is} already {in iobj}.","thing.t","BMsg(already in, '{The subj dobj} {is} already {in iobj}. ')"
"BMsg","circularly in","{I} {can\'t} put {the dobj} {in iobj}","thing.t","BMsg(circularly in, '{I} {can\'t} put {the dobj} {in iobj}"
"BMsg","cannot put in self","{I} {can\'t} put anything {1} itself. ', gIobj.objInPrep","thing.t","BMsg(cannot put in self, '{I} {can\'t} put anything {1} itself. ', gIobj.objInPrep)"
"BMsg","cannot put on","{I} {can\'t} put anything on {the iobj}. '","thing.t","BMsg(cannot put on,'{I} {can\'t} put anything on {the iobj}. ' )"
"BMsg","cannot put in","{I} {can\'t} put anything in {the iobj}.","thing.t","BMsg(cannot put in, '{I} {can\'t} put anything in {the iobj}. ')"
"BMsg","cannot put under","{I} {cannot} put anything under {the iobj}. '","thing.t","BMsg(cannot put under, '{I} {cannot} put anything under {the iobj}. ' )"
"BMsg","cannot put behind","{I} {cannot} put anything behind {the iobj}.","thing.t","BMsg(cannot put behind, '{I} {cannot} put anything behind {the iobj}. ')"
"BMsg","not lockable","{The subj dobj} {isn\'t} lockable.","thing.t","BMsg(not lockable, '{The subj dobj} {isn\'t} lockable. ')"
"BMsg","key not needed","{I} {don\'t need} a key to lock and unlock {the dobj}.","thing.t","BMsg(key not needed,'{I} {don\'t need} a key to lock and unlock {the dobj}. ')"
"BMsg","indirect lockable","{The dobj} {appears} to use some other kind of locking mechanism.","thing.t","BMsg(indirect lockable,'{The dobj} {appears} to use some other kind of locking mechanism. ')"
"BMsg","not locked","{The subj dobj} {isn\'t} locked.","thing.t","BMsg(not locked, '{The subj dobj} {isn\'t} locked. ')"
"BMsg","cannot unlock with","{I} {can\'t} unlock anything with {that dobj}. '","thing.t","BMsg(cannot unlock with, '{I} {can\'t} unlock anything with {that dobj}. ' )"
"BMsg","cannot unlock with self","{I} {can\'t} unlock anything with itself. '","thing.t","BMsg(cannot unlock with self, '{I} {can\'t} unlock anything with itself. ' )"
"BMsg","already locked","{The subj dobj} {is} already locked.","thing.t","BMsg(already locked, '{The subj dobj} {is} already locked. ')"
"BMsg","cannot lock with","{I} {can\'t} lock anything with {that dobj}. '","thing.t","BMsg(cannot lock with, '{I} {can\'t} lock anything with {that dobj}. ' )"
"BMsg","cannot lock with self","{I} {can\'t} lock anything with itself. '","thing.t","BMsg(cannot lock with self, '{I} {can\'t} lock anything with itself. ' )"
"BMsg","with key","(with {1})\n', useKey_.theName","thing.t","BMsg(with key, '(with {1})\n', useKey_.theName)"
"BMsg","key doesnt work","Unfortunately {1} {dummy}","thing.t","BMsg(key doesnt work, 'Unfortunately {1} {dummy}"
"BMsg","not switchable","{The subj dobj} {can\'t} be switched on and off.","thing.t","BMsg(not switchable, '{The subj dobj} {can\'t} be switched on and off. ')"
"BMsg","already switched on","{The subj dobj} {is} already switched on.","thing.t","BMsg(already switched on, '{The subj dobj} {is} already switched on. ')"
"BMsg","not switched on","{The subj dobj} {isn\'t} switched on.","thing.t","BMsg(not switched on, '{The subj dobj} {isn\'t} switched on. ')"
"BMsg","cannot flip","{I} {can\'t} usefully flip {the dobj}.","thing.t","BMsg(cannot flip, '{I} {can\'t} usefully flip {the dobj}. ')"
"BMsg","cannot burn","{I} {cannot} burn {the dobj}.","thing.t","BMsg(cannot burn, '{I} {cannot} burn {the dobj}. ')"
"BMsg","cannot burn with","{I} {can\'t} burn {the dobj}","thing.t","BMsg(cannot burn with, '{I} {can\'t} burn {the dobj}"
"BMsg","cannot wear","{The subj dobj} {can\'t} be worn.","thing.t","BMsg(cannot wear, '{The subj dobj} {can\'t} be worn. ')"
"BMsg","already worn","{I}{\'m} already wearing {the dobj}.","thing.t","BMsg(already worn, '{I}{\'m} already wearing {the dobj}. ')"
"BMsg","not worn","{I}{\'m} not wearing {the dobj}.","thing.t","BMsg(not worn, '{I}{\'m} not wearing {the dobj}. ')"
"BMsg","cannot climb","{The subj dobj} {is} not something {i}","thing.t","BMsg(cannot climb,'{The subj dobj} {is} not something {i}"
"BMsg","cannot climb down","{The subj dobj} {is} not something {i} {can} climb down.","thing.t","BMsg(cannot climb down, '{The subj dobj} {is} not something {i} {can} climb down. ')"
"BMsg","cannot board","{The subj dobj} {is} not something {i}","thing.t","BMsg(cannot board, '{The subj dobj} {is} not something {i}"
"BMsg","already on","{I}{\'m} already {in dobj}.","thing.t","BMsg(already on, '{I}{\'m} already {in dobj}. ')"
"BMsg","cannot board carried","{I} {can\'t} get on {the dobj} while {i}{\'m} carrying {him dobj}.","thing.t","BMsg(cannot board carried, '{I} {can\'t} get on {the dobj} while {i}{\'m} carrying {him dobj}. ')"
"BMsg","cannot stand on","{The subj dobj} {isn\'t}","thing.t","BMsg(cannot stand on, '{The subj dobj} {isn\'t}"
"BMsg","cannot sit on","{The subj dobj} {isn\'t}","thing.t","BMsg(cannot sit on, '{The subj dobj} {isn\'t}"
"BMsg","cannot lie on","{The subj dobj} {isn\'t}","thing.t","BMsg(cannot lie on, '{The subj dobj} {isn\'t}"
"BMsg","cannot enter","{The subj dobj} {is} not something {i}","thing.t","BMsg(cannot enter, '{The subj dobj} {is} not something {i}"
"BMsg","actor already in","{I}{\'m} already {in dobj}.","thing.t","BMsg(actor already in, '{I}{\'m} already {in dobj}. ')"
"BMsg","cannot enter carried","{I} {can\'t} get in {the dobj} while {i}{\'m} carrying {him dobj}.","thing.t","BMsg(cannot enter carried, '{I} {can\'t} get in {the dobj} while {i}{\'m} carrying {him dobj}. ')"
"BMsg","okay get outof","Okay, {i} {get} {outof dobj}.","thing.t","BMsg(okay get outof, 'Okay, {i} {get} {outof dobj}. ')"
"BMsg","actor not in","{I}{\'m} not in {the dobj}.","thing.t","BMsg(actor not in,'{I}{\'m} not in {the dobj}. ')"
"BMsg","actor not on","{I}{\'m} not on {the dobj}.","thing.t","BMsg(actor not on,'{I}{\'m} not on {the dobj}. ')"
"BMsg","cannot remove","{The subj dobj} {cannot} be removed.","thing.t","BMsg(cannot remove, '{The subj dobj} {cannot} be removed. ')"
"BMsg","move no effect","Moving {1} {dummy} {has} no effect. ', gActionListStr","thing.t","BMsg(move no effect, 'Moving {1} {dummy} {has} no effect. ', gActionListStr)"
"BMsg","cannot move with","{I} {can\'t} move {the dobj}","thing.t","BMsg(cannot move with, '{I} {can\'t} move {the dobj}"
"BMsg","cannot move with self","{The subj dobj}","thing.t","BMsg(cannot move with self, '{The subj dobj}"
"BMsg","cannot move to","{The subj dobj} {can\'t} be moved to {the iobj}.","thing.t","BMsg(cannot move to, '{The subj dobj} {can\'t} be moved to {the iobj}. ')"
"BMsg","cannot move to self","{The subj dobj} {can\'t}","thing.t","BMsg(cannot move to self, '{The subj dobj} {can\'t}"
"BMsg","already moved to","{The subj dobj} {has} already been moved to {the iobj}.","thing.t","BMsg(already moved to, '{The subj dobj} {has} already been moved to {the iobj}. ')"
"BMsg","cannot light","{The subj dobj} {is} not something {i} {can} light.","thing.t","BMsg(cannot light, '{The subj dobj} {is} not something {i} {can} light. ')"
"BMsg","already lit","{The subj dobj} {is} already lit.","thing.t","BMsg(already lit, '{The subj dobj} {is} already lit. ')"
"BMsg","not lit","{The subj dobj} {isn\'t} lit.","thing.t","BMsg(not lit, '{The subj dobj} {isn\'t} lit. ')"
"BMsg","cannot extinguish","{The dobj} {cannot} be extinguished.","thing.t","BMsg(cannot extinguish, '{The dobj} {cannot} be extinguished. ')"
"BMsg","cannot eat","{The subj dobj} {is} plainly inedible.","thing.t","BMsg(cannot eat, '{The subj dobj} {is} plainly inedible. ')"
"BMsg","not potable","{I} {can\'t} drink {1}. ', fluidName","thing.t","BMsg(not potable, '{I} {can\'t} drink {1}. ', fluidName)"
"BMsg","cannot clean","{The subj dobj} {is} not something {i}","thing.t","BMsg(cannot clean, '{The subj dobj} {is} not something {i}"
"BMsg","already clean","{The subj dobj} {is} already quite clean enough.","thing.t","BMsg(already clean, '{The subj dobj} {is} already quite clean enough. ')"
"BMsg","no clean","{The subj dobj} {doesn\'t need} cleaning.","thing.t","BMsg(no clean, '{The subj dobj} {doesn\'t need} cleaning. ')"
"BMsg","dont need cleaning obj","{I} {don\'t need}","thing.t","BMsg(dont need cleaning obj, '{I} {don\'t need}"
"BMsg","cannot clean with","{I} {can\'t} clean {the dobj}","thing.t","BMsg(cannot clean with, '{I} {can\'t} clean {the dobj}"
"BMsg","cannot dig","{I} {can\'t} dig there.","thing.t","BMsg(cannot dig, '{I} {can\'t} dig there. ')"
"BMsg","cannot dig with","{I} {can\'t} dig anything with {that iobj}.","thing.t","BMsg(cannot dig with, '{I} {can\'t} dig anything with {that iobj}. ')"
"BMsg","cannot dig with self","{I} {can\'t} dig {the dobj} with {itself dobj}.","thing.t","BMsg(cannot dig with self, '{I} {can\'t} dig {the dobj} with {itself dobj}. ')"
"BMsg","not inside","{The dobj} {is}n\'t {in iobj}.","thing.t","BMsg(not inside, '{The dobj} {is}n\'t {in iobj}. ')"
"BMsg","cannot take from self","{I} {can\'t} take {the subj dobj} from {the dobj}.","thing.t","BMsg(cannot take from self, '{I} {can\'t} take {the subj dobj} from {the dobj}. ')"
"BMsg","cannot throw at","{I} {can\'t} throw anything at {the iobj}.","thing.t","BMsg(cannot throw at, '{I} {can\'t} throw anything at {the iobj}. ')"
"BMsg","cannot throw at self","{The subj dobj} {can\'t}","thing.t","BMsg(cannot throw at self, '{The subj dobj} {can\'t}"
"BMsg","cannot throw to","{The subj dobj} {can\'t} catch anything.","thing.t","BMsg(cannot throw to, '{The subj dobj} {can\'t} catch anything. ')"
"BMsg","cannot throw to self","{The subj dobj} {can\'t}","thing.t","BMsg(cannot throw to self, '{The subj dobj} {can\'t}"
"BMsg","throw falls short","{The subj dobj} {lands} far short of {the iobj}.","thing.t","BMsg(throw falls short, '{The subj dobj} {lands} far short of {the iobj}. ')"
"BMsg","cannot turn to","{I} {cannot} turn {that dobj} to anything.","thing.t","BMsg(cannot turn to, '{I} {cannot} turn {that dobj} to anything. ')"
"BMsg","cannot set to","{I} {cannot} set {that dobj} to anything.","thing.t","BMsg(cannot set to, '{I} {cannot} set {that dobj} to anything. ')"
"BMsg","already there","{I}{\'m} already there.","thing.t","BMsg(already there, '{I}{\'m} already there. ')"
"BMsg","already present","{The subj dobj} {is} right {here}.","thing.t","BMsg(already present, '{The subj dobj} {is} right {here}. ') "
"BMsg","cannot attach","{I} {cannot} attach {the dobj} to anything.","thing.t","BMsg(cannot attach, '{I} {cannot} attach {the dobj} to anything. ')"
"BMsg","cannot attach to","{I} {cannot} attach anything to {the iobj}.","thing.t","BMsg(cannot attach to, '{I} {cannot} attach anything to {the iobj}. ')"
"BMsg","cannot attach to self","{I} {cannot} attach {the iobj} to {itself iobj}.","thing.t","BMsg(cannot attach to self, '{I} {cannot} attach {the iobj} to {itself iobj}. ')"
"BMsg","cannot detach","There{dummy} {is}n\'t anything from which {the subj dobj} could be detached.","thing.t","BMsg(cannot detach, 'There{dummy} {is}n\'t anything from which {the subj dobj} could be detached. ')"
"BMsg","cannot detach from","There{dummy} {is}n\'t anything that could be detached from {the iobj}.","thing.t","BMsg(cannot detach from, 'There{dummy} {is}n\'t anything that could be detached from {the iobj}. ')"
"BMsg","cannot detach from self","{The subj dobj}","thing.t","BMsg(cannot detach from self, '{The subj dobj}"
"BMsg","cannot fasten","{That subj dobj}{\'s} not something {i} {can} fasten.","thing.t","BMsg(cannot fasten, '{That subj dobj}{\'s} not something {i} {can} fasten. ')"
"BMsg","already fastened","{The subj dobj} {is} already fastened.","thing.t","BMsg(already fastened, '{The subj dobj} {is} already fastened. ')"
"BMsg","cannot fasten to","{I} {can\'t} fasten anything to {that iobj}.","thing.t","BMsg(cannot fasten to, '{I} {can\'t} fasten anything to {that iobj}. ')"
"BMsg","cannot fasten to self","{The subj iobj}","thing.t","BMsg(cannot fasten to self, '{The subj iobj}"
"BMsg","cannot unfasten","{The subj dobj} {cannot} be unfastened.","thing.t","BMsg(cannot unfasten, '{The subj dobj} {cannot} be unfastened. ')"
"BMsg","cannot unfasten from","{I} {can\'t} unfasten anything from {that iobj}.","thing.t","BMsg(cannot unfasten from, '{I} {can\'t} unfasten anything from {that iobj}. ')"
"BMsg","cannot unfasten from self","{I} {can\'t}","thing.t","BMsg(cannot unfasten from self, '{I} {can\'t}"
"BMsg","not fastened","{The subj dobj} {isn\'t} fastened.","thing.t","BMsg(not fastened, '{The subj dobj} {isn\'t} fastened. ')"
"BMsg","cannot plug","{The subj dobj} {can\'t} be plugged into anything.","thing.t","BMsg(cannot plug, '{The subj dobj} {can\'t} be plugged into anything. ')"
"BMsg","cannot plug into self","{I} {can\'t} plug {the dobj} into {itself dobj}.","thing.t","BMsg(cannot plug into self, '{I} {can\'t} plug {the dobj} into {itself dobj}. ')"
"BMsg","cannot plug into","{I} {can\'t} plug anything into {the iobj}.","thing.t","BMsg(cannot plug into, '{I} {can\'t} plug anything into {the iobj}. ')"
"BMsg","cannot unplug","{The subj dobj} {can\'t} be unplugged.","thing.t","BMsg(cannot unplug, '{The subj dobj} {can\'t} be unplugged. ')"
"BMsg","cannot unplug from self","{I} {can\'t} unplug {the dobj} from {itself dobj}.","thing.t","BMsg(cannot unplug from self, '{I} {can\'t} unplug {the dobj} from {itself dobj}. ')"
"BMsg","cannot unplug from","{I} {can\'t} unplug anything from {the iobj}.","thing.t","BMsg(cannot unplug from, '{I} {can\'t} unplug anything from {the iobj}. ')"
"BMsg","cannot kiss","{I} really {can\'t} kiss {that dobj}.","thing.t","BMsg(cannot kiss, '{I} really {can\'t} kiss {that dobj}. ')"
"BMsg","cannot jump off","{I}{\'m} not on {the dobj}.","thing.t","BMsg(cannot jump off, '{I}{\'m} not on {the dobj}. ')"
"BMsg","pointless to jump over","It {dummy}{is}","thing.t","BMsg(pointless to jump over, 'It {dummy}{is}"
"BMsg","cannot set","{The subj dobj} {is} not something {i}","thing.t","BMsg(cannot set, '{The subj dobj} {is} not something {i}"
"BMsg","cannot type on","{I} {can\'t} type anything on {the dobj}.","thing.t","BMsg(cannot type on, '{I} {can\'t} type anything on {the dobj}. ')"
"BMsg","cannot enter on","{I} {can\'t} enter anything on {the dobj}.","thing.t","BMsg(cannot enter on, '{I} {can\'t} enter anything on {the dobj}. ')"
"BMsg","cannot write on","{I} {can\'t} write anything on {the dobj}.","thing.t","BMsg(cannot write on, '{I} {can\'t} write anything on {the dobj}. ')"
"BMsg","cannot consult","{The subj dobj} {is} not a provider of information.","thing.t","BMsg(cannot consult, '{The subj dobj} {is} not a provider of information. ')"
"BMsg","cannot pour","{I} {can\'t} pour {1} anywhere. ', fluidName","thing.t","BMsg(cannot pour, '{I} {can\'t} pour {1} anywhere. ', fluidName)"
"BMsg","cannot pour on self","{I} {can\'t} pour {the dobj} onto {itself dobj}.","thing.t","BMsg(cannot pour on self, '{I} {can\'t} pour {the dobj} onto {itself dobj}. ')"
"BMsg","cannot pour in self","{I} {can\'t} pour {the dobj} into {itself dobj}.","thing.t","BMsg(cannot pour in self, '{I} {can\'t} pour {the dobj} into {itself dobj}. ')"
"BMsg","cannot pour into","{I} {can\'t} pour {1","thing.t","BMsg(cannot pour into, '{I} {can\'t} pour {1)"
"BMsg","cannot pour onto","{I} {can\'t} pour {1}","thing.t","BMsg(cannot pour onto, '{I} {can\'t} pour {1}"
"BMsg","should not pour into","It{dummy}{\'s} better not to pour {1} into {the iobj}. ', gDobj.fluidName","thing.t","BMsg(should not pour into, 'It{dummy}{\'s} better not to pour {1} into {the iobj}. ', gDobj.fluidName)"
"BMsg","should not pour onto","It{dummy}{\'s} better not to pour {1} onto {the iobj}. ', gDobj.fluidName","thing.t","BMsg(should not pour onto, 'It{dummy}{\'s} better not to pour {1} onto {the iobj}. ', gDobj.fluidName) "
"BMsg","cannot screw","{I} {can\'t} screw {the dobj}.","thing.t","BMsg(cannot screw, '{I} {can\'t} screw {the dobj}. ')"
"BMsg","cannot screw with","{I} {can\'t} screw anything with {that iobj}.","thing.t","BMsg(cannot screw with, '{I} {can\'t} screw anything with {that iobj}. ') "
"BMsg","cannot screw with self","{I} {can\'t} screw {the iobj} with {itself iobj}.","thing.t","BMsg(cannot screw with self, '{I} {can\'t} screw {the iobj} with {itself iobj}. ')"
"BMsg","cannot unscrew","{I} {can\'t} unscrew {the dobj}.","thing.t","BMsg(cannot unscrew, '{I} {can\'t} unscrew {the dobj}. ')"
"BMsg","cannot unscrew with","{I} {can\'t} unscrew anything with {that iobj}.","thing.t","BMsg(cannot unscrew with, '{I} {can\'t} unscrew anything with {that iobj}. ')"
"BMsg","cannot unscrew with self","{I} {can\'t}","thing.t","BMsg(cannot unscrew with self, '{I} {can\'t}"
"BMsg","cannot push own container","{I} {can\'t}","thing.t","BMsg(cannot push own container, '{I} {can\'t}"
"BMsg","cannot push via self","{I} {can\'t} push {the dobj} {1} {itself dobj}. ', viaMode.prep","thing.t","BMsg(cannot push via self, '{I} {can\'t} push {the dobj} {1} {itself dobj}. ', viaMode.prep)"
"BMsg","cannot push travel","There{dummy}{\'s} no point trying to push {that dobj} anywhere.","thing.t","BMsg(cannot push travel, 'There{dummy}{\'s} no point trying to push {that dobj} anywhere. ');"
"BMsg","cannot push through","{I} {can\'t} {push}","thing.t","BMsg(cannot push through, '{I} {can\'t} {push}"
"BMsg","okay push into","{I} {push} {the dobj} into {the iobj}.","thing.t","BMsg(okay push into, '{I} {push} {the dobj} into {the iobj}. ')"
"BMsg","cannot push into","{I} {can\'t} {push}","thing.t","BMsg(cannot push into, '{I} {can\'t} {push}"
"BMsg","okay push out of","{I} {push} {the dobj} {outof iobj}.","thing.t","BMsg(okay push out of, '{I} {push} {the dobj} {outof iobj}. ')"
"BMsg","cannot push up","{I} {can\'t} {push}","thing.t","BMsg(cannot push up, '{I} {can\'t} {push}"
"BMsg","cannot push down","{I} {can\'t} {push}","thing.t","BMsg(cannot push down, '{I} {can\'t} {push}"
"BMsg","cannot talk","There{dummy}{\'s} no point trying to talk to {the cobj}.","thing.t","BMsg(cannot talk, 'There{dummy}{\'s} no point trying to talk to {the cobj}. ')"
"BMsg","already has","{The subj iobj} already {has}","thing.t","BMsg(already has, '{The subj iobj} already {has}"
"BMsg","cannot give to","{I} {can\'t} give anything to {that iobj}.","thing.t","BMsg(cannot give to, '{I} {can\'t} give anything to {that iobj}. ')"
"BMsg","cannot show to","{I} {can\'t} show anything to {that iobj}.","thing.t","BMsg(cannot show to, '{I} {can\'t} show anything to {that iobj}. ')"
"BMsg","not talking to anyone","{I}{\'m} not talking to anyone.","thing.t","BMsg(not talking to anyone, '{I}{\'m} not talking to anyone. ')"
"BMsg","no longer talking to anyone","{I}{\'m} no longer talking to anyone.","thing.t","BMsg(no longer talking to anyone, '{I}{\'m} no longer talking to anyone. ')"
"BMsg","cannot purloin self","{I} {can\'t} purloin {myself}.","thing.t","BMsg(cannot purloin self, '{I} {can\'t} purloin {myself}. ')"
"BMsg","cannot purloin room","{I} {can\'t} purloin a room.","thing.t","BMsg(cannot purloin room, '{I} {can\'t} purloin a room. ')"
"BMsg","cannot purloin container","{I} {can\'t}","thing.t","BMsg(cannot purloin container, '{I} {can\'t}"
"BMsg","cannot go there","{I} {can\'t} go there right {now}.","thing.t","BMsg(cannot go there, '{I} {can\'t} go there right {now}. ')"
"BMsg","no thoughts","{I} {have} no thoughts on that particular topic.","thoughts.t","BMsg(no thoughts, '{I} {have} no thoughts on that particular topic.')"
"BMsg","no matched topic","{The subj dobj} {has} nothing to say on that.","topicEntry.t","BMsg(no matched topic, '{The subj dobj} {has} nothing to say on that. ')"
"BMsg","cannot go","{I} {can\'t} go that way. '","travel.t","BMsg(cannot go, '{I} {can\'t} go that way. ' )"
"BMsg","cannot go in dark","It{dummy}{\'s} too dark to see where {i}{\'m} going.","travel.t","BMsg(cannot go in dark, 'It{dummy}{\'s} too dark to see where {i}{\'m} going. ')"
"BMsg","actor nested location name"," (<<actor.location.objInPrep>> <<actor.location.theName>>)","travel.t","BMsg(actor nested location name, ' (<<actor.location.objInPrep>> <<actor.location.theName>>)');"
"BMsg","cannot go through closed door","{The subj obj} {is} in the way.","travel.t","BMsg(cannot go through closed door, '{The subj obj} {is} in the way. ')"
"BMsg","traverse door","through {1}', theName","travel.t","BMsg(traverse door, 'through {1}', theName)"
"BMsg","traverse connector","{1}', depDir.departureName","travel.t","BMsg(traverse connector, '{1}', depDir.departureName);"
"BMsg","north","north","travel.t","BMsg(north, 'north')"
"BMsg","depart north","to the north","travel.t","BMsg(depart north, 'to the north')"
"BMsg","east","east","travel.t","BMsg(east, 'east')"
"BMsg","depart east","to the east","travel.t","BMsg(depart east, 'to the east')"
"BMsg","south","south","travel.t","BMsg(south, 'south')"
"BMsg","depart south","to the south","travel.t","BMsg(depart south, 'to the south')"
"BMsg","west","west","travel.t","BMsg(west, 'west')"
"BMsg","depart west","to the west","travel.t","BMsg(depart west, 'to the west')"
"BMsg","northeast","northeast","travel.t","BMsg(northeast, 'northeast')"
"BMsg","depart northeast","to the northeast","travel.t","BMsg(depart northeast, 'to the northeast')"
"BMsg","northwest","northwest","travel.t","BMsg(northwest, 'northwest')"
"BMsg","depart northwest","to the northwest","travel.t","BMsg(depart northwest, 'to the northwest')"
"BMsg","southeast","southeast","travel.t","BMsg(southeast, 'southeast')"
"BMsg","depart southeast","to the southeast","travel.t","BMsg(depart southeast, 'to the southeast')"
"BMsg","southwest","southwest","travel.t","BMsg(southwest, 'southwest')"
"BMsg","depart southwest","to the southwest","travel.t","BMsg(depart southwest, 'to the southwest')"
"BMsg","down","down","travel.t","BMsg(down, 'down')"
"BMsg","depart down","down","travel.t","BMsg(depart down, 'down')"
"BMsg","up","up","travel.t","BMsg(up, 'up')"
"BMsg","depart up","up","travel.t","BMsg(depart up, 'up')"
"BMsg","in","in","travel.t","BMsg(in, 'in')"
"BMsg","depart in","inside","travel.t","BMsg(depart in, 'inside')"
"BMsg","out","out","travel.t","BMsg(out, 'out')"
"BMsg","depart out","out","travel.t","BMsg(depart out, 'out')"
"BMsg","port","port","travel.t","BMsg(port, 'port')"
"BMsg","depart port","to port","travel.t","BMsg(depart port, 'to port')"
"BMsg","starboard","starboard","travel.t","BMsg(starboard, 'starboard')"
"BMsg","depart starboard","to starboard","travel.t","BMsg(depart starboard, 'to starboard')"
"BMsg","forward","forward","travel.t","BMsg(forward, 'forward')"
"BMsg","depart forward","forward","travel.t","BMsg(depart forward, 'forward')"
"BMsg","aft","aft","travel.t","BMsg(aft, 'aft')"
"BMsg","depart aft","aft","travel.t","BMsg(depart aft, 'aft')"
