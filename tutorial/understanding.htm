<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Heidi: our first adv3Lite game &mdash; Understanding the Source File</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="heidi.htm">Heidi: our first adv3Lite game</a> &gt; 
Understanding the Source File
<br><span class="navnp"><a class="nav" href="basicsource.htm"><i>Prev:</i> Creating the Basic Source File</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="locations.htm"><i>Next:</i> Defining the Game's Locations</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">
<h1>Understanding the Source File</h1>

<h2>Directives</h2>
<p>You may recall that the source file begins with the following three lines:</p>
<p><div class="code"><pre>
#charset "us-ascii"

#include &lt;tads.h&gt;
#include "advlite.h"
</pre></div>

<p><em>Every</em> source file you create for use with an adv3Lite game should begin in precisely the same way. When you come to create a larger game, you'll probably want to split it over several source files (if you're curious, see the article on  "Understanding Separate Compilation" in the <em>TADS 3 Technical Manual</em>). If you do so, you must begin each of your source files with the same three lines as above.</p>

<p>The first line is:</p>

<p><div class="code"><pre>
#charset "us-ascii"
</pre></div>

<p>This tells the compiler which <em>character set</em> you are using in your source file (in this case, us-ascii), so that it knows how to translate it into Unicode (which is what the TADS 3 compiler uses internally). You don't need to worry about the technicalities of this at the moment (if you're interested, refer to the section on "Source File Character Sets" in Part III of the <em>TADS 3 System Manual</em>. What you do need to know is (1) that the # character at the beginning of the line signals that this line is a compiler <em>directive</em> and (2) that the #charset directive should occur once and only once in every source file you create, right at the start of the file. To make sure you don't run into any problems, put your #charset directive on the very first line of the file with the # character in the leftmost column (i.e. right of the start of the line). Remember, the #charset directive <strong>must</strong> be the very first thing in each source file;  it can't be preceded by anything, not even a comment or whitespace.</p>

<p>The next two lines are also compiler directives. These are:</p>

<p><div class="code"><pre>
#include &lt;tads.h&gt;
#include "advlite.h"
</pre></div>

<p>The #include directive tells the compiler to copy the contents of whatever file is specified immediately afterwards into that place in your source file. Although TADS 3 allows separate compilation of multiple source files into a single project, certain information  (such as template and macro definitions) needs to be included in each and every source file. It is thus convenient to package this repeated information into <em>header</em> files (files with a .h extension) and include them in each source file as we are doing here. The first #include line, <span class="code">#include &lt;tads.h&gt;</span>, includes certain definitions common to nearly all TADS 3 programs. The second, <span class="code">#include "advlite.h"</span>, includes a whole bunch of definitions specific to the adv3Lite library. Every source file you create for an adv3Lite game needs to include both these files.</p>

<p>You may be wondering why the file tads.h is surrounded by angle brackets (&lt;tads.h&gt;) while the file advlite.h is placed in inverted commas. The only difference is the way the compiler searches for the location of the file to be included. If you're interested in the details, consult the section on "The Preprocessor" in Part III of the <em>TADS 3 System Manual</em> (but there's really no need to do so right away).</p>

<p>Everything else in the source file so far is either an object definition or a comment. We'll look at the comments next.</p>

<h2>Comments</h2>

<p>As in many other (if not most) programming languages, in TADS 3 a comment is some text that's completely ignored by the compiler but contains information that may be useful to a human reader of the source file. Comments are thus used both to explain things to other people who made read your source file, and to remind yourself some time later why you did things the way you did, and what your code is for. It is a good idea to make liberal use of comments in your own code to help yourself understand it when you come back to it after an interval.</p>

<p>There are two ways of marking texts as comments in TADS 3:</p>

<ol>
<li>Anything after <span class="code">//</span> on a line is a comment.</li>
<li>Anything between <span class="code">/*</span> and  <span class="code">*/</span> is a comment. This allows you to write comments that span multiple lines.</li>
</ol>

<p>The following are thus examples of comments in the source file we have just created:</p>
 <p><div class="code"><pre>
   // obtain IFID from http://www.tads.org/ifidgen/ifidgen
   
   /* Define the initial player character; this is compulsory */
   
   
/* 
 *   The player character object. This doesn't have to be called me, but me is a
 *   convenient name. If you change it to something else, rememember to change
 *   gameMain.initialPlayerChar accordingly.
 */
</pre></div>

<h2>Object Definitions</h2>
<p>Everything else in the file so far is an object definition. This is usual in writing IF with TADS 3 (whichever library you use): most of your code will consist of object definitions. Your code may occasionally consist of other things, such as class definitions, or modifications to class definitions, or function definitions, or enum definitions (and one or two other things), but we needn't worry about any of those for now. Most of what you'll be doing when writing IF in TADS 3 is defining objects. Let's take a closer look at the first one in our source file:</p>

 <p><div class="code"><pre>
versionInfo: GameID
    IFID = '' // obtain IFID from http://www.tads.org/ifidgen/ifidgen
    name = 'The Adventures of Heidi'
    byline = 'by A.N. Author'
    htmlByline = 'by &lt;a href=&quot;mailto:an.author@somemail.com&quot;&gt;
                  A.N. Author&lt;/a&gt;'
    version = '1'
    authorEmail = 'A.N. Author &lt;an.author@somemail.com&gt;'
    desc = 'A simple game borrowed from the Inform Beginner\'s Guide by Roger
        Firth and Sonja Kesserich.'
    htmlDesc = 'A simple game borrowed from the &lt;i&gt;Inform Beginner\'s Guide&lt;/i&gt;
        by Roger Firth and Sonja Kesserich.'    
    
;
</pre></div>

<p>The object definition begins with the name of the object (here <span class="code">versionInfo</span>), followed by a colon, followed by the name of the class to which the object belongs (here <span class="code">GameID</span>). Note the convention that an object name begins with a lower-case letter while a class name begins with an upper-case letter (though this is simply a convention). The object definition ends with a semicolon, which tells the compiler "We've finished definining this object". In between the class name and the terminating semicolon come a list of properties, each one defined with a property name followed by an equals sign followed by the initial value of that property; for example the <span class="code">version</span> property has an initial value of '1'. When you're defining your own objects, be careful <em>not</em> to terminate a property definition with a semicolon (it's easily done), because the compiler will think you mean to end the definition of the whole object, and you'll get a whole lot of compiler errors.</p>

<p>At this point you may be asking: But what is an object? And what is a class? And what the heck is a property?</p>

<p>At a first approximation, an <em>object</em> is a means of grouping related code and data into a single programming entity. In TADS 3 an object in the programming sense is often used to represent a physical object in the game world, such as a chair or a rubber ball or a room, but programming objects have other uses, as is clearly the case with the versionInfo object.</p> 

<p>A <em>class</em> is a kind of mould for objects; for example physical game objects like balls, chairs and sticks tend to share a lot of common behaviour by virtue of being physical objects. Rather than defining that common behaviour each and every time on every single object (which would soon become highly laborious and highly tedious), we define the common behaviour on a class (in this case called Thing) and then define each individual game object to be of the Thing class (or maybe of some class derived from Thing, but we'll come to that in due course). By the way, when I say <em>we</em> define the common behaviour on Thing, in this case (and in many other) that's something the adv3Lite does for us (you might say it's one of the main things a library like adv3Lite is for).</p>

<p>A <em>property</em> is simply a piece of data associated with an object. In the example above, all the properties happen to be single-quoted strings, but they could be of other types, such as numbers or even other objects.</p>

<p>The purpose of the versionInfo object is clearly to provide some basic information about the game we're about to write, such as its name, who it's by, a brief blurb, and its version number. Most of this should be reasonably self-explanatory (for a fuller explanation consult the <a href="../manual/beginning.htm#versioninfo">adv3Lite manual</a>), but the IFID may be worth a brief word or two. This is a unique 32-digit hexadecimal number used to identify your game on certain databases such as the IFDB. Since you won't be submitting the Adventures of Heidi to any public database, we don't need to worry about it here, but if this were a real game you'd need to do what the comment suggests, namely visit <a href="http://www.tads.org/ifidgen/ifidgen">http://www.tads.org/ifidgen/ifidgen</a> to obtain a unique IFID which you could then copy and paste into your own code (between the single quote marks after <span class="code">IFID = </span>).</p>

<p>The next object in our source file is:</p>
 <p><div class="code"><pre>
gameMain: GameMainDef
    /* Define the initial player character; this is compulsory */
    initialPlayerChar = me
;
</pre></div>

<p>This is where you can define certain other basic information about your game, such as certain options and what it does on start-up. For the full story on gameMain you can once again consult the <a href="../manual/beginning.htm#gamemain">adv3Lite manual</a>, though once again there's no great need to do so right away. The one thing to note is that this object must be defined somewhere in your game source files, and it must define the initialPlayerChar property (meaning the object that will represent the player character at the start of the game). By convention the player character object is normally called me, and normally there's no reason to change that, so for now we've left the definition of gameMain as it is.</p>

<p>The final two objects define the player character's starting location and the object representing the player character. These must be present for your game to compile correctly:</p>

 <p><div class="code"><pre>
/* The starting location; this can be called anything you like */

beforeCottage: Room 'In front of a Cottage'
    "You stand outside a cottage. The forest stretches east. "
;

/* 
 *   The player character object. This doesn't have to be called me, but me is a
 *   convenient name. If you change it to something else, rememember to change
 *   gameMain.initialPlayerChar accordingly.
 */

+ me: Thing 'you;;heidi'   
    isFixed = true    
    proper = true
    ownsContents = true
    person = 2   
    contType = Carrier    
;
</pre></div>

<p>Note the use of the + sign to indicate the me object is located inside the beforeCottage location. You'll probably be using this notation a lot.</p>

<p>Don't worry if you don't understand what the rest of it means just yet; that's what we'll be going on to talk about next. Also, don't worry if you feel you haven't completely grasped all there is to know about objects, classes and properties. We'll be saying a lot more about them in what follows.</p>

</div>
<hr class="navb"><div class="navb">
<i>adv3Lite Library Tutorial</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="heidi.htm">Heidi: our first adv3Lite game</a> &gt; 
Understanding the Source File
<br><span class="navnp"><a class="nav" href="basicsource.htm"><i>Prev:</i> Creating the Basic Source File</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="locations.htm"><i>Next:</i> Defining the Game's Locations</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>