<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>The Core Library &mdash; Beginnings</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="core.htm">The Core Library</a> &gt; 
Beginnings
<br><span class="navnp"><a class="nav" href="topic.htm"><i>Prev:</i>Topics</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="ending.htm"><i>Next:</i> Endings</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">
<h1>Beginnings</h1>
<p>A work of Interactive Fiction has to start somewhere, and preferably with something a little more informative than a blank screen with a command prompt. In any case, for the game to work properly you need to define at least a basic set of data about the game and some of its starting conditions. We saw a brief example of this in the section on defining a <a href="mingame.htm">minimal game</a>, but now we should cover the topic a little more formally and in a little more depth.</p>

<h2><a name="versioninfo">The versionInfo Object</a></h2>
<p>Your game should normally define a versionInfo object (of the GameID class) to:</p>
<ol>
<li>Specify basic information about your game (its name, author, etc.)</li>
<li>Define the response to informational commands like ABOUT and CREDITS.</li>
</ol>

<p>The properties and methods of versionInfo you'll typically need to define are:</p>

<ul>
<li><strong>IFID</strong>: a random 32-digit hex number to uniquely identify the game; you can generate one at <a href="http://www.tads.org/ifidgen/ifidgen">http://www.tads.org/ifidgen/ifidgen</a></li>
<li><strong>name</strong>: The name of your game, e.g. 'Amazing Quest'</li>
<li><strong>byline</strong>: Your name or pseudonym, e.g. 'by I.F. Author'</li>
<li><strong>htmlByline</strong>: the main author credit as an HTML fragment</li>
<li><strong>authorEmail</strong>: the authors' names and email addresses (in GameInfo format) (e.g. 'I.F.Author &lt;i.author@whatevermail.com&gt;') </li>
<li><strong>desc</strong>:  a short blurb describing the game, in plain text format</li>
<li><strong>htmlDesc</strong>: the descriptive blurb as an HTML fragment</li>
<li><strong>version</strong>:the game's version number string</li>
<li><strong>showAbout()</strong>: the method to run in response to an ABOUT command.</li>
<li><strong>showCredit()</strong>: the method to run in response to a CREDITS command.</li>
</ul> 
<p>So, for example, a typical versionInfo definition might look like this:</p>

<p><div class="code"><pre>
versionInfo: GameID
    IFID = '0D9D2F69-90D5-4BDA-A21F-5B64C878D0AB'
    name = 'Fire!'
    byline = 'by Eric Eve'
    htmlByline = 'by &lt;a href=&quot;mailto:eric.eve@nospam.com&quot;&gt;
                  Eric Eve&lt;/a&gt;'
    version = '1'
    authorEmail = 'Eric Eve &lt;eric.eve@nospam.com&gt;'
    desc = 'A test game for the adv3lite library.'
    htmlDesc = 'A test game for the adv3lite library.'
    
    showAbout()
    {
        aboutMenu.display();
        
        "This is a demonstration/test game for the adv3Lite library. It should
        be possible to reach a winning solution using a basic subset of common
        IF commands.&lt;.p&gt;&quot;;
    }
    
    showCredit()
    {
        "Fire! by Eric Eve\b
        adv3Lite library by Eric Eve with substantial chunks borrowed from the
        Mercury and adv3 libraries by Mike Roberts. ";               
    }
;
</pre></div>
 
 <p>In addition, you can override the following settings if you don't like the defaults inherited from GameInfoModuleID:</p>
 <ul>   
 <li>releaseDate - the release date string (YYYY-MM-DD)</li>
 <li>licenseType - freeware, shareware, etc.</li>
 <li>copyingRules - summary rules on copying</li>
 <li>presentationProfile - Multimedia, Plain Text</li>
</ul>

<p>For further details consult the comments on the GameInfoModuleID in the modid.t file and/or consult the article on "Bibliographical Metadata" in the <em>TADS 3 Technical Manual</em> (although this was written for the adv3 library, everything in the Metadata article should apply equally well to adv3Lite).</p>
<br>

<h2><a name="gamemain">The gameMain Object</a></h2>

<p>You game must define a gameMain object, which should be of the GameMainDef class. At a basic minimum it must define the <strong>initialPlayerChar</strong> property to identify the object that is to represent the player character at the start of the game (typically this is called me, though you can call it anything you like). A minimal gameMain definition will therefore look like this: </p>

 <p><div class="code"><pre>
gameMain: GameMainDef
   initialPlayerChar = me
;
</pre></div>

<p>In practice you'll normally want to define rather more than this on your gameMain object. The other properties and methods you may want to define include:</p>

<ul>
<li><strong>showIntro()</strong>: Show the game's introduction.  This routine is called by the default newGame() just before entering the main command loop.  The command loop starts off by showing the initial room description,so there's no need to do that here. Most games will want to override this, to show a prologue message setting up the game's initial situation for the player. </li>
<li><strong>showGoodbye()</strong>:  Show the "goodbye" message.  This is called after the main command loop terminates. It doesn't show anything by default.  If you want to show a "thanks for playing" type of message as the game exits, override this routine with the desired text.</li>
<li><strong>setAboutBox</strong>(): Define how the about box should appear (typically in response to selecting Help, About from the menu of an HTML TADS interpreter. For more details on how to do this see the notes <a href="#aboutbox">below</a>.</li>
<li><strong>maxScore()</strong>: The maximum number of points possible in the game.  If the game includes the <a href="score.htm">scoring module</a> at all, and this is non-nil, the SCORE and FULL SCORE commands will display this value to the player as a rough indication of how much farther there is to go in the game. By default, the library initializes this on demand, by calculating the sum of the point values of the Achievement objects in the game.  The game can override this if needed to specify a specific maximum possible score, rather than relying on the automatic calculation.</li>
<li><strong>beforeRunsBeforeCheck</strong>: Should the "<a href="react.htm">before</a>" notifications (beforeAction and roomBeforeAction) run before or after the "check" phase? The adv3 library traditionally ran the "before" notifiers first, but the adv3Lite runs the "before" notifiers after the check phase, so in the adv3Lite library the default value is nil. In many ways it's more logical and useful to run "check" first.  That way, you can consider the action to be more or less committed by the time the "before" notifiers are invoked.  Of course, a command is never *truly* committed until it's actually been executed, since a "before" handler could always cancel it.  But this is relatively rare - "before" handlers usually carry out side effects, so it's very useful to be able to know that the command has already passed all of its own internal checks by the time "before" is invoked - that way, you can invoke side effects without worrying that the command will subsequently fail. </li>
<li><strong>usePastTense</strong>: This can be set to true if you want your game to be narrated in the past tense (it has the effect of making all the library messages appear in the past tense). If it's left at nil, the default, the game will be narrated in the present tense. (The adv3Lite library, courtesy of the Mercury code it inherits, is actually capable of narration in six different tenses, but the present and the past are the ones most likely to be use in at least 99% of games. If you want to use one of the other tenses see notes <a href="#tenses">below</a>.</li>
<li><strong>storeWholeObjectTable</strong>: this is a possibly somewhat arcane property, but it's included here for sake of completeness. Setting this value to true only takes effect if actor.t is included in the build. It then has the effect of causing symbolic references to all relevant objects (Mentionables, ActorStates and AgendaItems) to be stored in conversationManager's object name table for use in various <a href="tags.htm">tags</a> (&lt;.agenda &gt;, &lt;.remove &gt;, &lt;.state  &gt; and &lt;.known &gt;). This ensures that these tags will always work (i.e. that they will be able to reference any relevant game object). If this is left at nil the conversation manager preInit instead tries to harvest all the objects it finds in these tags in TopicEntry topicResponse and AgendaItem invokeItem methods, which will result in a (possibly much) smaller table being stored, and is therefore more economical, but may be less reliable.</li>
</ul>

<p>If you look at the definition of GameMainDef in misc.t you'll see a number of other methods and properties. Some of these, such as newGame(), restoreAndRunGame(filename), setGameTitle() and getSaveDesc(userDesc) are probably left as the library defines them unless you really have a need to override them and you know what you're doing. The rest are not guaranteed to work in the current version of the adv3Lite library and are probably best left alone (they have been left in from the adv3 version of GameMainDef for possible implementation in a later version of adv3Lite).</p>

<p>A fairly typical gameMain definition might thus look something like this:</p>

 <p><div class="code"><pre>
gameMain: GameMainDef
    initialPlayerChar = me
    
    showIntro()
    {       
        cls();
                        
        george.startFollowing;
        
        &quot;&lt;b&gt;&lt;font color='red'&gt;FIRE!&lt;/font&gt;&lt;/b&gt;  You woke up just now, choking
            from the smoke that was already starting to fill your bedroom,
            threw something on and hurried downstairs -- narrowly missing
            tripping over the beach ball so thoughtgfully left on the landing
            by your &lt;i&gt;dear&lt;/i&gt; nephew Jason -- you &lt;i&gt;knew&lt;/i&gt; having him to
            stay yesterday would be trouble -- perhaps he's even responsible
            for the fire (not that he's around any more to blame -- that's one
            less thing to worry about anyway).\b
            So, here you are, in the hall, all ready to dash out of the house
            before it burns down around you. There's just one problem: in your
            hurry to get downstairs you left your front door key in your
            bedroom.&lt;.p&gt;&quot;;
    }
   
;
</pre></div>
<br>
<h3>Notes</h3>

<p>When defining a <strong><a name="aboutbox">showAboutBox()</a></strong> method you'd typically make it display a string beginning and ending wiith the &lt;ABOUTBOX&gt; and &lt;/ABOUTBOX&gt; tags. A very basic setAboutBox() method that picks up all the relevant text from the versionInfo object might look like this:</p>
 <p><div class="code"><pre>
  setAboutBox()
    {
        &quot;&lt;ABOUTBOX&gt;&lt;CENTER&gt;&lt;FONT size=+2 color=red&gt;&lt;b&gt;&lt;&lt;versionInfo.name&gt;&gt;
        &lt;/b&gt;&lt;/FONT&gt;\b
         &lt;&lt;versionInfo.byline&gt;&gt;\b
        Version &lt;&lt;versionInfo.version&gt;&gt;&lt;/CENTER&gt;&lt;/ABOUTBOX&gt;&quot;;
    }
</pre></div>

<p>For <a name="tenses"><strong>tenses</strong></a> other than past or present, override <span class="code">Narrator.tense</span> to be one of Present ('Bob opens the box'), Past ('Bob opened the box'), Perfect ('Bob has opened the box'), PastPerfect ('Bob had opened the box'), Future ('Bob will open the box'), or FuturePefect ('Bob will have opened the box'). By default the library defines Narrator.tense as <span class="code">(gameMain.usePastTense ? Past : Present)</span>. </p>

<p>The <strong>showIntro()</strong> method is primarily for showing the game's introduction. It may also be a convenient place to put small amounts of start-up code used for initializing the game state (such as starting a Daemon running), but for initialization code you should also consider using <strong>PreinitObject</strong> and <strong>InitObject</strong>, which are definined in the System Library, and which you can read about in the "Program Initialization" section of the <i>TADS 3 System Manual</i>.</p>


</div>
<hr class="navb"><div class="navb">
<i>adv3Lite Library Manual</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="core.htm">The Core Library</a> &gt; 
Beginnings
<br><span class="navnp"><a class="nav" href="topic.htm"><i>Prev:</i> Topics</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="ending.htm"><i>Next:</i> Endings </a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>