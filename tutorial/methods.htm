<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Reviewing the Basics &mdash; Methods, Functions and Statements</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="reviewing.htm">Reviewing the Basics</a> &gt; 
Methods, Functions and Statements
<br><span class="navnp"><a class="nav" href="containment.htm"><i>Prev:</i> Object Containment</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="inherit.htm"><i>Next:</i> Inheritance, Modification and Overriding</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">
<h1>Methods, Functions and Statements</h1>

<h2>Methods and Functions</h2>

<p>Methods and functions are quite similar both in appearance and, if you'll pardon the pun, function. Methods and functions are both containers for blocks of code, that is, for a series of <em>statements</em>, or instructions to the computer to carry out the commands the method or function defines. The principle difference between them is that a method belongs to an object, whereas a function is free-standing. For example, in the Heidi example we developed in the previous chapter, <span class="code">afterAction()</span> was a method of the <span class="code">branch</span> object, while <span class="code">finishGameMsg()</span> was a function defined in the adv3Lite library (in fact, in this particular instance, precisely the same function is defined in the adv3 library too).</p>

<p>The syntax for defining a function is:</p>

<p><div class="syntax"><pre>
<span class=synPar>functionName</span> <span class=synLit>(</span> <span class=synMark>[</span> <span class=synPar>paramName</span> <span class=synMark>[</span> <span class=synLit>,</span> <span class=synPar>paramName</span> <span class=synMark>...</span> <span class=synMark>]</span>  <span class=synMark>]</span>  <span class=synLit>)</span>
<span class=synLit>{</span>
   <span class=synPar>functionBody</span>
<span class=synLit>}</span>
</pre></div>

<p>This means that to define a function you start with the function name, then put an opening parenthesis, then a list of parameters the function takes, then a closing parenthesis, following which you write the the body of the function between opening and closing braces. To give a couple of more concrete examples:</p>

 <p><div class="code"><pre>
sayHello()
{
   "Hello World!";
}

double(x)
{
   return x * 2;
}
</pre></div>   

<p>The <span class="code">sayHello()</span> function simply displays the text "Hello World!" when it is invoked. The <span class="code">double()</span> function accepts a single number as a parameter and returns double that number. It could be used like this:</p>   

<p><div class="code"><pre>
  y = double(3);
</pre></div>

<p>Which would result in y containing the value 6. (In this code fragment, y is a variable; we'll explain variables in the next subsection).</p>

<p>The sayHello() example incidentally shows that if you want to define a function (or method) that takes no parameters, you simply follow its name with a pair of parentheses. A parameter is simply a temporary storage area (just like a variable) that you can use to pass a value to a function or method. In the <span class="code">double()</span> example, calling <span class="code">double(3)</span> causes the x parameter to take the value 3, so that when <span class="code">double(3)</span> executes the statement <span class="code">return x * 2;</span> it first multiplies 3 by 2 (since x now has the value 3) and then returns the result (i.e. 6) to the caller.</p>

<p>Incidentally, you'll often come across <em>parameters</em> referred to as <em>arguments</em>. Technically the two terms mean something slightly different: parameters are what you define when you define the function or method, arguments are what you pass when you call the function or method, but for most practical purposes this is a distinction that seldom matters, and if you refer to both parameters and arguments as 'arguments' you probably won't get into much trouble!</p>

<p>A method is defined almost exactly like a function, except that its definition occurs within the body of an object or class. For example:</p>

 <p><div class="code"><pre>
class Greeter: Thing
   greet()
   {
      "&lt;&lt;name&gt;&gt; says hello! ";
   }
;

bob: Greeter 'Bob; tall; man; him'
  "He's a very tall man. "
  
  doSum(x, y)
  {
     "&lt;q&gt;Let me see,&lt;/q&gt; says Bob. &lt;q&gt;By my reckoning,&lt;&lt;x&gt;&gt; plus &lt;&lt;y&gt;&gt; is
       &lt;&lt;x + y&gt;&gt;. ";
  }
;
</pre></div>

<p>In this somewhat contrived example, the <span class="code">Greeter</span> class defines a <span class="code">greet()</span> method, which the <span class="code">bob</span> object inherits (since it's of class <span class="code">Greeter</span>). Calling <span class="code">bob.greet()</span> would result in the display of "Bob says hello!" while calling <span class="code">bob.doSum(10, 5)</span> would result in the display of  '"Let me see," says Bob, "By by reckoning 10 plus 5 is 15"'.</p>

<p>In this example bob gets its name property via the vocab property we defined using the Thing template (since Greeter inherits from Thing, we can still use the Thing template with it). This incidentally illustrates another important difference between a method and a function. A method can refer to other properties and methods of the object on which it's defined. A function can't do this because it isn't part of any object. Likewise a method can use the special keyword <span class="code">self</span> to refer to the object on which it's defined; a function can't do this since there would be no object for <span class="code">self</span> to refer to, a function not being part of any object.</p>

<p>By the way, these examples have all been of very simple methods and functions with a single line of code (in fact, a single statement). In fact a function or method can contain as many statements as you like (although if a function or method starts to grow too big that may be a sign that it should be broken up into a number of functions or methods). We have simply kept these examples as simple as possible to illustrate the basic principles of defining functions and methods.</p>


<h2><a name="variables">Variables</a></h2>

<p>A variable is simply a temporary container for a piece of information, such as a number, a piece of text, a list, a reference to an object, or a special value like <span class="code">true</span> or <span class="code">nil</span>. In TADS 3 all variables are <em>local</em>, which means that they can only exist within a function or method, and only keep their value for as long as that function or method is being executed. In fact, the lifetime of a TADS 3 variable may be even less than that, for a variable only persists for as long as the <em>block</em> in which it is defined is being executed, where a block is any set of statements enclosed in a matching pair of opening and closing braces (<span class="code">{}</span>). A method or function is simply the outermost possible kind of enclosing block.</p>

<p>A variable must be <em>declared</em> before it can be used. A variable is declared using the keyword <span class="code">local</span>, followed by one or more variable names (separated by commas, if there's more than one). A variable may optionally be <em>initialized</em> at the same time it is declared by following it with an equals sign followed by whatever value you wish to give it. If a variable is declared but not initialized it will have the value <span class="code">nil</span> (i.e. nothing at all) until it is assigned a value. The following are all examples of legal variable declarations:</p>

<p><div class="code"><pre>
  local a;
  local numberOfEggs, weightOfFlour, quantityOfButter;
  local price = 10, weight, title = 'cake recipe';
</pre></div>

<p>On the whole it's best to give your variables meaningful names as in the second and third examples above, since this will make your code easier to read (and maintain). For some purposes (such as a loop counter), a brief single-letter variable name may suffice, however. A variable name should be unique in the block of code in which it occurs, and you should try to avoid using the name of an object, method, function or other identifier as a variable name since this is likely to confuse the compiler (as well as you) and would probably lead to compilation errors.</p>

<p>On the other hand, it's quite okay to use the same variable name in different functions and methods. If you define a local variable called <span class="code">title</span> in a function called <span class="code">showName()</span> and another local variable called <span class="code">title</span> in a method called <span class="code">mixCake()</span> the two <span class="code">title</span> variables will have no relation to each other at all, and no confusion will occur.</p>

<p>As its name suggest, a variable is something whose value can vary as your code is executed. Consider the following code snippet:</p>

 <p><div class="code"><pre>
someFunction()
{
   local myVar = 2;
   myVar = myVar + 2;  <span class="comment">// now myVar is 4</span>
   myVar = 'Hello';    <span class="comment">// now myVar is 'Hello'</span>
   myVar += ' World!'; <span class="comment">// now myVar is 'Hello World!'</span>   
}
</pre></div>
<h2>Statements</h2>

<p>With one or two exceptions, we were able to write almost the whole of <em>The Adventures of Heidi</em> in the previous chapter using purely declarative programming, that is by defining objects and declaring the values of certain of their properties. Although adv3Lite tries to let you write your game as far as possible this way, as we've already seen in the code for ending the Heidi game, you can't do everything that way, and the more original, interesting and sophisticated you want your game to be, the more you'll need to supplement your declarative code with <em>procedural code</em>, that is code that consists of a set of instructions (i.e. a procedure) telling your game what to do under certain circumstances. Such code is made up of individual <em>statements</em>.</p>

<p>A <em>statement</em> is simply an instruction to your game to carry out a particular task, expressed in the TADS 3 programming language. With one or two exceptions that need not concern us here, statements can only occur within a function or method (one obvious exception would be statements that define (the header of a) function or method. In this section, however, we shall be entirely concerned with <em>procedural</em> statements, that is the kind of statements that can be put inside a method or function to make it carry out a particular procedure.</p>

<p>The kinds of procedural statements you'll most commonly used are:</p>

<ul>
<li>declarations</li>
<li>assignment statements</li>
<li>method and function calls</li>
<li>flow control statements</li>
<li>double-quoted string statements</li>
</ul>

<p>As we'll see, some of these kinds can be combined into a single statement, but for convenience of presentation we'll take each kind in turn. But one feature all procedural statements have in common is that they must be terminated with a semicolon.</p>

<h3>Declarations</h3>

<p>A declaration statement is one that declares a new local <a href="#variables">variable</a>, as we have already seen above. The following statement declares the local variable <span class="code">myNewVar</span>:</p>

 <p><div class="code"><pre>
local myNewVar;
</pre></div>

<p>As already noted, a local variable must be declared before it can be used, but a variable can be declared and assigned an initial value in the same statement, for example:</p>
 <p><div class="code"><pre>
local myNewVar = 10;
local someonesName = 'John Doe';
local obj = bird;
local bool = true;
</pre></div>

<p>The above example could alternatively be written all as one statement:</p>

 <p><div class="code"><pre>
local myNewVar = 10, someonesName = 'John Doe', obj = bird, bool = true;
</pre></div>

<h3>Assignment Statments</h3>

<p>An assignment statement assigns the value of an expression to a local variable or object property. It has the form:</p>

<pre>
  <span class=synPar>lvalue</span> <span class=synLit>=</span> <span class=synPar>expression</span><span class=synLit>;</span>
</pre>

<p>Where <em>lvalue</em> is the property or variable to which the value is being assigned, and <em>expression</em> is any valid TADS 3 expression. Examples of assignment statements include:</p>

 <p><div class="code"><pre>
  x = 2;
  x = x + 3;
  obj = bird;
  obj.name = 'parrot';
  str = 'Hello' + ' World';
  val = double(x + 1) / 3 + 18;  <span class="comment">// val is now 22</span>
</pre></div>

<p>An <em>expression</em> can be any legal combination of variables, property names, function and/or method calls, and operators. <em>Operators</em> include the common arithmetic operators <span class="code">+ - / *</span> (the last two of which are used for division and multiplication), the string concatenation operator <span class="code">+</span>, the logical operators <span class="code">&& || </span>and <span class="code">!</span> (and, or and not), and the comparison operators <span class="code">== != &gt; &lt; &gt;=</span> and <span class="code">&lt;=</span> (equals, not equals, less than, greater than, greater than or equal to, and less than or equal to).</p>

<p>NOTE. Just as in C (whose syntax TADS 3 borrows to a large extent) be very careful not to confuse the assigment operator <span class="code">=</span> with the test for equality operator <span class="code">==</span>. Consider the following:</p>

 <p><div class="code"><pre>
  a = 3; <span class="comment">// Assigns the value 3 to a.</span>
  a == 3; <span class="comment">// Tests whether a is 3 (and here evaluates to true), but doesn't do anything.</span>
  
  if(a = 4)   <span class="comment">// legal but doesn't do what you probably expect</span> 
     say ('a is 4!')
</pre></div>

<p>The statement <span class="code">a == 3</span> is a legal statement because a statement can consist just of an expression, even if the expression doesn't do anything as here. The test <span class="code">if(a = 4)</span> is legal, because an assignment like <span class="code">a = 4</span> is also an expression (it evaluates to 4). But since 4 is considered a true value (being neither zero nor <span class="code">nil</span>), the test will be passed if a is any number other than zero, causing 'a is 4!' to be displayed whatever the value of a (other than when a is zero or nil).</p>

<p>There are also various short form assignment statements. Because it's so common to write statements like:</p>

<p><div class="code"><pre>
  count = count + 2;
</pre></div>
  
<p>This can be abbreviated to:</p>
  <p><div class="code"><pre>
  count += 2;
</pre></div>

<p>And so on with similar operators like <span class="code">-= *=</span> and <span class="code">/=</span>. Because adding or subtracting 1 from a number is so common, this can be abbreviated even further:</p>
 <p><div class="code"><pre>  
  count++; <span class="comment">// equivalent to count += 1;</span>
  count--; <span class="comment">// equivalent to count -= 1;  </span>
  ++count; <span class="comment">// equivalent to count += 1;</span>
  --count; <span class="comment">// equivalent to count -= 1;</span>
</pre></div>  

<p>The difference between <span class="code">++count</span> and <span class="code">count++</span> is simply the point at which the incrementing of <span class="code">count</span> occurs. This can be illustrated briefly like this:</p>
  
 <p><div class="code"><pre>
  count = 0;
  a = count++ <span class="comment">// a is now 0 and count is now 1, because count is incremented after its value is assigned to a</span>
  b = ++count <span class="comment">// b and count are now both 2, because count is incremented before its value is assigned to b</span>
</pre></div>
 
  
<h3>Method and Function Calls</h3>

<p>As we have seen, an expression by itself can constitute a perfectly valid statement. Often it would be a pointless statement; the expression <span class="code">count + 1;</span> is valid as a statement, but it doesn't actually do anything (in particular, it doesn't increase the value of count by 1). But expressions that consist of method or function calls are often useful as statements, because of their so-called side-effects. "Side-effect" is actually a slightly odd term here, because what we mean is what the method or function actually does. Examples we have actually seen include:</p>

 <p><div class="code"><pre>
  finishGameMsg(ftVictory, [finishOptionUndo]); <span class="comment">// ends the game</span>
  bird.moveInto(nest); <span class="comment">// moves the bird into the nest</span>
</pre></div>

<p>As you come to write more TADS 3 code (whether in adv3Lite or adv3) you'll probably find yourself using this kind of statement a lot.</p>

<h3>Flow Control Statements</h3>

<p>The statements we have discussed so far allow you to write methods and functions that do things, but they don't give you much flexibility or control. The power of any computer language comes from its ability to take different routes through the code depending on circumstances, and that's every bit as important when writing Interactive Fiction as it is for other kinds of application. </p>

<p>One of the most common &mdash; and most important &mdash; statements is the <span class="code">if</span> statement. We have already met it (in the <span class="code">afterAction()</span> method of the <span class="code">branch</span> object) in the form:</p>


<p><div class="syntax"><pre>
<span class=synLit>if</span> <span class=synLit>(</span> <span class=synPar>conditionExpression</span> <span class=synLit>)</span>
  <span class=synPar>thenPart</span>
</pre></div>

<p>Where span class=synPar>conditionExpression</span> is an expression that typically evaluates to either true or nil and <span class=synPar>thenPart</span> is either a single statement or a block (enxlosed by opening and closing braces) containing multiple statements. For example:</p>

<p><div class="code"><pre>
+ branch: Thing 'wide firm bough; flat; branch'
    "It's flat enough to support a small object. "
    
    iFixed = true
    isListed = true
    contType = On
    
    afterAction()
    {
        <strong>if(nest.isIn(self))
            finishGameMsg(ftVictory, [finishOptionUndo]);</strong>
    }
;
</pre></div>

<p>There's also a secong form of the <span class="code">if</span> statement that looks like this:</p>

<p><div class="syntax"><pre>
<span class=synLit>if</span> <span class=synLit>(</span> <span class=synPar>conditionExpression</span> <span class=synLit>)</span>
  <span class=synPar>thenPart</span>
<span class=synLit>else</span>
  <span class=synPar>elsePart</span> 
</pre></div>

<p>If this form of the if statement, both <span class=synPar>thenPart</span> and <span class=synPar>elsePart</span> may be either a single statement or a block of statements. If <span class=synPar>conditionExpression</span> evaluates to anything but <span class="code">nil</span> or <span class="code">0</span>, then <span class=synPar>thenPart</span> is executed, but if <span class=synPar>conditionExpression</span> does evaluate to either <span class="code">nil</span> or <span class="code">0</span> then  <span class=synPar>elsePart</span> is executed. For example;</p>

 <p><div class="code"><pre>
 if(obj.weight > 50)
 {
    "You can't budge it. ";
 }
 else
 {
    obj.moveInto(crevasse);
    "You push &lt;&lt;obj.theName&gt;&gt; over the edge, and it tumbles away out of sight. ";
 }
 </pre></div>

<p>In this example, if obj had a weight of 51, say, then the player would see the "You can't budge it" message, but if it had a weight of 50, obj would be moved into the crevasse and the player would see the message about it tumbling out of sight.</p> 
 
<p>Another common flow-control statement is the <span class="code">return</span> statement, which terminates the execution of a function or method. This has two forms:</p> 
  
 <pre>
 <span class=synLit>return;</span>
 <span class=synLit>return</span> <span class=synPar>expression</span><span class=synLit>;</span>
 </pre>
 
 <p>The first form simply terminates the function or method. The second terminates it and returns the value of <span class=synPar>expression</span> to the caller. For example:</p>
 
 <p><div class="code"><pre> 
 absolute(x)
 {
    if(x &lt; 0)
       return -x;
       
    return x;
 }
 
 sayDivide(x, y)
 {
    if(y == 0)
    {
       "You can't divide by zero. ";
       return;
    }
    
    "&lt;&lt;x&gt;&gt; divided by &lt;&lt;y&gt;&gt; is &lt;&lt;x/y&gt;&gt;. ";
    return;
 }
 
 ...
 
   a = absolute(-40) <span class="comment">// a is now 40</span>
   a = sayDivide(a, 20) <span class="comment">// a is now nil</span>
 </pre></div>
 
 <p>In the second case, although the player would see the message "40 divided by 20 is 2", since the function returns no value, <span class="code">a</span> will end up as <span class="code">nil</span>.</p>
 
 <p>The third common type of flow-control statement is the loop statement, of which TADS 3 provides several. The most versatile (and hence common) of these is the <span class="code">for </span>statement, which can take several forms:</p>
 
 <p><div class="syntax"><pre>
<span class=synLit>for</span> <span class=synLit>(</span> <span class=synMark>[</span> <span class=synPar>initializer</span> <span class=synMark>]</span>  <span class=synLit>;</span> <span class=synMark>[</span> <span class=synPar>condition</span> <span class=synMark>]</span>  <span class=synLit>;</span> <span class=synMark>[</span> <span class=synPar>updater</span> <span class=synMark>]</span>  <span class=synLit>)</span>
  <span class=synPar>loopBody</span>
</pre></div>

<p>The  <span class=synPar>initializer</span> is either an ordinary expression, or a list
of local variable declarations, or a mix of both:

<p><div class="syntax"><pre>
<span class=synMark>(</span> <span class=synPar>expression</span> <span class=synLit>|</span> <span class=synLit>local</span> <span class=synPar>varName</span> <span class=synLit>=</span> <span class=synPar>expression</span> <span class=synMark>)</span>  <span class=synMark>[</span> <span class=synLit>,</span> <span class=synMark>...</span> <span class=synMark>]</span> 
</pre></div>

<p>An example of this kind of for loop would be:</p>

 <p><div class="code"><pre>
  local count = 0;
  for(local i = 1; i &lt;= 10; i++)
     count += i;  
 </pre></div>

<p>This would sum the numbers from 1 to 10 and store the total (55) in <span class="code">count</span>.</p>    
 
<p>The second form of the for loop is:</p>
 
<p><div class="syntax"><pre>
<span class=synLit>for</span> <span class=synLit>(</span> <span class=synMark>[</span> <span class=synLit>local</span> <span class=synMark>]</span>  <span class=synPar>loopVar</span> <span class=synLit>in</span> <span class=synPar>expression</span> <span class=synLit>)</span>
   <span class=synPar>loopBody</span>
</pre></div>

<p>In this form of the for loop, <span class=synPar>expression</span> would typically be a list (or an expression that evaluates to a list). For example, to calculate the total bulk of the items carried by Heidi (perhaps in a game where we didn't restrict her carrying capacity quite so much) we might use:</p>

 <p><div class="code"><pre>
local totalBulk = 0;
for(local item in heidi.contents)
   totalBulk += item.bulk;
</pre></div>
  
<p>The third form of the for loop is:</p> 
 
 <p><div class="syntax"><pre>
<span class=synLit>for</span> <span class=synLit>(</span> <span class=synMark>[</span> <span class=synLit>local</span> <span class=synMark>]</span>  <span class=synPar>loopVar</span> <span class=synLit>in</span> <span class=synPar>fromExpr</span> <span class=synLit>..</span> <span class=synPar>toExpr</span> <span class=synMark>[</span> <span class=synLit>step</span> <span class=synPar>stepExpr</span> <span class=synMark>]</span>  <span class=synLit>)</span>
   <span class=synPar>loopBody</span>
</pre></div>

<p>Where <i>fromExpr</i>, <i>toExpr</i>, and the optional <i>stepExpr</i>
are expressions that evaluate to integer values.  If there's no
<span class="code">step</span> clause, the default step value is 1. With this form of the loop the first example (summing the numbers from 1 to 10) could have been written as:</p>

 <p><div class="code"><pre>
local count = 0;
for(local i in 1..10)
  count += i;
 </pre></div>
 
<p>As an added bonus, we can combine these different forms of for loop into a single statement. For example, the following could be used to display an enumerated list of Heidi's possessions:</p> 
 
 <p><div class="code"><pre>
"Heidi is holding:\n";

for(local item in heidi.contents, local i = 1 ;; i++)
   &quot;&lt;&lt;i&gt;&gt;. &lt;&lt;item.aName&gt;&gt;\n";
 </pre></div>
 
<p>These are not the only kind of loop (and other flow-control) statements that TADS 3 provides, but they are the ones that are most commonly used. We'll explain any others that arise if and when we come to them.</p>

<h3><a name="dquote">Double-Quoted String Statements </a></h3>
 
<p>Although we've already used several examples of it, we should complete this review of statement types by mentioning the double-quoted string statement. This is simply an instruction to display some text to the player, and takes the form of placing the text between double quote marks, and ending the statement with a semicolon:</p>
 <p><div class="code"><pre> 
"This text will be displayed to the player. ";
</pre></div> 

<p>The same result can be achieved via a function call:</p>
 <p><div class="code"><pre>
say('This text will be displayed to the player. ');
</pre></div>

<p>But the double-quoted string statement form is often more convenient. Note that in this statement the text to be displayed can contain embedded expressions, that is expressions enclosed in double angle-brackets &lt;&lt;&gt;&gt;. So for example we could write:</p>

 <p><div class="code"><pre>
"Heidi is carrying &lt;&lt;heidi.contents.length&gt;&gt; things right now. ";
</pre></div>

<p>The above example won't read to well if Heidi is carrying just one thing, and may not be ideal if she is completely empty handed, but we can also use embedded expressions to change what's displayed according to various conditions, for example:</p>

 <p><div class="code"><pre>
local numItems = heidi.contents.length;
"Heidi is &lt;&lt;if numItems == 0&gt;&gt; empty-handed&lt;&lt;else if numItems == 1&gt;&gt;carrying just one thing&lt;&lt;else&gt;&gt; carrying &lt;&lt;numItems&gt;&gt; things&lt;&lt;end&gt;&gt;. ";
</pre></div>

<p>Embedded expressions can also be used to vary what's displayed either randomly or sequentially, for example:</p>

 <p><div class="code"><pre>
"Heidi is very&lt;&lt;one of&gt;&gt;sad &lt;&lt;or&gt;&gt;happy &lt;&lt;or&gt;&gt;energetic &lt;&lt;or&gt;&gt;tired &lt;&lt;shuffled&gt;&gt; today. &quot;;
&quot;Heidi is very&lt;&lt;one of&gt;&gt;sad &lt;&lt;or&gt;&gt;happy &lt;&lt;or&gt;&gt;energetic &lt;&lt;or&gt;&gt;tired &lt;stopping&gt;&gt; today. "
</pre></div>

<p>The first statement will run through 'sad', 'happy', 'energetic' and 'tired' in random order, then shuffle the order and repeat through again in the new order and so on. The second statement will run through 'sad', 'happy', 'energetic' and 'tired' in that order and then keep repeating 'tired'. For a full list of the embedded expressions you can use, see the section on "String Literals" in Part III of the <em>TADS 3 System Manual</em>.</p>


<h2>Further Reading</h2>

<p>We have covered a lot of ground in rather a compressed manner in this section. Don't worry too much if it doesn't all make perfect sense yet, we'll be explaining many of the new features again when we use them in the games we'll be looking at. To get the full story on the material we have just sketched above, see the section on "Procedural Code" in Part III of the <em>TADS 3 System Manual</em>. You might also find it helpful to look at the sections on "Fundamental Datatypes" and "Expressions and Operators" in the same part of the <em>System Manual</em>. If you're at all unsure about the material we've just covered, or you're interested in going into more detail to get the full picture, now might be a good time to read these three sections. On the other hand, if you're comfortable with what we've just covered in this section and would like to carry on reading the next straight away, that's fine too, but I would still recommend that you read those three sections of the <em>TADS 3 System Manual</em> sooner or later.</p>

</div>
<hr class="navb"><div class="navb">
<i>adv3Lite Library Tutorial</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="reviewing.htm">Reviewing the Basics</a> &gt; 
Methods, Functions and Statements
<br><span class="navnp"><a class="nav" href="containment.htm"><i>Prev:</i> Object Containment</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="inherit.htm"><i>Next:</i> Inheritance, Modification and Overriding</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>