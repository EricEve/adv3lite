<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Schemes and Devices &mdash; Just the Ticket</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="schemes.htm">Schemes and Devices</a> &gt; 
Just the Ticket
<br><span class="navnp"><a class="nav" href="schemes.htm"><i>Prev:</i> Schemes and Devices</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="maintenance.htm"><i>Next:</i> The Maintenance Room</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">
<h1>Just the Ticket</h1>

<p>The description of the Airport game calls for a ticket found by picking up a newspaper in the snack bar. We've already implemented the newspaper; now it's time to implement the ticket:</p>

<p><div class="code"><pre>
ticket: Thing 'plane ticket'
    "It's a ticket for flight TI 179 to Buenos Aires. "
    
    readDesc = (desc)
    specialDesc = "A ticket lies on the ground. "
    useSpecialDesc = (location == getOutermostRoom)

;
</pre></div></p>

<p>That was the easy bit. The only new thing here is the use of the useSpecialDesc property to determine when the specialDesc is used. We want "A ticket lies on the ground" to appear in the room description whenever the ticket is notionally lying on the ground, which is whenever it's directly in a room rather than some other object; we can test this by testing whether it's location is the same as the room it's in, as above. While we're at it we define <span class="code">readDesc</span> as <span class="code">(desc)</span> so that READ TICKET gives the same response as X TICKET. The next trick is to hide it in the newspaper so that the player character finds it either if he searches the newspaper or if picks the newspaper up.</p>

<p>It would be rather complicated to make the newspaper a container just so we can hide the ticket in it. Fortunately we don't need to; instead we can make use of the <strong>hiddenIn</strong> property. This contains a list of items that are notionally hidden inside an object, and are discovered when the player issues a LOOK IN or SEARCH command. To use hiddenIn we list the items we want the player to be able to discover in this way, while defining the items elsewhere in our code with no starting location (i.e. a starting location of nil), as with the ticket above. We can thus put the ticket in the hiddenIn property of the newspaper:</p>

<p><div class="code"><pre>
++ newspaper: Thing 'newspaper; narcosia; paper herald'
    "It's a copy of the latest edition of the &lt;i&gt;Narcosia Herald&lt;/i&gt;. "
    
    readDesc = "A quick skim of the paper reveals nothing unusual for this part
        of the world. Yet another government minister is denying charges of
        ...
        to this godforsaken hell-hole. "
    
    <strong>hiddenIn = [ticket]</strong>
;
</pre></div></p>

<p>In the same way we could use <span class="code">hiddenUnder</span> or <span class="code">hiddenBehind</span> to hide items under or behind another object.</p>

<p>This will work well enough if the player thinks to LOOK IN or SEARCH the newspaper, but nothing happens if the player character just picks it up. Picking up an object would reveal any items in its <span class="code">hiddenUnder</span> or <span class="code">hiddenBehind</span> lists, on the basis that they would be left behind when the object is picked up and hence revealed to view, but if an object is picked up anything hidden in it is assumed to travel with it. We can change that by overriding the <strong>revealOnMove()</strong> method, which defines what happens when the object is moved. By default this is the method that reveals anything hidden under or behind the object, but since we're not hiding anything under or behind the newspaper we can override this method to do just what we need:</p>


<p><div class="code"><pre>
++ newspaper: Thing 'newspaper; narcosia; paper herald'
    "It's a copy of the latest edition of the &lt;i&gt;Narcosia Herald&lt;/i&gt;. "
    
    readDesc = <strong>'''</strong>A quick skim of the paper reveals nothing unusual for this part
        of the world. Yet another government minister is denying charges of
        ...
        to this godforsaken hell-hole. <strong>'''</strong>
    
    <strong>hiddenIn = [ticket]
    
    revealOnMove()
    {
        if(hiddenIn.length &gt; 0)
        {
            "As you pick up the newspaper a ticket falls out of it
            and lands on the floor. ";
            
            ticket.moveInto(getOutermostRoom);
            
            hiddenIn = [];
        }
    }
    
    lookInMsg = (readDesc)</strong>
;
</pre></div></p>

<p>We first check that there's something still hidden in the newspaper before doing anything else, since we only want the ticket to fall out of the newspaper the first time it's picked up, and not thereafter. Then, if the ticket is still hidden in the newspaper, we display a message to say that it flutters out and lands on the floor, move the ticket to the enclosing outer room, and empty the hiddenIn list. Although this version of <span class="code">revealOnMove()</span> will work perfectly well for this game, if you wanted a more generalized version of the routine that worked whatever was hidden in the newspaper you could write:</p>

<p><div class="code"><pre>
++ newspaper: Thing 'newspaper; narcosia; paper herald'
    "It's a copy of the latest edition of the &lt;i&gt;Narcosia Herald&lt;/i&gt;. "
    
    readDesc = <strong>'''</strong>A quick skim of the paper reveals nothing unusual for this part
        of the world. Yet another government minister is denying charges of
        ...
        to this godforsaken hell-hole. <strong>'''</strong>
    
    <strong>hiddenIn = [ticket]
    
    revealOnMove()
    {
        if(hiddenIn.length &gt; 0)
        {
            "As you pick up the newspaper &lt;&lt;list of hiddenIn&gt;&gt; {prev} {falls}
            out of it and {lands} on the floor. ";
            
            moveHidden(&amp;hiddenIn, getOutermostRoom);
        }
    }
    
    lookInMsg = (readDesc)</strong>
;
</pre></div></p>

<p>Here, <span class="code">&lt;&lt;list of hiddenIn&gt;&gt;</span> provides a list of everything that's hidden in the newspaper, while the <span class="code">{prev}</span> tag then ensures that the verbs <span class="code">{falls}</span> and <span class="code">{lands}</span> will agree with the list, whether it turns out to be a singular or plural subject (e.g. "a ticket falls..." or "a ticket and a leaflet fall..."). Meanwhile the <span class="code">moveHidden(&amp;prop, loc)</span> method moves everything in the <em>prop</em> list to <em>loc</em> and then sets <em>prop</em> to []. Note that we pass the property pointer &amp;prop to this method. I repeat, we don't actually <em>need</em> this more general form of <span class="code">revealOnMove()</span> in this game; it's shown here so you can see how to do it if you need it in your own game. </p>

<p>One last thing: once the ticket has fallen out of the newspaper then LOOK IN NEWSPAPER will produce the response "You see nothing of interest in the newspaper", which could rather too easily be taken as a comment on the paper's comments. To avoid this, it would be better if LOOK IN NEWSPAPE worked the same as READ NEWSPAPER once there's nothing left inside it. When LOOK IN has nothing else to display, it displays the object's <strong>lookInMsg</strong>. So here the easiest thing to do is to define <span class="code">lookInMsg</span> to be the same as <span class="code">readDesc</span>. But then we hit another apparent snag: <span class="code">lookInMsg</span> has to be a single-quoted string but we defined <span class="code">readDesc</span> as a double-quoted string. Fortunately, adv3Lite also allows us to define it as a single-quoted string, so we need to change it to one here. But our original definition of the newspaper's <span class="code">readDesc</span> contained a number of apostrophes which we'd now need to escape with backslashes. To avoid having to do this, we use the alternative way of defining a single-quoted string, by starting and ending it with three single-quote marks in a row '''like this'''. This removes the need to escape any apostrophes/single-quote marks (two names for the same character here) within the string.</p>

<p>Now try compiling and running the game again to test that the newspaper and ticket work as expected. Use whichever version of <span class="code">revealOnMove()</span> you prefer.</p>





</div>
<hr class="navb"><div class="navb">
<i>adv3Lite Library Tutorial</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="schemes.htm">Schemes and Devices</a> &gt; 
Just the Ticket
<br><span class="navnp"><a class="nav" href="schemes.htm"><i>Prev:</i> Schemes and Devices</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="maintenance.htm"><i>Next:</i> The Maintenance Room</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>