<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Heidi Revisited &mdash; Is the bird in the nest?</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="revisit.htm">Heidi Revisited</a> &gt; 
Is the bird in the nest?
<br><span class="navnp"><a class="nav" href="dropping.htm"><i>Prev:</i> Dropping objects from the tree</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="summing.htm"><i>Next:</i> Summing Up</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">
<h1>Is the bird in the nest?</h1>

<p>Despite all we have done so far in this chapter, the game still has one rather obvious flaw: the intention is that the game should be won when Heidi restores both bird and nest to the branch with the bird in the nest, but if you try it as it is you'll see that all she has to do to win the game is to put the nest on the branch; as things stands she can ignore the poor little bird altogether!</p>

<p>Fortunately this is very easy to fix. All we need to do is to check that the nest is on the branch <em>and</em> that the bird is in the nest:</p>

 <p><div class="code"><pre>
+ branch: Thing 'wide firm bough; flat; branch'
    "It's flat enough to support a small object. "
    
    iFixed = true
    isListed = true
    contType = On
    
    afterAction()
    {
        <strong>if(nest.isIn(self) &amp;&amp; bird.isIn(nest))</strong>
            finishGameMsg(ftVictory, [finishOptionUndo]);
    }
;
</pre></div>

<p>We use the <span class="code">isIn()</span> method here to test for containment: <span class="code">obj1.isIn(obj2)</span> is true if obj1 is either directly or indirectly contained in obj2. If you want to test for direct containment you could use <span class="code">isDirectlyIn()</span>, and that would have worked here, but it isn't actually needed.</p>

<p>Perhaps of more significance is the use of <span class="code">&amp;&amp;</span> to join two conditions. The <span class="code">&amp;&amp;</span> operator is the TADS 3 way of joining two expressions together with a logical <em>and</em>. The compound expression <span class="code">expression1 &amp;&amp; expression2</span> is true if and only if <em>expression1</em> and <em>expression2</em> are both true, otherwise it is nil (i.e. false). Note that either or both of <em>expression1</em> and <em>expression2</em> can themselves be compound expressions, but if they are, it is normally as well to surround them with parentheses to make your meaning clear both to the compiler and yourself.</p>

<p>Remember that TADS 3 considers a value of 0 or nil to be false and anything else to be true. The value of the expression <span class="code">2 &amp;&amp; 4 </span>is therefore true, while the value of the expression <span class="code">bird &amp;&amp; nil</span> is nil.</p>

<p>TADS 3 also defines a logical or operator, which looks like this: <span class="code">||</span>. The compound expression <span class="code">expression1 || expression2</span> is true if either <em>expression1</em> or <em>expression2</em> is true (i.e. neither nil nor 0) and nil if both <em>expression1</em> and <em>expression2</em> are false (i.e. either nil or 0).</p>

<p>TADS 3's third logical operator is the logical not, represented by an exclamation mark, <span class="code">!</span>. If <span class="code">expression</span> is true then <span class="code">!expression</span> is nil; if <span class="code">expression</span> is nil then <span class="code">!expression</span> is true.</p>

<p>For example:</p>

 <p><div class="code"><pre>
local a = 12, b = 6;
(a == b * 2) || (b == 7) <span class="comment">// true, because a is twice b</span>
(a == b * 2) && (b == 7) <span class="comment">// nil, because b is not 7</span>
(bird || nest) <span class="comment">// true because bird is not nil</span>
'Hampster' &amp;&amp; 'forest' <span class="comment">// true because neither string is nil</span>
(a &gt; b) &amp;&amp;  !bird.ofKind(Thing) <span class="comment">// nil because bird does inherit from Thing</span>
</pre></div>

<p>Finally note that both <span class="code">&amp;&amp;</span> and <span class="code">||</span> are <em>short-circuit operators</em>. This means that in the expression <span class="code">a &amp;&amp; b</span>, <span class="code">b</span> is never even evaluated if <span class="code">a</span> is nil (or 0) since unless <span class="code">a</span> is true, the compound expression <span class="code">a &amp;&amp; b</span> must be false. Conversely in the expression <span class="code">a || b</span>, <span class="code">b</span> will never be evaluated if <span class="code">a</span> turns out to be true, since if <span class="code">a</span> is true then the entire compound expression <span class="code">a || b</span> must be true. That is why the <span class="code">bird || nest</span> example above was true simply because <span class="code">bird</span> was neither nil nor 0; given that <span class="code">bird</span> is not false, the entire expression must be true, regardless of the value of <span class="code">nest</span>.</p>

<p>Besides saving time, this short-circuit evaluation makes it safe to write code like the following, even when <span class="code">obj</span> might sometimes be nil:</p>

 <p><div class="code"><pre>
if(obj &amp;&amp; obj.bulk &gt; 4)
   say "It's quite a bulky object. ";
</pre></div>

<p>In this example, if <span class="code">obj</span> is nil, the expression <span class="code">(obj.bulk &gt; 4)</span> is never evaluated; we thus avoid the run-time error that would otherwise result from trying to evaluate a property of nil.</p>   

<p>Now try compiling and running the game one last time to check that everything still behaves as you expect.</p>

</div>
<hr class="navb"><div class="navb">
<i>adv3Lite Library Tutorial</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="revisit.htm">Heidi Revisited</a> &gt; 
Is the bird in the nest?
<br><span class="navnp"><a class="nav" href="dropping.htm"><i>Prev:</i> Dropping objects from the tree</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="summing.htm"><i>Next:</i> Summing Up</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>