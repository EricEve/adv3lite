<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Postures</title>

<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="../../docs/manual/topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="../../docs/manual/toc.htm">Table of Contents</a> | 
<a class="nav" href="../../docs/manual/extensions.htm">Extensions</a> &gt; 
Postures
<br><span class="navnp"><a class="nav" href="objtime.htm"><i>Prev:</i> Objective Time</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="relations.htm"><i>Next:</i> Relations</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">

<h1>Postures</h1>
<h2>Overview</h2>

<p>The purpose of the <a href="../postures.t">postures.t</a> extension is to allow actors to adopt different postures (standing, sitting or lying) and to enforce a number of rules about what postures are permitted in what nested rooms, and what postures are adopted when entering or leaving a nested room. One effect of this is that the commands STAND, SIT and LIE work differently with this extension from the way in which they work in the standard adv3Lite library. Instead of moving the actor to a new location (as they may in the standard library) they will try to make the actor adopt a new posture in the actor's current location (assuming the posture is allowed in that location). The commands STAND ON, SIT ON, LIE ON, STAND IN, SIT IN and LIE IN all change the actor's posture as well as moving the actor to the location specified, while the commands BOARD (or GET ON), ENTER (or GET ON), GET OFF and GET OUT OF all change the actor's posture to the default posture for the new location as well as moving the actor there.</p>

<p>The implementation of postures in this extension is a little simpler than that in the adv3 library, and hopefully a bit easier to use. Nonetheless, before adding it to your game, you may want to ask yourself if your game really needs it. In most games most players won't miss it if it isn't there, and if your only reason for wanting it is to force the player to type STAND ON CHAIR rather than just GET ON CHAIR at one point in your game, you should probably think again. On the other hand, if there are several places in your game where postures are important, or you feel for artistic reasons that your game will gain from the added realism of keeping track of postures, then hopefully this extension will do the job for you. Of course it's your game, so ultimately your decision, but do bear in mind that the great majority of IF seems to get on perfectly well without postures.</p>
<br>

<a name="classes"></a>
<h2>New Classes, Objects and Properties</h2>

<p>In addition to a number of properties intended purely for internal use, this extension defines the following new classes, objects and properties:</p>

<ul>
<li><em>Classes</em>: <strong>Posture</strong>, <strong>Bed</strong> and <strong>Chair</strong></li>
<li><em>Objects</em>: <strong>standing</strong>, <strong>sitting</strong> and <strong>lying</strong> (all Postures)</li>
<li><em>Additional properties on Thing</em>: <span class="code">canStandInMe</span>, <span class="code">canSitInMe</span>, <span class="code">canLieInMe</span>, <span class="code">posture</span>, <span class="code">defaultPosture</span>, <span class="code">okayStandOnMsg</span>, <span class="code">okaySitOnMsg</span>, <span class="code">okayLieOnMsg</span>, <span class="code">okayStandInMsg</span>, <span class="code">okaySitInMsg</span>, <span class="code">okayLieInMsg</span>, <span class="code">cannotStandInMsg</span>, <span class="code">cannotSitInMsg</span>, <span class="code">cannotLieInMsg</span>, <span class="code">tryMakingPosture(pos)</span>, <span class="code">verifyEnterPosture(pos)</span> </li>
</ul>
<br>

<a name="usage"></a>
<h2>Usage</h2>
<p>Include the postures.t file after the library files but before your game source files.</p>

<p>You should now find that the player character can STAND, SIT and LIE DOWN, can STAND ON, SIT ON and LIE ON any Platform you've already defined in your game and STAND IN, SIT IN or LIE IN any Booth. You'll also find that the player character's posture changes to standing when s/he gets off or out of something s/he was previously sitting or lying on back into the outermost room.</p>

<p>You can customize this behaviour by use of the <strong>canStandOn</strong>, <strong>canSitOn</strong>, <strong>canLieOn</strong>, <strong>canStandIn</strong>, <strong>canSitIn</strong>, and <strong>canLieOn</strong> in properties, as well as <strong>standOnScore</strong>, <strong>sitOnScore</strong> and <strong>lieOnScore</strong>, which all work as they did before (for which see the discussion of <a href="../../docs/manual/thing.htm#posture">Pseudo-Postural Properties</a> on Thing). You can also give an object a <strong>defaultPosture</strong> property (which should be one of <span class="code">standing</span>, <span class="code">sitting</span> or <span class="code">lying</span>) to define the posture adopted by an actor in response to a BOARD/GET ON or ENTER/GET IN command with this object (or in response to a GET OFF or GET OUT OF command that results in the actor being in/on this object)</p>

<p>The new <strong>Chair</strong> and <strong>Bed</strong> classes can do some of this work for you, by defining combinations of these properties that are typically suitable for chairs and beds. A <span class="code">Chair</span> is an object an actor can sit on or stand on (but not by default lie on), but for which sitting is the both the default and the preferred posture. (To make a chair you can also lie on, like a long settee, just override its <span class="code">canLieOn</span> property to true). A <span class="code">Bed</span> is something you can stand, lie or sit on, but which has lying as its default posture. For the already existing <span class="code">Platform</span> class the default posture is standing, but you can also sit or lie on a Platform.</p>

<p>An actor's (or the player character's) current posture is given in its <strong>posture</strong> property, which can be one of <span class="code">standing</span>, <span class="code">sitting</span> or <span class="code">lying</span>. To get at a textual description of an actor's current posture you can use the posture's <strong>participle</strong> property. You should always do this in a description that mentions the player character's posture, for example:</p>

 <p><div class="code"><pre>
startRoom: Room 'Outside Building'
   "You are &lt;&lt;gPlayerChar.posture.participle&gt;&gt; outside a small brick building
    just to the north. "
;
 </pre></div>

<p>If you don't do this, but simply write "You are standing outside...", the player can instantly make you a liar by typing LIE DOWN or SIT (having to worry about this sort of thing is an example of the sort of additional busy-work you create for yourself by including this extension).</p>

<p>This covers most of what you need to know to use this extension. For additional information see the source code and comments in the <a href="../postures.t">postures.t</a> file.</p>

</div>
<hr class="navb"><div class="navb">
<i>Adv3Lite Manual</i><br>
<a class="nav" href="../../docs/manual/toc.htm">Table of Contents</a> | 
<a class="nav" href="../../docs/manual/extensions.htm">Extensions</a> &gt; 
Postures
<br><span class="navnp"><a class="nav" href="objtime.htm"><i>Prev:</i> Objective Time</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="relations.htm"><i>Next:</i> Relations</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>
