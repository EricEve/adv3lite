<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>LookDir</title>

<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="../../docs/manual/topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="../../docs/manual/toc.htm">Table of Contents</a> | 
<a class="nav" href="../../docs/manual/extensions.htm">Extensions</a> &gt; 
LookDir
<br><span class="navnp"><a class="nav" href="fueled.htm"><i>Prev:</i> Fueled Light Source</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="mobilecollectivegroup.htm"><i>Next:</i> MobileCollectiveGroup</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">

<h1>LookDir</h1>
<h2>Overview</h2>

<p>The standard library provides only rudimentary support for directional looking commands (commands of the form LOOK NORTH). All it does is:</p>

<ol>
<li>If there's an object in scope whose vocab matches the direction name speficied, such as a 'north wall' or a sky object with 'up' in its vocab, that object will be described (just as if the player had typed X NORTH or X UP).</i>
<li>Otherwise, if the player typed LOOK IN they'll be asked what they want to look in.</li>
<li>Otherwise a message will be displayed saying there's no need to look in any direction in this game.</li>
</ol>

<p>For many games this may be perfectly adequate, but some games may benefit from a more elaborate implementation, which is what the LookDir extension aims to provide. With <a href="../lookDir.t">LookDir</a> included in your game, the sequence of events in response to a directional looking command becomes:</p>

<ol>
<li>If there's an object in scope whose vocab matches the direction name speficied, such as a 'north wall' or a sky object with 'up' in its vocab, that object will be described (just as if the player had typed X NORTH or X UP).</i>
<li>Otherwise, if the player typed LOOK IN they'll be asked what they want to look in.</li>
<li>If a <i>dir</i>Look property (e.g. northLook or portLook) is defined on the actor's location, it will be displayed to describe what can be seen in the direction requested (e.g., NORTH or PORT), provided there's light to see by (if not, the player will be told it's too dark). For example, you might define <code>northLook = "You see a long row of trees marching off to the middle distance. "</code> </li>
<li>Otherwise, if the direction was DOWN and the location provides a floor object, that floor object will be described.</li>
<li>Otherwise, the extension will attempt to generate a response based on what the corresponding direction property of the actor's location points to. For example, if the player issued the command LOOK SOUTH and the actor's location defines <code>south = frontDoor</code>, then we'll respond with "To the south you see the front door."</li>
<li>If all else fails, a message will be displayed saying you see nothing unexpected in that direction.</li>
</ol>

<p>The automated response generated at step 5 may not always be ideal, but it may often be good enough for game authors to save themselves some work by only having to customize those responses it doesn't produce to their liking.</p>

<p>To use the LookDir extension you just need to include it in your build, after the adv3Lite library files.</p> 
<br>
<h2>Details</h2>
<h3>The xxxLook Properties</h3>
<p>With the LookDir extension added to your game, you can add xxxLook properties to Rooms (or nested rooms) to provide the responses to LOOK XXX. For example, <code>northLook </code>would provide the response to LOOK NORTH, <code>southeastLook</code> to LOOK SOUTHEAST or LOOK SE, and <code>upLook</code> to LOOK UP. An xxxLook property may be defined as a single-quoted or double-quoted string or a method to display some text.</p>

<p>This is handled by the <li><b>lookDir(dir)</b> method, which first checks that there's enough light to see and complains that it's too dark otherwise. If there is enough light to see the method then checks whether the Room defines a non-nil <i>dir</i>Look property corresponding to <i>dir</i>. If it does, it invokes that property, otherwise it calls <code>describeView(dir)</code> to attempt to generate an automated response (more on which <a href='#auto'>below</a>
).</p>
<li>

<p>The extension also defines the <b>downLook</b> method on Thing  to change the action to examining the Room's floor object (<span class='code'>floorObj</span>) if there is one. This method may, of course, be overridden in game code if some other way of handling LOOK DOWN is wanted.</p>

<p>There's currently only limited support for looking in a specified direction from a nested room (i.e. when the player character's location isn't their outermost room). The extension calls <span class='code'>lookDir(dir)</span> on the actor's outermost room unless the actor is in a closed opaque Booth, in which case it will be called on the Booth instead.</p>
<br>
<h4>Custom Directions</h4>
<p>Adv3Lite allows game authors to define <a href='../../docs/manual/room.htm#directions'>custom Directions</a>. If you want LOOK XXX to work with your custom direction, e.g. LOOK NNE, you need also to define a <b>lookProp</b> property on your custom Direction to hold a property pointer for the lookXXX property you want your custom Direction to work with, for example:</p>

<p><div class=code><pre>
nornoreastDir: CompassDirection
    name = 'nornoreast'
    dirProp = &amp;nornoreast
    sortingOrder = 1450
    opposite = sousouwestDir <span class="comment">//assuming you were also defining a sousouwest direction</span>
    lookProp = &amp;nornoreastLook <span class="comment">// ADD THIS to be able to use a nornoreastLook property on Rooms in your game.</span>
;

grammar directionName(nornoreast): 'nornoreast' | 'nne' : Production
    dir = nornoreastDir
;
</pre></div>

<p>In this case you may prefer to use a briefer property name, e.g., <span class='code'>lookProp = &amp;nneLook</span>.

<a name='auto'></a>
<h3>The Automated Response - describeView(dir)</h3>
<p> The <code>describeView(dir)</code> method is called on the actor's location if there is no xxxLook property corresponding to the direction specified in the player's command (e.g., no <code>westLool</code> property when the player typed LOOK WEST). It attempts to generate a passable response from what's defined on the corresponding direction property (e.g. <code>west</code> by following these steps:</p>

<ol>
<li>If the relevant property value is a single-quoted string, it displays that string.</li>
<li>Otherwise, if it's a double-quoted string or a method, we first check if the destination is nevertheless known via libGlobal.extraDestInfo, say that that destination lies that way. Otherwise we just say it looks like you could go that way.</li>
<li>If the property contains an UnlistedProxyConmnector (from use of <code>asExit</code> it uses the exit it's a proxy for. E.g. if we have defined <code>out asExit(southeast)</code> then we'll work with whatever's defined on the <code>southeast</code> property.</li>
<li>If the property holds a Travel connector for which isHidden is true or isConnectorApparent is nil, we treat it as being not present by calling <code>sayNothingUnexpectedThatWay(dir)</code></li>
<li>If the property hold a TravelConnector that defines a <b>lookDirDesc</b> property (or method) then that property will be used to construct the response; whatever text <code>lookDirDesc</code> defines will be preceeded by an introduction like "To the east you see ".</li>
<li>Otherwise, if the property holds a physical travel connector such as a Door, Passage or Stairway, we display a message stating that in that direction lies the physical connector in quesstion (e.g., "To the north you see a red door"), unless the physical connector forms the way into an Emterable, in which case the Enterable will be mentioned first (e.g., "To the north you see a small white cottage which is enterable via a red door. ")</li>
<li>Otherwise, if the property holds an AskConnector, we list the physical connectors (doors and such) in its options list  (e.g., "To the west you see the yellow door, the long passage and the broad flight of stairs").</li>
<li>Otherwise, if the property holds a Room that has been visited or is already familiar or is visible to the player (through being in the same SenseRegion), or an abstract travel connector leading to such a Room, we say that that Room lies in that direction.</li>
<li>Otherwise, if the property holds a TravelConnector not otherwise catered for or a double-quoted string or a method, call <code>sayCouldGoThatWay(dir)</code> to say we could go that way (since there's nothing more this routine can deduce about it.</li>
<li>Otherwise, if all else fails, call <code>sayNothingUnexpectedThatWay(dir)</code> to say we see nothing unexpected that way.</li>   
</ol>

<p>These responses may not always be ideal, but there are various ways in which can customise them:</p>
<ul>
<li>We can define the <b>lookDirDesc</b> property on any kind of TravelConnector to stipulate how we want it described when looking in the direction in leads; <code>lookDirDesc</code> can be a single-quoted or double-quoted string or a method that displays something (which we can vary according to circumstances).</li>
<li>If we see clumsy prose like "To the south you can see edge of forest" it's probably because we haven't defined the relevant room's <a href='../../docs/manual/room.htm#roomdef'>vocab property </a> to give it a more suitable name (such as 'edge of the forest'. Where a room's <code>roomTitle</code> doesn't make a good name, this is probably worth doing anyway.</li>
<li>If we see clumsy response to LOOK <i>dir</i> generated via a single-quoted string on the relevant <i>dir</i> property (e.g. LOOK WEST giving us "You can't walk on water") we could consider rephrasing it (e.g., to "That way lies the river, which you can hardly walk over"). The alternative would be to define the relevant <i>dir</i>Look property.</li>
<li>We can override the Thing method <b>sayNothingUnexpectedThatWay(dir)</b> to say something different from the library default. This is probably most worth doing on on Thing, Room, or subclass of Thing such as Booth.</li>
<li>We can override the Room method <b>sayCouldGoThatWay(dir)</b> to say something different. This could well be worth doing on the Room class, or on a subclasses of Room (if we create any for our game), but may be less worth doing on individual rooms unless we want to handle an unusual special case.</li>
</ul>

<p>Note that it may often be easier to define the relevant <i>dir</i>Look property than to fiddle with the above methods to correct an individual case. On the other hand, there may be cases where overriding one of the methods outlined above could be less work, for example if we want the same response to apply to one different groups of directions, .e.g,:</p>

<p><div class=code><pre>
meadow: Room 'Meadow'
   "This meadow is bordered by a wide river to the south, a dense forest to the west, and a high fence to the north, 
     leaving the path to the east as the only route out. "

    sayNothingUnexpectedThatWay(dir)
    {
       switch(dir)
       {
         case northDir:
         caae northWestDir:
         case northEastDir:
           "A high fence runs along the northern border of the meadow, blocking both egress and the
              view in that direction. ";
             break;
        case south:
        case southEast:
        case southWest:
           "A broad river runs along the southern boder of the meadow. ";
           break;
        case west;
           "A dense forest abuts the western edge of the meadow. ";
            break;
        default:
           inherited(dir);
        break;			
      }
    }
	
	east = meadowPath <span class='comment'>// assume this is elsewhere defined as a PathPassage </span>
;
</pre></div>

<p>Note that we don't need to handle any <code>case east</code> here, since <code>describeView(dir)</code> will already have provided a message relating to the <code>meadowPath</code> object.</p>


<h2>Directional Looking from Nested Rooms</h2>
<p>If the actor is sitting on a chair or standing on a stool, their view in any particular direction is probably little different from what they'd see if they were simply located in the outermost Room. On the other hand, if the Room is a theatre containing a Platform representing the stage at its northern end, the views north and south from the stage might be rather different from those from the rest of the Room (representing the auditorium). Again, if the actor is in a Booth it may well be that the sides of the Booth restrict what the actor can see in at least some directions, even if the Booth is open. There are a couple of things we can do to model such situations.</p>

<p>The first is to define <i>dir</i>Look properties on the nested room (such as the stage or the booth) which will then be used in preference to the corresponding <i>dir</i>Look properties on the enclosing Room when the actor is in the nested room. For example, on the theatre Room we might define:</p>

<p><div class=code><pre>
    northLook = "To the north you see the stage, on which an incompetent troupe of actors are 
       making a total hash of playing Hamlet. "
    southLook = "To the south you see the rows of seats behind you and the exit signs over the doors. "
;
</pre></div>

<p>While on the stage you could define:</p>
   
<p><div class=code><pre>
    northLook = "To the north you see the backdrop depicting the battlements of Elsinore Castle. "
    southLook = "To the south you see the auditorium full of the most unappreciative audience
       you have ever played to. "
;
</pre></div>
   
<p>The situation with a Booth may be more complicated. Suppose we have a Booth representing a garden shed. Notionally, its door faces south across the garden to a greenhouse, while its (west-facing) window overlooks another part of the garden and the house. If the actor is inside the shed, they shouldn't be able to see what lies to the north or west of the garden, as they would be able to from outside the shed.</p>

<p>In this case we can define the shed's <b>handleLookDir</b> to be true, meaning that when the player character is inside the shed, we want to use the shed's version of <code>lookDir()</code> rather than the garden's. We could then define the shed's  <code>lookDir()</code> method along the following lines:</p>

<p><div class=code><pre>
        handleLookDir = true
        
        lookDir(dir)
        {
            switch(dir)
            {
            case westDir:
                &quot;\^&lt;&lt;windowView&gt;&gt;. &quot;;
                break;
            case southDir:
                &quot;&lt;&lt;if isOpen&gt;&gt;&lt;&lt;doorView&gt;&gt;&lt;&lt;else&gt;&gt;You see the inside of the shed door&lt;&lt;end&gt;&gt;. &quot;;
                break;
            case outDir:
                &quot;&lt;&lt;if isOpen&gt;&gt;&lt;&lt;doorView&gt;&gt;, while &lt;&lt;else&gt;&gt;\^&lt;&lt;end&gt;&gt;&lt;&lt;windowView&gt;&gt;&lt;&lt;end&gt;&gt;. &quot;;
                break;
            default:
                &quot;That way all you can see is the inside of the shed wall. &quot;;
                break;
            }
        }
        
        windowView = 'through the window you see the section of the garden leading up to the house'
        doorView = 'Through the open door you see part of the garden and the greenhouse opposite'
</pre></div>

<p>By default, <code>handleLookDir</code> is true on Room and on any Thing we can't see out of, but game code can always override the latter to be unconditionally true in instances like our garden shed where we always want to use the nested room's version of <code>lookDir(dir)</code>.

<p>The default behaviour of Thing's (as opposed to Room's) version of <code>lookDir(dir)</code> is to call <code>lookDir(dir)</code> on the next suitable container, if we can see out to one, or to display our own "see nothing expected" message (i.e. to call our own <code>sayNothingUnexpectedThatWay(dir)</code> method) if we can't see out. In this context 'next suitable container' means the innermost of the objects we're inside that's a Room, or from which we can't see out, or for which <code>handleLookDir</code> is true. For a Booth we'll almost certainly want to override <code>lookDir(dir)</code> if we want more realistic results, unless the Booth is meant to be see-through in every direction.</p>

</div>
<hr class="navb"><div class="navb">
<i>Adv3Lite Manual</i><br>
<a class="nav" href="../../docs/manual/toc.htm">Table of Contents</a> | 
<a class="nav" href="../../docs/manual/extensions.htm">Extensions</a> &gt; 
LookDir
<br><span class="navnp"><a class="nav" href="fueled.htm"><i>Prev:</i> Fueled Light Source</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="mobilecollectivegroup.htm"><i>Next:</i> MobileCollectiveGroup</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>