<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Signals</title>

<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="../../docs/manual/topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="../../docs/manual/toc.htm">Table of Contents</a> | 
<a class="nav" href="../../docs/manual/extensions.htm">Extensions</a> &gt; 
Sensory
<br><span class="navnp"><a class="nav" href="sensory.htm"><i>Prev:</i> Sensory</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="subtime.htm"><i>Next:</i> Subtime</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">

<h1>Signals</h1>
<h2>Overview</h2>
<p>The purpose of the <a href="../signals.t">signals.t</a> extension is to provide a means for one object to send signals to another (which can then respond to them) and to provide a mechanism for establishing and breaking signalling links between objects. This mechanism employs the <a href="relations.htm">Relations</a> extension, which must also be present.</p>
<br>

<a name="classes"></a>
<h2>New Classes, Objects and Methods</h2>

<p>In addition to a number of methods intended purely for internal use, this extension defines the following new classes, objects and methods:</p>
<ul>
<li><em>Classes</em>: <strong>Signal</strong></li>
<li><em>Objects</em>: litSignal, unlitSignal, discoverSignal, undiscoverSignal, lockSignal, unlockSignal, onSignal, offSignal, wornSignal, doffSignal, moveSignal, seenSignal, examinedSignal, takeSignal, dropSignal, openSignal, closeSignal</li>
<li><em>Methods on Signal</em>: <span class="code">emit()</span>.</li>
<li><em>New methods on Thing</em>: <span class="code">emit()</span>, <span class="code">handle()</span>.</li>
</ul>

<a name="usage"></a>
<h2>Usage</h2>
<p>Include the signals.t file after the library files but before your game source files. The <a href="relations.htm">Relations</a> extensions (relations.t) must also be present.</p>

<p>The basic mechanism is that an object (the sender) sends a signal by calling the <strong>emit()</strong> method with the signal as its argument, for example:</p>

 <p><div class="code"><pre>
emit(openSignal);
 </pre></div>

<p>Any interested objects can then handle this signal in their <strong>handle()</strong> method, which takes two arguments, the sender and the signal that's just been sent:</p> 
 
 <p><div class="code"><pre>
handle(sender, signal)
{
   if(sender == safeDoor &amp;&amp; signal == openSignal)
     ...
}   
 </pre></div> 
 
<p>To register than an object (the receiver) is interested in receiving a particular signal from a particular sender, we establish a relation between them using the normal relation syntax, since a Signal is a kind of Relation:</p> 
 
 <p><div class="code"><pre>
relate(sender, signal, receiver); 
 </pre></div> 

<p>The relation between sender and receiver can be severed using the <span class="code">unrelate()</span> function:</p> 

 <p><div class="code"><pre>
unrelate(sender, signal, receiver); 
 </pre></div>
 
<p>A sender will send signals only to those receivers that have been related to it through the relevant Signal/Relation.</p> 
 
<p>Defining a new signal is usually very straightforward. Since a Signal is a kind of Relation, it can be defined using the Relation template, e.g. to define a signal an object might send when it's cut:</p> 
 
 <p><div class="code"><pre>
cutSignal: Signal 'cut';
 </pre></div> 
 
<p>Here the 'cut' in the template defines the signal's name property, which may be used in the relate() and unrelate() functions in place of the Signal's programmatic name. Thus these two statements do precisely the same thing:</p>
 
 <p><div class="code"><pre>
 relate(wire, cutSignal, alarm);
 relate(wire, 'cut', alarm);
 </pre></div> 
 
<p>A Signal may be defined with additional properties which the sender can set to convey additional information to the sender. For example this extension defines:</p> 
 
 <p><div class="code"><pre>
 moveSignal: Signal 'moved' destination = nil;
 </pre></div>
 
<p>This allows <span class="code">moveSignal</span> to convey information about where the sender was moved to, as well as the fact that it was moved.</p> 

<p>Note that there is no need to define the <span class="code">relationType</span> of a Signal since this extension already defines it as manyToMany.</p>

<p>Note finally that simply defining a signal doesn't make anything happen. Your code still has to emit it somewhere, and it won't be handled anywhere until you've related it to the relevant receivers using the <span class="code">relate()</span> function. Some signals come predefinined in this extension, however, along with the code to emit them at appropriate points. These are described below.</p>
 
<br>
<a name="defined"></a>
<h2>Signals Defined in this Extension</h2> 
 
<ul>
<li><strong>litSignal</strong>: Signal 'lit';</li>
<li><strong>unlitSignal</strong>: Signal 'unlit';</li>
<li><strong>discoverSignal</strong>: Signal 'discover';</li>
<li><strong>undiscoverSignal</strong>: Signal 'undiscover';</li>
<li><strong>lockSignal</strong>: Signal 'lock';</li>
<li><strong>unlockSignal</strong>: Signal 'unlock';</li>
<li><strong>onSignal</strong>: Signal 'turned on';</li>
<li><strong>offSignal</strong>: Signal 'turned off';</li>
<li><strong>wornSignal</strong>: Signal 'worn';</li>
<li><strong>doffSignal</strong>: Signal 'doffed';</li>
<li><strong>moveSignal</strong>: Signal 'moved' destination = nil;</li>
<li><strong>seenSignal</strong>: Signal 'seen' location = nil;</li>
<li><strong>examinedSignal</strong>: Signal 'examined' actor = nil;</li>
<li><strong>takeSignal</strong>: Signal 'take' actor = nil;</li>
<li><strong>dropSignal</strong>: Signal 'drop' actor = nil;</li>
<li><strong>openSignal</strong>: Signal 'open';</li>
<li><strong>closeSignal</strong>: Signal 'close';</li>
</ul> 
<p>This covers most of what you need to know to use this extension. For additional information see the source code and comments in the <a href="../signals.t">signals.t</a> file.</p>



</div>
<hr class="navb"><div class="navb">
<i>Adv3Lite Manual</i><br>
<a class="nav" href="../../docs/manual/toc.htm">Table of Contents</a> | 
<a class="nav" href="../../docs/manual/extensions.htm">Extensions</a> &gt; 
Sensory
<br><span class="navnp"><a class="nav" href="sensory.htm"><i>Prev:</i> Sensory</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="subtime.htm"><i>Next:</i> Subtime</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>
